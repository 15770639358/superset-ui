(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{2207:function(module,exports,__webpack_require__){eval('var map = {\n\t"./af": 1995,\n\t"./af.js": 1995,\n\t"./ar": 1996,\n\t"./ar-dz": 1997,\n\t"./ar-dz.js": 1997,\n\t"./ar-kw": 1998,\n\t"./ar-kw.js": 1998,\n\t"./ar-ly": 1999,\n\t"./ar-ly.js": 1999,\n\t"./ar-ma": 2000,\n\t"./ar-ma.js": 2000,\n\t"./ar-sa": 2001,\n\t"./ar-sa.js": 2001,\n\t"./ar-tn": 2002,\n\t"./ar-tn.js": 2002,\n\t"./ar.js": 1996,\n\t"./az": 2003,\n\t"./az.js": 2003,\n\t"./be": 2004,\n\t"./be.js": 2004,\n\t"./bg": 2005,\n\t"./bg.js": 2005,\n\t"./bm": 2006,\n\t"./bm.js": 2006,\n\t"./bn": 2007,\n\t"./bn-bd": 2008,\n\t"./bn-bd.js": 2008,\n\t"./bn.js": 2007,\n\t"./bo": 2009,\n\t"./bo.js": 2009,\n\t"./br": 2010,\n\t"./br.js": 2010,\n\t"./bs": 2011,\n\t"./bs.js": 2011,\n\t"./ca": 2012,\n\t"./ca.js": 2012,\n\t"./cs": 2013,\n\t"./cs.js": 2013,\n\t"./cv": 2014,\n\t"./cv.js": 2014,\n\t"./cy": 2015,\n\t"./cy.js": 2015,\n\t"./da": 2016,\n\t"./da.js": 2016,\n\t"./de": 2017,\n\t"./de-at": 2018,\n\t"./de-at.js": 2018,\n\t"./de-ch": 2019,\n\t"./de-ch.js": 2019,\n\t"./de.js": 2017,\n\t"./dv": 2020,\n\t"./dv.js": 2020,\n\t"./el": 2021,\n\t"./el.js": 2021,\n\t"./en-au": 2022,\n\t"./en-au.js": 2022,\n\t"./en-ca": 2023,\n\t"./en-ca.js": 2023,\n\t"./en-gb": 2024,\n\t"./en-gb.js": 2024,\n\t"./en-ie": 2025,\n\t"./en-ie.js": 2025,\n\t"./en-il": 2026,\n\t"./en-il.js": 2026,\n\t"./en-in": 2027,\n\t"./en-in.js": 2027,\n\t"./en-nz": 2028,\n\t"./en-nz.js": 2028,\n\t"./en-sg": 2029,\n\t"./en-sg.js": 2029,\n\t"./eo": 2030,\n\t"./eo.js": 2030,\n\t"./es": 2031,\n\t"./es-do": 2032,\n\t"./es-do.js": 2032,\n\t"./es-mx": 2033,\n\t"./es-mx.js": 2033,\n\t"./es-us": 2034,\n\t"./es-us.js": 2034,\n\t"./es.js": 2031,\n\t"./et": 2035,\n\t"./et.js": 2035,\n\t"./eu": 2036,\n\t"./eu.js": 2036,\n\t"./fa": 2037,\n\t"./fa.js": 2037,\n\t"./fi": 2038,\n\t"./fi.js": 2038,\n\t"./fil": 2039,\n\t"./fil.js": 2039,\n\t"./fo": 2040,\n\t"./fo.js": 2040,\n\t"./fr": 2041,\n\t"./fr-ca": 2042,\n\t"./fr-ca.js": 2042,\n\t"./fr-ch": 2043,\n\t"./fr-ch.js": 2043,\n\t"./fr.js": 2041,\n\t"./fy": 2044,\n\t"./fy.js": 2044,\n\t"./ga": 2045,\n\t"./ga.js": 2045,\n\t"./gd": 2046,\n\t"./gd.js": 2046,\n\t"./gl": 2047,\n\t"./gl.js": 2047,\n\t"./gom-deva": 2048,\n\t"./gom-deva.js": 2048,\n\t"./gom-latn": 2049,\n\t"./gom-latn.js": 2049,\n\t"./gu": 2050,\n\t"./gu.js": 2050,\n\t"./he": 2051,\n\t"./he.js": 2051,\n\t"./hi": 2052,\n\t"./hi.js": 2052,\n\t"./hr": 2053,\n\t"./hr.js": 2053,\n\t"./hu": 2054,\n\t"./hu.js": 2054,\n\t"./hy-am": 2055,\n\t"./hy-am.js": 2055,\n\t"./id": 2056,\n\t"./id.js": 2056,\n\t"./is": 2057,\n\t"./is.js": 2057,\n\t"./it": 2058,\n\t"./it-ch": 2059,\n\t"./it-ch.js": 2059,\n\t"./it.js": 2058,\n\t"./ja": 2060,\n\t"./ja.js": 2060,\n\t"./jv": 2061,\n\t"./jv.js": 2061,\n\t"./ka": 2062,\n\t"./ka.js": 2062,\n\t"./kk": 2063,\n\t"./kk.js": 2063,\n\t"./km": 2064,\n\t"./km.js": 2064,\n\t"./kn": 2065,\n\t"./kn.js": 2065,\n\t"./ko": 2066,\n\t"./ko.js": 2066,\n\t"./ku": 2067,\n\t"./ku.js": 2067,\n\t"./ky": 2068,\n\t"./ky.js": 2068,\n\t"./lb": 2069,\n\t"./lb.js": 2069,\n\t"./lo": 2070,\n\t"./lo.js": 2070,\n\t"./lt": 2071,\n\t"./lt.js": 2071,\n\t"./lv": 2072,\n\t"./lv.js": 2072,\n\t"./me": 2073,\n\t"./me.js": 2073,\n\t"./mi": 2074,\n\t"./mi.js": 2074,\n\t"./mk": 2075,\n\t"./mk.js": 2075,\n\t"./ml": 2076,\n\t"./ml.js": 2076,\n\t"./mn": 2077,\n\t"./mn.js": 2077,\n\t"./mr": 2078,\n\t"./mr.js": 2078,\n\t"./ms": 2079,\n\t"./ms-my": 2080,\n\t"./ms-my.js": 2080,\n\t"./ms.js": 2079,\n\t"./mt": 2081,\n\t"./mt.js": 2081,\n\t"./my": 2082,\n\t"./my.js": 2082,\n\t"./nb": 2083,\n\t"./nb.js": 2083,\n\t"./ne": 2084,\n\t"./ne.js": 2084,\n\t"./nl": 2085,\n\t"./nl-be": 2086,\n\t"./nl-be.js": 2086,\n\t"./nl.js": 2085,\n\t"./nn": 2087,\n\t"./nn.js": 2087,\n\t"./oc-lnc": 2088,\n\t"./oc-lnc.js": 2088,\n\t"./pa-in": 2089,\n\t"./pa-in.js": 2089,\n\t"./pl": 2090,\n\t"./pl.js": 2090,\n\t"./pt": 2091,\n\t"./pt-br": 2092,\n\t"./pt-br.js": 2092,\n\t"./pt.js": 2091,\n\t"./ro": 2093,\n\t"./ro.js": 2093,\n\t"./ru": 2094,\n\t"./ru.js": 2094,\n\t"./sd": 2095,\n\t"./sd.js": 2095,\n\t"./se": 2096,\n\t"./se.js": 2096,\n\t"./si": 2097,\n\t"./si.js": 2097,\n\t"./sk": 2098,\n\t"./sk.js": 2098,\n\t"./sl": 2099,\n\t"./sl.js": 2099,\n\t"./sq": 2100,\n\t"./sq.js": 2100,\n\t"./sr": 2101,\n\t"./sr-cyrl": 2102,\n\t"./sr-cyrl.js": 2102,\n\t"./sr.js": 2101,\n\t"./ss": 2103,\n\t"./ss.js": 2103,\n\t"./sv": 2104,\n\t"./sv.js": 2104,\n\t"./sw": 2105,\n\t"./sw.js": 2105,\n\t"./ta": 2106,\n\t"./ta.js": 2106,\n\t"./te": 2107,\n\t"./te.js": 2107,\n\t"./tet": 2108,\n\t"./tet.js": 2108,\n\t"./tg": 2109,\n\t"./tg.js": 2109,\n\t"./th": 2110,\n\t"./th.js": 2110,\n\t"./tk": 2111,\n\t"./tk.js": 2111,\n\t"./tl-ph": 2112,\n\t"./tl-ph.js": 2112,\n\t"./tlh": 2113,\n\t"./tlh.js": 2113,\n\t"./tr": 2114,\n\t"./tr.js": 2114,\n\t"./tzl": 2115,\n\t"./tzl.js": 2115,\n\t"./tzm": 2116,\n\t"./tzm-latn": 2117,\n\t"./tzm-latn.js": 2117,\n\t"./tzm.js": 2116,\n\t"./ug-cn": 2118,\n\t"./ug-cn.js": 2118,\n\t"./uk": 2119,\n\t"./uk.js": 2119,\n\t"./ur": 2120,\n\t"./ur.js": 2120,\n\t"./uz": 2121,\n\t"./uz-latn": 2122,\n\t"./uz-latn.js": 2122,\n\t"./uz.js": 2121,\n\t"./vi": 2123,\n\t"./vi.js": 2123,\n\t"./x-pseudo": 2124,\n\t"./x-pseudo.js": 2124,\n\t"./yo": 2125,\n\t"./yo.js": 2125,\n\t"./zh-cn": 2126,\n\t"./zh-cn.js": 2126,\n\t"./zh-hk": 2127,\n\t"./zh-hk.js": 2127,\n\t"./zh-mo": 2128,\n\t"./zh-mo.js": 2128,\n\t"./zh-tw": 2129,\n\t"./zh-tw.js": 2129\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error("Cannot find module \'" + req + "\'");\n\t\te.code = \'MODULE_NOT_FOUND\';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 2207;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2207\n')},2409:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ../superset-ui-core/src/chart/components/reactify.tsx\nvar reactify = __webpack_require__(1058);\n\n// EXTERNAL MODULE: ../superset-ui-core/src/style/index.tsx\nvar style = __webpack_require__(455);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(55);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/core-js/modules/web.dom-collections.iterator.js\nvar web_dom_collections_iterator = __webpack_require__(26);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/lodash/lodash.js\nvar lodash = __webpack_require__(69);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3/d3.js\nvar d3 = __webpack_require__(160);\nvar d3_default = /*#__PURE__*/__webpack_require__.n(d3);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/nvd3-fork/build/nv.d3.js\nvar nv_d3 = __webpack_require__(2332);\nvar nv_d3_default = /*#__PURE__*/__webpack_require__.n(nv_d3);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/mathjs/lib/esm/entry/impureFunctionsAny.generated.js\nvar impureFunctionsAny_generated = __webpack_require__(1089);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/moment/moment.js\nvar moment = __webpack_require__(1933);\nvar moment_default = /*#__PURE__*/__webpack_require__.n(moment);\n\n// EXTERNAL MODULE: ../superset-ui-core/src/color/index.ts + 3 modules\nvar color = __webpack_require__(864);\n\n// EXTERNAL MODULE: ../superset-ui-core/src/number-format/NumberFormatterRegistrySingleton.ts\nvar NumberFormatterRegistrySingleton = __webpack_require__(157);\n\n// EXTERNAL MODULE: ../superset-ui-core/src/translation/TranslatorSingleton.ts + 1 modules\nvar TranslatorSingleton = __webpack_require__(12);\n\n// EXTERNAL MODULE: ../superset-ui-core/src/number-format/NumberFormats.ts\nvar NumberFormats = __webpack_require__(142);\n\n// EXTERNAL MODULE: ../superset-ui-core/src/time-format/TimeFormatterRegistrySingleton.ts + 5 modules\nvar TimeFormatterRegistrySingleton = __webpack_require__(141);\n\n// EXTERNAL MODULE: ../superset-ui-core/src/time-format/formatters/smartDateVerbose.ts\nvar smartDateVerbose = __webpack_require__(1053);\n\n// EXTERNAL MODULE: ../superset-ui-core/src/utils/isDefined.ts\nvar isDefined = __webpack_require__(468);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/nvd3-fork/build/nv.d3.css\nvar build_nv_d3 = __webpack_require__(2333);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/legacy-preset-chart-nvd3/src/vendor/superset/AnnotationTypes.js\nvar AnnotationTypes = __webpack_require__(130);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/legacy-preset-chart-nvd3/src/utils/isTruthy.js\nvar isTruthy = __webpack_require__(1088);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/legacy-preset-chart-nvd3/src/utils.js\nvar utils = __webpack_require__(886);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/legacy-preset-chart-nvd3/src/PropTypes.js\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * "License"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */ /* eslint-disable react/sort-prop-types */const numberOrAutoType=prop_types_default.a.oneOfType([prop_types_default.a.number,prop_types_default.a.oneOf(["auto"])]);const stringOrObjectWithLabelType=prop_types_default.a.oneOfType([prop_types_default.a.string,prop_types_default.a.shape({label:prop_types_default.a.string})]);const rgbObjectType=prop_types_default.a.shape({r:prop_types_default.a.number.isRequired,g:prop_types_default.a.number.isRequired,b:prop_types_default.a.number.isRequired});const numericXYType=prop_types_default.a.shape({x:prop_types_default.a.number,y:prop_types_default.a.number});const categoryAndValueXYType=prop_types_default.a.shape({x:prop_types_default.a.string,y:prop_types_default.a.number});const boxPlotValueType=prop_types_default.a.shape({outliers:prop_types_default.a.arrayOf(prop_types_default.a.number),Q1:prop_types_default.a.number,Q2:prop_types_default.a.number,Q3:prop_types_default.a.number,whisker_high:prop_types_default.a.number,whisker_low:prop_types_default.a.number});const bulletDataType=prop_types_default.a.shape({markerLabels:prop_types_default.a.arrayOf(prop_types_default.a.string),markerLineLabels:prop_types_default.a.arrayOf(prop_types_default.a.string),markerLines:prop_types_default.a.arrayOf(prop_types_default.a.number),markers:prop_types_default.a.arrayOf(prop_types_default.a.number),measures:prop_types_default.a.arrayOf(prop_types_default.a.number),rangeLabels:prop_types_default.a.arrayOf(prop_types_default.a.string),ranges:prop_types_default.a.arrayOf(prop_types_default.a.number)});const annotationLayerType=prop_types_default.a.shape({annotationType:prop_types_default.a.oneOf(Object.keys(AnnotationTypes["a" /* ANNOTATION_TYPES */])),color:prop_types_default.a.string,hideLine:prop_types_default.a.bool,name:prop_types_default.a.string,opacity:prop_types_default.a.string,show:prop_types_default.a.bool,showMarkers:prop_types_default.a.bool,sourceType:prop_types_default.a.string,style:prop_types_default.a.string,value:prop_types_default.a.oneOfType([prop_types_default.a.number,prop_types_default.a.string]),width:prop_types_default.a.number});\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/legacy-preset-chart-nvd3/src/NVD3Vis.js\nfunction ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable});keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1,source;i<arguments.length;i++){source=null!=arguments[i]?arguments[i]:{};if(i%2){ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key])})}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source))}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}}return target}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0})}else{obj[key]=value}return obj}/* eslint-disable react/sort-prop-types */ /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * "License"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *//* eslint-disable-next-line */const NO_DATA_RENDER_DATA=[{text:"No data",dy:"-.75em",class:"header"},{text:"Adjust filters or check the Datasource.",dy:".75em",class:"body"}];// Override the noData render function to make a prettier UX\n// Code adapted from https://github.com/novus/nvd3/blob/master/src/utils.js#L653\nnv_d3_default.a.utils.noData=function(chart,container){const opt=chart.options(),margin=opt.margin(),height=nv_d3_default.a.utils.availableHeight(null,container,margin),width=nv_d3_default.a.utils.availableWidth(null,container,margin),x=margin.left+width/2,y=margin.top+height/2;// Remove any previously created chart components\ncontainer.selectAll("g").remove();const noDataText=container.selectAll(".nv-noData").data(NO_DATA_RENDER_DATA);noDataText.enter().append("text").attr("class",d=>`nvd3 nv-noData ${d.class}`).attr("dy",d=>d.dy).style("text-anchor","middle");noDataText.attr("x",x).attr("y",y).text(d=>d.text)};const{getColor,getScale}=color["b" /* CategoricalColorNamespace */],MAX_MARGIN_PAD=30,MIN_HEIGHT_FOR_BRUSH=480,MAX_NO_CHARACTERS_IN_LABEL=40,BREAKPOINTS={small:340},TIMESERIES_VIZ_TYPES=["line","dual_line","line_multi","area","compare","bar","time_pivot"],CHART_ID_PREFIX="chart-id-",propTypes={data:prop_types_default.a.oneOfType([prop_types_default.a.arrayOf(prop_types_default.a.oneOfType([// pie\ncategoryAndValueXYType,// dist-bar\nprop_types_default.a.shape({key:prop_types_default.a.string,values:prop_types_default.a.arrayOf(categoryAndValueXYType)}),// area, line, compare, bar\nprop_types_default.a.shape({key:prop_types_default.a.arrayOf(prop_types_default.a.string),values:prop_types_default.a.arrayOf(numericXYType)}),// dual-line\nprop_types_default.a.shape({classed:prop_types_default.a.string,key:prop_types_default.a.string,type:prop_types_default.a.string,values:prop_types_default.a.arrayOf(numericXYType),yAxis:prop_types_default.a.number}),// box-plot\nprop_types_default.a.shape({label:prop_types_default.a.string,values:prop_types_default.a.arrayOf(boxPlotValueType)}),// bubble\nprop_types_default.a.shape({key:prop_types_default.a.string,values:prop_types_default.a.arrayOf(prop_types_default.a.object)})])),// bullet\nbulletDataType]),width:prop_types_default.a.number,height:prop_types_default.a.number,annotationData:prop_types_default.a.object,annotationLayers:prop_types_default.a.arrayOf(annotationLayerType),bottomMargin:numberOrAutoType,colorScheme:prop_types_default.a.string,comparisonType:prop_types_default.a.string,contribution:prop_types_default.a.bool,leftMargin:numberOrAutoType,onError:prop_types_default.a.func,showLegend:prop_types_default.a.bool,showMarkers:prop_types_default.a.bool,useRichTooltip:prop_types_default.a.bool,vizType:prop_types_default.a.oneOf(["area","bar","box_plot","bubble","bullet","compare","column","dist_bar","line","line_multi","time_pivot","pie","dual_line"]),xAxisFormat:prop_types_default.a.string,numberFormat:prop_types_default.a.string,xAxisLabel:prop_types_default.a.string,xAxisShowMinMax:prop_types_default.a.bool,xIsLogScale:prop_types_default.a.bool,xTicksLayout:prop_types_default.a.oneOf(["auto","staggered","45\\xB0"]),yAxisFormat:prop_types_default.a.string,yAxisBounds:prop_types_default.a.arrayOf(prop_types_default.a.number),yAxisLabel:prop_types_default.a.string,yAxisShowMinMax:prop_types_default.a.bool,yIsLogScale:prop_types_default.a.bool,// \'dist-bar\' only\norderBars:prop_types_default.a.bool,// \'bar\' or \'dist-bar\'\nisBarStacked:prop_types_default.a.bool,showBarValue:prop_types_default.a.bool,// \'bar\', \'dist-bar\' or \'column\'\nreduceXTicks:prop_types_default.a.bool,// \'bar\', \'dist-bar\' or \'area\'\nshowControls:prop_types_default.a.bool,// \'line\' only\nshowBrush:prop_types_default.a.oneOf([!0,"yes",!1,"no","auto"]),onBrushEnd:prop_types_default.a.func,// \'line-multi\' or \'dual-line\'\nyAxis2Format:prop_types_default.a.string,// \'line\', \'time-pivot\', \'dual-line\' or \'line-multi\'\nlineInterpolation:prop_types_default.a.string,// \'pie\' only\nisDonut:prop_types_default.a.bool,isPieLabelOutside:prop_types_default.a.bool,pieLabelType:prop_types_default.a.oneOf(["key","value","percent","key_value","key_percent","key_value_percent"]),showLabels:prop_types_default.a.bool,// \'area\' only\nareaStackedStyle:prop_types_default.a.string,// \'bubble\' only\nentity:prop_types_default.a.string,maxBubbleSize:prop_types_default.a.number,xField:stringOrObjectWithLabelType,yField:stringOrObjectWithLabelType,sizeField:stringOrObjectWithLabelType,// time-pivot only\nbaseColor:rgbObjectType},NOOP=()=>{},formatter=Object(NumberFormatterRegistrySingleton["c" /* getNumberFormatter */])();// Limit on how large axes margins can grow as the chart window is resized\nfunction nvd3Vis(element,props){const{data,width:maxWidth,height:maxHeight,annotationData,annotationLayers=[],areaStackedStyle,baseColor,bottomMargin,colorScheme,comparisonType,contribution,entity,isBarStacked,isDonut,isPieLabelOutside,leftMargin,lineInterpolation="linear",markerLabels,markerLines,markerLineLabels,markers,maxBubbleSize,onBrushEnd=NOOP,onError=NOOP,orderBars,pieLabelType,rangeLabels,ranges,reduceXTicks=!1,showBarValue,showBrush,showControls,showLabels,showLegend,showMarkers,sizeField,useRichTooltip,vizType,xAxisFormat,numberFormat,xAxisLabel,xAxisShowMinMax=!1,xField,xIsLogScale,xTicksLayout,yAxisFormat,yAxis2Format,yAxisBounds,yAxis2Bounds,yAxisLabel,yAxisShowMinMax=!1,yAxis2ShowMinMax=!1,yField,yIsLogScale}=props,isExplore=null!==document.querySelector("#explorer-container"),container=element;container.innerHTML="";const activeAnnotationLayers=annotationLayers.filter(layer=>layer.show);// Search for the chart id in a parent div from the nvd3 chart\nlet chartContainer=container,chartId=null;while(chartContainer.parentElement){if(chartContainer.parentElement.id.startsWith(CHART_ID_PREFIX)){chartId=chartContainer.parentElement.id;break}chartContainer=chartContainer.parentElement}let chart,width=maxWidth,colorKey="key";container.style.width=`${maxWidth}px`;container.style.height=`${maxHeight}px`;function isVizTypes(types){return types.includes(vizType)}const drawGraph=function(){const d3Element=d3_default.a.select(element);d3Element.classed("superset-legacy-chart-nvd3",!0);d3Element.classed(`superset-legacy-chart-nvd3-${Object(lodash["kebabCase"])(vizType)}`,!0);let svg=d3Element.select("svg");if(svg.empty()){svg=d3Element.append("svg")}const height="bullet"===vizType?Math.min(maxHeight,50):maxHeight,isTimeSeries=isVizTypes(TIMESERIES_VIZ_TYPES),staggerLabels="staggered"===xTicksLayout,xLabelRotation="auto"===xTicksLayout&&isVizTypes(["column","dist_bar"])||"45\\xB0"===xTicksLayout?45:0;if(45===xLabelRotation&&Object(isTruthy["a" /* default */])(showBrush)){onError(Object(TranslatorSingleton["e" /* t */])("You cannot use 45\\xB0 tick layout along with the time range filter"));return null}const canShowBrush=Object(isTruthy["a" /* default */])(showBrush)||"auto"===showBrush&&maxHeight>=MIN_HEIGHT_FOR_BRUSH&&"45\\xB0"!==xTicksLayout,numberFormatter=Object(NumberFormatterRegistrySingleton["c" /* getNumberFormatter */])(numberFormat);switch(vizType){case"line":if(canShowBrush){chart=nv_d3_default.a.models.lineWithFocusChart();if(staggerLabels){// Give a bit more room to focus area if X axis ticks are staggered\nchart.focus.margin({bottom:40});chart.focusHeight(80)}chart.focus.xScale(d3_default.a.time.scale.utc())}else{chart=nv_d3_default.a.models.lineChart()}chart.xScale(d3_default.a.time.scale.utc());chart.interpolate(lineInterpolation);chart.clipEdge(!1);break;case"time_pivot":chart=nv_d3_default.a.models.lineChart();chart.xScale(d3_default.a.time.scale.utc());chart.interpolate(lineInterpolation);break;case"dual_line":case"line_multi":chart=nv_d3_default.a.models.multiChart();chart.interpolate(lineInterpolation);chart.xScale(d3_default.a.time.scale.utc());break;case"bar":chart=nv_d3_default.a.models.multiBarChart().showControls(showControls).groupSpacing(.1);if(!reduceXTicks){width=Object(utils["b" /* computeBarChartWidth */])(data,isBarStacked,maxWidth)}chart.width(width);chart.xAxis.showMaxMin(!1);chart.stacked(isBarStacked);break;case"dist_bar":chart=nv_d3_default.a.models.multiBarChart().showControls(showControls).reduceXTicks(reduceXTicks).groupSpacing(.1);// Distance between each group of bars.\nchart.xAxis.showMaxMin(!1);chart.stacked(isBarStacked);if(orderBars){data.forEach(d=>{d.values.sort((a,b)=>Object(utils["u" /* tryNumify */])(a.x)<Object(utils["u" /* tryNumify */])(b.x)?-1:1)})}if(!reduceXTicks){width=Object(utils["b" /* computeBarChartWidth */])(data,isBarStacked,maxWidth)}chart.width(width);break;case"pie":chart=nv_d3_default.a.models.pieChart();colorKey="x";chart.valueFormat(numberFormatter);if(isDonut){chart.donut(!0)}chart.showLabels(showLabels);chart.labelsOutside(isPieLabelOutside);// Configure the minimum slice size for labels to show up\nchart.labelThreshold(.05);chart.cornerRadius(!0);if(["key","value","percent"].includes(pieLabelType)){chart.labelType(pieLabelType)}else if("key_value"===pieLabelType){chart.labelType(d=>`${d.data.x}: ${numberFormatter(d.data.y)}`)}else{// pieLabelType in [\'key_percent\', \'key_value_percent\']\nconst total=d3_default.a.sum(data,d=>d.y),percentFormatter=Object(NumberFormatterRegistrySingleton["c" /* getNumberFormatter */])(NumberFormats["a" /* default */].PERCENT_2_POINT);if("key_percent"===pieLabelType){chart.tooltip.valueFormatter(d=>percentFormatter(d));chart.labelType(d=>`${d.data.x}: ${percentFormatter(d.data.y/total)}`)}else{// pieLabelType === \'key_value_percent\'\nchart.tooltip.valueFormatter(d=>`${numberFormatter(d)} (${percentFormatter(d/total)})`);chart.labelType(d=>`${d.data.x}: ${numberFormatter(d.data.y)} (${percentFormatter(d.data.y/total)})`)}}// Pie chart does not need top margin\nchart.margin({top:0});break;case"column":chart=nv_d3_default.a.models.multiBarChart().reduceXTicks(!1);break;case"compare":chart=nv_d3_default.a.models.cumulativeLineChart();chart.xScale(d3_default.a.time.scale.utc());chart.useInteractiveGuideline(!0);chart.xAxis.showMaxMin(!1);break;case"bubble":chart=nv_d3_default.a.models.scatterChart();chart.showDistX(!1);chart.showDistY(!1);chart.tooltip.contentGenerator(d=>Object(utils["h" /* generateBubbleTooltipContent */])({point:d.point,entity,xField,yField,sizeField,xFormatter:Object(utils["o" /* getTimeOrNumberFormatter */])(xAxisFormat),yFormatter:Object(utils["o" /* getTimeOrNumberFormatter */])(yAxisFormat),sizeFormatter:formatter}));chart.pointRange([5,maxBubbleSize**2]);chart.pointDomain([0,d3_default.a.max(data,d=>d3_default.a.max(d.values,v=>v.size))]);break;case"area":chart=nv_d3_default.a.models.stackedAreaChart();chart.showControls(showControls);chart.style(areaStackedStyle);chart.xScale(d3_default.a.time.scale.utc());break;case"box_plot":colorKey="label";chart=nv_d3_default.a.models.boxPlotChart();chart.x(d=>d.label);chart.maxBoxWidth(75);// prevent boxes from being incredibly wide\nbreak;case"bullet":chart=nv_d3_default.a.models.bulletChart();data.rangeLabels=rangeLabels;data.ranges=ranges;data.markerLabels=markerLabels;data.markerLines=markerLines;data.markerLineLabels=markerLineLabels;data.markers=markers;break;default:throw new Error(`Unrecognized visualization for nvd3${vizType}`);}// Assuming the container has padding already other than for top margin\nchart.margin({left:0,bottom:0});if(showBarValue){Object(utils["e" /* drawBarValues */])(svg,data,isBarStacked,yAxisFormat);chart.dispatch.on("stateChange.drawBarValues",()=>{Object(utils["e" /* drawBarValues */])(svg,data,isBarStacked,yAxisFormat)})}if(canShowBrush&&onBrushEnd!==NOOP){if(chart.focus){chart.focus.dispatch.on("brush",event=>{const timeRange=Object(utils["s" /* stringifyTimeRange */])(event.extent);if(timeRange){event.brush.on("brushend",()=>{onBrushEnd(timeRange)})}})}}if(chart.xAxis&&chart.xAxis.staggerLabels){chart.xAxis.staggerLabels(staggerLabels)}if(chart.xAxis&&chart.xAxis.rotateLabels){chart.xAxis.rotateLabels(xLabelRotation)}if(chart.x2Axis&&chart.x2Axis.staggerLabels){chart.x2Axis.staggerLabels(staggerLabels)}if(chart.x2Axis&&chart.x2Axis.rotateLabels){chart.x2Axis.rotateLabels(xLabelRotation)}if("showLegend"in chart&&"undefined"!=typeof showLegend){if(width<BREAKPOINTS.small&&"pie"!==vizType){chart.showLegend(!1)}else{chart.showLegend(showLegend)}}if(yIsLogScale){chart.yScale(d3_default.a.scale.log())}if(xIsLogScale){chart.xScale(d3_default.a.scale.log())}let xAxisFormatter;if(isTimeSeries){xAxisFormatter=Object(TimeFormatterRegistrySingleton["d" /* getTimeFormatter */])(xAxisFormat);// In tooltips, always use the verbose time format\nchart.interactiveLayer.tooltip.headerFormatter(smartDateVerbose["a" /* default */])}else{xAxisFormatter=Object(utils["o" /* getTimeOrNumberFormatter */])(xAxisFormat)}if(chart.x2Axis&&chart.x2Axis.tickFormat){chart.x2Axis.tickFormat(xAxisFormatter)}if(chart.xAxis&&chart.xAxis.tickFormat){const isXAxisString=isVizTypes(["dist_bar","box_plot"]);if(isXAxisString){chart.xAxis.tickFormat(d=>d.length>MAX_NO_CHARACTERS_IN_LABEL?`${d.slice(0,Math.max(0,MAX_NO_CHARACTERS_IN_LABEL))}…`:d)}else{chart.xAxis.tickFormat(xAxisFormatter)}}let yAxisFormatter=Object(utils["o" /* getTimeOrNumberFormatter */])(yAxisFormat);if(chart.yAxis&&chart.yAxis.tickFormat){if((contribution||"percentage"===comparisonType)&&(!yAxisFormat||yAxisFormat===NumberFormats["a" /* default */].SMART_NUMBER||yAxisFormat===NumberFormats["a" /* default */].SMART_NUMBER_SIGNED)){// When computing a "Percentage" or "Contribution" selected,\n// force a percentage format if no custom formatting set\nyAxisFormatter=Object(NumberFormatterRegistrySingleton["c" /* getNumberFormatter */])(NumberFormats["a" /* default */].PERCENT_1_POINT)}chart.yAxis.tickFormat(yAxisFormatter)}if(chart.y2Axis&&chart.y2Axis.tickFormat){chart.y2Axis.tickFormat(yAxisFormatter)}if(chart.yAxis){chart.yAxis.ticks(5)}if(chart.y2Axis){chart.y2Axis.ticks(5)}// Set showMaxMin for all axis\nObject(utils["r" /* setAxisShowMaxMin */])(chart.xAxis,xAxisShowMinMax);Object(utils["r" /* setAxisShowMaxMin */])(chart.x2Axis,xAxisShowMinMax);Object(utils["r" /* setAxisShowMaxMin */])(chart.yAxis,yAxisShowMinMax);Object(utils["r" /* setAxisShowMaxMin */])(chart.y2Axis,yAxis2ShowMinMax||yAxisShowMinMax);if("time_pivot"===vizType){if(baseColor){const{r,g,b}=baseColor;chart.color(d=>{const alpha=0<d.rank?.5*d.perc:1;return`rgba(${r}, ${g}, ${b}, ${alpha})`})}chart.useInteractiveGuideline(!0);chart.interactiveLayer.tooltip.contentGenerator(d=>Object(utils["l" /* generateTimePivotTooltip */])(d,xAxisFormatter,yAxisFormatter))}else if("bullet"!==vizType){const colorFn=getScale(colorScheme);chart.color(d=>d.color||colorFn(Object(utils["a" /* cleanColorInput */])(d[colorKey])))}if(isVizTypes(["line","area"])&&useRichTooltip){chart.useInteractiveGuideline(!0);if("line"===vizType){chart.interactiveLayer.tooltip.contentGenerator(d=>Object(utils["k" /* generateRichLineTooltipContent */])(d,smartDateVerbose["a" /* default */],yAxisFormatter))}else{// area chart\nchart.interactiveLayer.tooltip.contentGenerator(d=>Object(utils["g" /* generateAreaChartTooltipContent */])(d,smartDateVerbose["a" /* default */],yAxisFormatter,chart))}}if(isVizTypes(["compare"])){chart.interactiveLayer.tooltip.contentGenerator(d=>Object(utils["i" /* generateCompareTooltipContent */])(d,yAxisFormatter))}if(isVizTypes(["dual_line","line_multi"])){const yAxisFormatter1=Object(NumberFormatterRegistrySingleton["c" /* getNumberFormatter */])(yAxisFormat),yAxisFormatter2=Object(NumberFormatterRegistrySingleton["c" /* getNumberFormatter */])(yAxis2Format);chart.yAxis1.tickFormat(yAxisFormatter1);chart.yAxis2.tickFormat(yAxisFormatter2);const yAxisFormatters=data.map(datum=>1===datum.yAxis?yAxisFormatter1:yAxisFormatter2);chart.useInteractiveGuideline(!0);chart.interactiveLayer.tooltip.contentGenerator(d=>Object(utils["j" /* generateMultiLineTooltipContent */])(d,xAxisFormatter,yAxisFormatters))}// This is needed for correct chart dimensions if a chart is rendered in a hidden container\nchart.width(width);chart.height(height);svg.datum(data).transition().duration(500).attr("height",height).attr("width",width).call(chart);// For log scale, only show 1, 10, 100, 1000, ...\nif(yIsLogScale){chart.yAxis.tickFormat(d=>0!==d&&0==Math.log10(d)%1?yAxisFormatter(d):"")}if(0<xLabelRotation){// shift labels to the left so they look better\nconst xTicks=svg.select(".nv-x.nv-axis > g").selectAll("g");xTicks.selectAll("text").attr("dx",-6.5)}const applyYAxisBounds=()=>{if(chart.yDomain&&Array.isArray(yAxisBounds)&&2===yAxisBounds.length){const[customMin,customMax]=yAxisBounds,hasCustomMin=Object(isDefined["a" /* default */])(customMin)&&!Number.isNaN(customMin),hasCustomMax=Object(isDefined["a" /* default */])(customMax)&&!Number.isNaN(customMax);if((hasCustomMin||hasCustomMax)&&"area"===vizType&&"expand"===chart.style()){// Because there are custom bounds, we need to override them back to 0%-100% since this\n// is an expanded area chart\nchart.yDomain([0,1])}else if((hasCustomMin||hasCustomMax)&&"area"===vizType&&"stream"===chart.style()){// Because there are custom bounds, we need to override them back to the domain of the\n// data since this is a stream area chart\nchart.yDomain(Object(utils["c" /* computeStackedYDomain */])(data))}else if(hasCustomMin&&hasCustomMax){// Override the y domain if there\'s both a custom min and max\nchart.yDomain([customMin,customMax]);chart.clipEdge(!0)}else if(hasCustomMin||hasCustomMax){// Only one of the bounds has been set, so we need to manually calculate the other one\nlet[trueMin,trueMax]=[0,1];// These viz types can be stacked\n// They correspond to the nvd3 stackedAreaChart and multiBarChart\nif("area"===vizType||isVizTypes(["bar","dist_bar"])&&chart.stacked()){// This is a stacked area chart or a stacked bar chart\n[trueMin,trueMax]=Object(utils["c" /* computeStackedYDomain */])(data)}else{[trueMin,trueMax]=Object(utils["d" /* computeYDomain */])(data)}const min=hasCustomMin?customMin:trueMin,max=hasCustomMax?customMax:trueMax;chart.yDomain([min,max]);chart.clipEdge(!0)}}};applyYAxisBounds();// Also reapply on each state change to account for enabled/disabled series\nif(chart.dispatch&&chart.dispatch.stateChange){chart.dispatch.on("stateChange.applyYAxisBounds",applyYAxisBounds)}// align yAxis1 and yAxis2 ticks\nif(isVizTypes(["dual_line","line_multi"])){const count=chart.yAxis1.ticks(),ticks1=chart.yAxis1.scale().domain(chart.yAxis1.domain()).nice(count).ticks(count),ticks2=chart.yAxis2.scale().domain(chart.yAxis2.domain()).nice(count).ticks(count),difference=ticks1.length-ticks2.length;if(0<ticks1.length&&0<ticks2.length&&0!==difference){const smallest=0>difference?ticks1:ticks2,delta=smallest[1]-smallest[0];for(let i=0;i<Math.abs(difference);i+=1){if(0==i%2){smallest.unshift(smallest[0]-delta)}else{smallest.push(smallest[smallest.length-1]+delta)}}chart.yDomain1([ticks1[0],ticks1[ticks1.length-1]]);chart.yDomain2([ticks2[0],ticks2[ticks2.length-1]]);chart.yAxis1.tickValues(ticks1);chart.yAxis2.tickValues(ticks2)}chart.yDomain1([yAxisBounds[0]||ticks1[0],yAxisBounds[1]||ticks1[ticks1.length-1]]);chart.yDomain2([yAxis2Bounds[0]||ticks2[0],yAxis2Bounds[1]||ticks2[ticks2.length-1]])}if(showMarkers){svg.selectAll(".nv-point").style("stroke-opacity",1).style("fill-opacity",1);// redo on legend toggle; nvd3 calls the callback *before* the line is\n// drawn, so we need to add a small delay here\nchart.dispatch.on("stateChange.showMarkers",()=>{setTimeout(()=>{svg.selectAll(".nv-point").style("stroke-opacity",1).style("fill-opacity",1)},10)})}if(chart.yAxis!==void 0||chart.yAxis2!==void 0){// Hack to adjust y axis left margin to accommodate long numbers\nconst marginPad=Math.ceil(Math.min(maxWidth*(isExplore?.01:.03),MAX_MARGIN_PAD)),margins=chart.margin();// Hack to adjust margins to accommodate long axis tick labels.\n// - has to be done only after the chart has been rendered once\n// - measure the width or height of the labels\n// ---- (x axis labels are rotated 45 degrees so we use height),\n// - adjust margins based on these measures and render again\nif(chart.xAxis){margins.bottom=28}const maxYAxisLabelWidth=Object(utils["n" /* getMaxLabelSize */])(svg,chart.yAxis2?"nv-y1":"nv-y"),maxXAxisLabelHeight=Object(utils["n" /* getMaxLabelSize */])(svg,"nv-x");margins.left=maxYAxisLabelWidth+marginPad;if(yAxisLabel&&""!==yAxisLabel){margins.left+=25}if(showBarValue){// Add more margin to avoid label colliding with legend.\nmargins.top+=24}if(xAxisShowMinMax){// If x bounds are shown, we need a right margin\nmargins.right=Math.max(20,maxXAxisLabelHeight/2)+marginPad}if(45===xLabelRotation){margins.bottom=maxXAxisLabelHeight*Math.sin(Math.PI*xLabelRotation/180)+marginPad+30;margins.right=maxXAxisLabelHeight*Math.cos(Math.PI*xLabelRotation/180)+marginPad}else if(staggerLabels){margins.bottom=40}if(isVizTypes(["dual_line","line_multi"])){const maxYAxis2LabelWidth=Object(utils["n" /* getMaxLabelSize */])(svg,"nv-y2");margins.right=maxYAxis2LabelWidth+marginPad}if(bottomMargin&&"auto"!==bottomMargin){margins.bottom=parseInt(bottomMargin,10)}if(leftMargin&&"auto"!==leftMargin){margins.left=leftMargin}if(xAxisLabel&&""!==xAxisLabel&&chart.xAxis){margins.bottom+=25;let distance=0;if(margins.bottom&&!Number.isNaN(margins.bottom)){distance=margins.bottom-45}// nvd3 bug axisLabelDistance is disregarded on xAxis\n// https://github.com/krispo/angular-nvd3/issues/90\nchart.xAxis.axisLabel(xAxisLabel).axisLabelDistance(distance)}if(yAxisLabel&&""!==yAxisLabel&&chart.yAxis){let distance=0;if(margins.left&&!Number.isNaN(margins.left)){distance=margins.left-70}chart.yAxis.axisLabel(yAxisLabel).axisLabelDistance(distance)}if(isTimeSeries&&annotationData&&0<activeAnnotationLayers.length){// Time series annotations add additional data\nconst timeSeriesAnnotations=activeAnnotationLayers.filter(layer=>layer.annotationType===AnnotationTypes["c" /* default */].TIME_SERIES).reduce((bushel,a)=>bushel.concat((annotationData[a.name]||[]).map(series=>{if(!series){return{}}const key=Array.isArray(series.key)?`${a.name}, ${series.key.join(", ")}`:`${a.name}, ${series.key}`;return _objectSpread(_objectSpread({},series),{},{key,color:a.color,strokeWidth:a.width,classed:`${a.opacity} ${a.style} nv-timeseries-annotation-layer showMarkers${a.showMarkers} hideLine${a.hideLine}`})})),[]);data.push(...timeSeriesAnnotations)}// Uniquely identify tooltips based on chartId so this chart instance only\n// controls its own tooltips\nif(chartId){if(chart&&chart.interactiveLayer&&chart.interactiveLayer.tooltip){chart.interactiveLayer.tooltip.classes([Object(utils["m" /* generateTooltipClassName */])(chartId)])}if(chart&&chart.tooltip){chart.tooltip.classes([Object(utils["m" /* generateTooltipClassName */])(chartId)])}}// render chart\nchart.margin(margins);svg.datum(data).transition().duration(500).attr("width",width).attr("height",height).call(chart);// On scroll, hide (not remove) tooltips so they can reappear on hover.\n// Throttle to only 4x/second.\nwindow.addEventListener("scroll",Object(lodash["throttle"])(()=>Object(utils["p" /* hideTooltips */])(!1),250));// The below code should be run AFTER rendering because chart is updated in call()\nif(isTimeSeries&&0<activeAnnotationLayers.length){// Formula annotations\nconst formulas=activeAnnotationLayers.filter(a=>a.annotationType===AnnotationTypes["c" /* default */].FORMULA).map(a=>_objectSpread(_objectSpread({},a),{},{formula:Object(impureFunctionsAny_generated["z" /* parse */])(a.value)}));let xMax,xMin,xScale;if("bar"===vizType){xMin=d3_default.a.min(data[0].values,d=>d.x);xMax=d3_default.a.max(data[0].values,d=>d.x);xScale=d3_default.a.scale.quantile().domain([xMin,xMax]).range(chart.xAxis.range())}else{xMin=chart.xAxis.scale().domain()[0].valueOf();xMax=chart.xAxis.scale().domain()[1].valueOf();if(chart.xScale){xScale=chart.xScale()}else if(chart.xAxis.scale){xScale=chart.xAxis.scale()}else{xScale=d3_default.a.scale.linear()}}if(xScale&&xScale.clamp){xScale.clamp(!0)}if(0<formulas.length){const xValues=[];if("bar"===vizType){// For bar-charts we want one data point evaluated for every\n// data point that will be displayed.\nconst distinct=data.reduce((xVals,d)=>{d.values.forEach(x=>xVals.add(x.x));return xVals},new Set);xValues.push(...distinct.values());xValues.sort()}else{// For every other time visualization it should be ok, to have a\n// data points in even intervals.\nlet period=Math.min(...data.map(d=>Math.min(...d.values.slice(1).map((v,i)=>v.x-d.values[i].x))));const dataPoints=(xMax-xMin)/(period||1);// make sure that there are enough data points and not too many\nperiod=100>dataPoints?(xMax-xMin)/100:period;period=500<dataPoints?(xMax-xMin)/500:period;xValues.push(xMin);for(let x=xMin;x<xMax;x+=period){xValues.push(x)}xValues.push(xMax)}const formulaData=formulas.map(fo=>({key:fo.name,values:xValues.map(x=>({y:fo.formula.evaluate({x}),x})),color:fo.color,strokeWidth:fo.width,classed:`${fo.opacity} ${fo.style}`}));data.push(...formulaData)}const xAxis=chart.xAxis1?chart.xAxis1:chart.xAxis,yAxis=chart.yAxis1?chart.yAxis1:chart.yAxis,chartWidth=xAxis.scale().range()[1],annotationHeight=yAxis.scale().range()[0];if(annotationData){// Event annotations\nactiveAnnotationLayers.filter(x=>x.annotationType===AnnotationTypes["c" /* default */].EVENT&&annotationData&&annotationData[x.name]).forEach((config,index)=>{const e=Object(AnnotationTypes["b" /* applyNativeColumns */])(config),annotations=d3_default.a.select(element).select(".nv-wrap").append("g").attr("class",`nv-event-annotation-layer-${index}`),aColor=e.color||getColor(Object(utils["a" /* cleanColorInput */])(e.name),colorScheme),tip=Object(utils["t" /* tipFactory */])(_objectSpread(_objectSpread({},e),{},{annotationTipClass:`arrow-down nv-event-annotation-layer-${config.sourceType}`})),records=(annotationData[e.name].records||[]).map(r=>{const timeValue=new Date(moment_default.a.utc(r[e.timeColumn]));return _objectSpread(_objectSpread({},r),{},{[e.timeColumn]:timeValue})}).filter(record=>!Number.isNaN(record[e.timeColumn].getMilliseconds()));// Add event annotation layer\nif(0<records.length){annotations.selectAll("line").data(records).enter().append("line").attr({x1:d=>xScale(new Date(d[e.timeColumn])),y1:0,x2:d=>xScale(new Date(d[e.timeColumn])),y2:annotationHeight}).attr("class",`${e.opacity} ${e.style}`).style("stroke",aColor).style("stroke-width",e.width).on("mouseover",tip.show).on("mouseout",tip.hide).call(tip)}// update annotation positions on brush event\nif(chart.focus){chart.focus.dispatch.on("onBrush.event-annotation",()=>{annotations.selectAll("line").data(records).attr({x1:d=>xScale(new Date(d[e.timeColumn])),y1:0,x2:d=>xScale(new Date(d[e.timeColumn])),y2:annotationHeight,opacity:d=>{const x=xScale(new Date(d[e.timeColumn]));return 0<x&&x<chartWidth?1:0}})})}});// Interval annotations\nactiveAnnotationLayers.filter(x=>x.annotationType===AnnotationTypes["c" /* default */].INTERVAL&&annotationData&&annotationData[x.name]).forEach((config,index)=>{const e=Object(AnnotationTypes["b" /* applyNativeColumns */])(config),annotations=d3_default.a.select(element).select(".nv-wrap").append("g").attr("class",`nv-interval-annotation-layer-${index}`),aColor=e.color||getColor(Object(utils["a" /* cleanColorInput */])(e.name),colorScheme),tip=Object(utils["t" /* tipFactory */])(e),records=(annotationData[e.name].records||[]).map(r=>{const timeValue=new Date(moment_default.a.utc(r[e.timeColumn])),intervalEndValue=new Date(moment_default.a.utc(r[e.intervalEndColumn]));return _objectSpread(_objectSpread({},r),{},{[e.timeColumn]:timeValue,[e.intervalEndColumn]:intervalEndValue})}).filter(record=>!Number.isNaN(record[e.timeColumn].getMilliseconds())&&!Number.isNaN(record[e.intervalEndColumn].getMilliseconds()));// Add interval annotation layer\nif(0<records.length){annotations.selectAll("rect").data(records).enter().append("rect").attr({x:d=>Math.min(xScale(new Date(d[e.timeColumn])),xScale(new Date(d[e.intervalEndColumn]))),y:0,width:d=>Math.max(Math.abs(xScale(new Date(d[e.intervalEndColumn]))-xScale(new Date(d[e.timeColumn]))),1),height:annotationHeight}).attr("class",`${e.opacity} ${e.style}`).style("stroke-width",e.width).style("stroke",aColor).style("fill",aColor).style("fill-opacity",.2).on("mouseover",tip.show).on("mouseout",tip.hide).call(tip)}// update annotation positions on brush event\nif(chart.focus){chart.focus.dispatch.on("onBrush.interval-annotation",()=>{annotations.selectAll("rect").data(records).attr({x:d=>xScale(new Date(d[e.timeColumn])),width:d=>{const x1=xScale(new Date(d[e.timeColumn])),x2=xScale(new Date(d[e.intervalEndColumn]));return x2-x1}})})}})}// rerender chart appended with annotation layer\nsvg.datum(data).attr("height",height).attr("width",width).call(chart);// Display styles for Time Series Annotations\nchart.dispatch.on("renderEnd.timeseries-annotation",()=>{d3_default.a.selectAll(".slice_container .nv-timeseries-annotation-layer.showMarkerstrue .nv-point").style("stroke-opacity",1).style("fill-opacity",1);d3_default.a.selectAll(".slice_container .nv-timeseries-annotation-layer.hideLinetrue").style("stroke-width",0)})}}Object(utils["v" /* wrapTooltip */])(chart);return chart};// Remove tooltips before rendering chart, if the chart is being re-rendered sometimes\n// there are left over tooltips in the dom,\n// this will clear them before rendering the chart again.\nif(chartId){Object(utils["q" /* removeTooltip */])(chartId)}else{Object(utils["p" /* hideTooltips */])(!0)}nv_d3_default.a.addGraph(drawGraph)}nvd3Vis.displayName="NVD3";nvd3Vis.propTypes=propTypes;/* harmony default export */ var NVD3Vis = (nvd3Vis);\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/legacy-preset-chart-nvd3/src/ReactNVD3.jsx\nfunction _objectWithoutProperties(source,excluded){if(null==source)return{};var target=_objectWithoutPropertiesLoose(source,excluded),key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(0<=excluded.indexOf(key))continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var target={},sourceKeys=Object.keys(source),key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(0<=excluded.indexOf(key))continue;target[key]=source[key]}return target}/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * "License"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */function componentWillUnmount(){const{id}=this.props;if(null!==id&&id!==void 0){Object(utils["q" /* removeTooltip */])(id)}else{Object(utils["p" /* hideTooltips */])(!0)}}const ReactNVD3=Object(reactify["a" /* default */])(NVD3Vis,{componentWillUnmount}),NVD3=(_ref)=>{let{className}=_ref,otherProps=_objectWithoutProperties(_ref,["className"]);return/*#__PURE__*/react_default.a.createElement("div",{className:className},/*#__PURE__*/react_default.a.createElement(ReactNVD3,otherProps))};NVD3.displayName="NVD3";NVD3.propTypes={className:prop_types_default.a.string.isRequired};/* harmony default export */ var src_ReactNVD3 = __webpack_exports__["default"] = (Object(style["g" /* styled */])(NVD3)`\n  .superset-legacy-chart-nvd3-dist-bar, .superset-legacy-chart-nvd3-bar {\n    overflow-x: auto !important;\n    svg {\n      &.nvd3-svg {\n        width: auto;\n        font-size: ${({theme})=>theme.typography.sizes.m};\n      }\n    }\n  }\n  .superset-legacy-chart-nvd3 {\n    nv-x text {\n      font-size: ${({theme})=>theme.typography.sizes.m};\n    }\n    g.superset path {\n      stroke-dasharray: 5, 5;\n    }\n    .nvtooltip tr.highlight td {\n      font-weight: ${({theme})=>theme.typography.weights.bold};\n      font-size: 15px !important;\n    }\n    text.nv-axislabel {\n      font-size: ${({theme})=>theme.typography.sizes.m} !important;\n    }\n    g.solid path,\n    line.solid {\n      stroke-dasharray: unset;\n    }\n    g.dashed path,\n    line.dashed {\n      stroke-dasharray: 5, 5;\n    }\n    g.longDashed path,\n    line.dotted {\n      stroke-dasharray: 1, 1;\n    }\n\n    g.opacityLow path,\n    line.opacityLow {\n      stroke-opacity: 0.2;\n    }\n\n    g.opacityMedium path,\n    line.opacityMedium {\n      stroke-opacity: 0.5;\n    }\n    g.opacityHigh path,\n    line.opacityHigh {\n      stroke-opacity: 0.8;\n    }\n    g.time-shift-0 path,\n    line.time-shift-0 {\n      stroke-dasharray: 5, 5;\n    }\n    g.time-shift-1 path,\n    line.time-shift-1 {\n      stroke-dasharray: 1, 5;\n    }\n    g.time-shift-2 path,\n    line.time-shift-3 {\n      stroke-dasharray: 5, 1;\n    }\n    g.time-shift-3 path,\n    line.time-shift-3 {\n      stroke-dasharray: 5, 1;\n    }\n    g.time-shift-4 path,\n    line.time-shift-4 {\n      stroke-dasharray: 5, 10;\n    }\n    g.time-shift-5 path,\n    line.time-shift-5 {\n      stroke-dasharray: 0.9;\n    }\n    g.time-shift-6 path,\n    line.time-shift-6 {\n      stroke-dasharray: 15, 10, 5;\n    }\n    g.time-shift-7 path,\n    line.time-shift-7 {\n      stroke-dasharray: 15, 10, 5, 10;\n    }\n    g.time-shift-8 path,\n    line.time-shift-8 {\n      stroke-dasharray: 15, 10, 5, 10, 15;\n    }\n    g.time-shift-9 path,\n    line.time-shift-9 {\n      stroke-dasharray: 5, 5, 1, 5;\n    }\n    .nv-noData.body {\n      font-size: ${({theme})=>theme.typography.sizes.m};\n      font-weight: ${({theme})=>theme.typography.weights.normal};\n    }\n  }\n  .superset-legacy-chart-nvd3-tr-highlight {\n    border-top: 1px solid;\n    border-bottom: 1px solid;\n    font-weight: ${({theme})=>theme.typography.weights.bold};\n  }\n  .superset-legacy-chart-nvd3-tr-total {\n    font-weight: ${({theme})=>theme.typography.weights.bold};\n  }\n  .nvtooltip {\n    .tooltip-header {\n      white-space: nowrap;\n      font-weight: ${({theme})=>theme.typography.weights.bold};\n    }\n    tbody tr:not(.tooltip-header) td:nth-child(2) {\n      word-break: break-word;\n    }\n  }\n  .d3-tip.nv-event-annotation-layer-table,\n  .d3-tip.nv-event-annotation-layer-NATIVE {\n    width: 200px;\n    border-radius: 2px;\n    background-color: #484848;\n    fill-opacity: 0.6;\n    margin: 8px;\n    padding: 8px;\n    color: #fff;\n    &:after {\n      content: \'\\25BC\';\n      font-size: ${({theme})=>theme.typography.sizes.m};\n      color: #484848;\n      position: absolute;\n      bottom: -14px;\n      left: 94px;\n    }\n  }\n`);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2409\n')}}]);