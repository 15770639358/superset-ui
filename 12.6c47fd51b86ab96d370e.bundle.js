(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{1936:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return isValueDef; });\n/* unused harmony export isNonValueDef */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return isFieldDef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return isTypedFieldDef; });\n/* unused harmony export isScaleFieldDef */\n/* unused harmony export isPositionFieldDef */\nfunction isValueDef(channelDef) {\n  return channelDef && 'value' in channelDef;\n}\nfunction isNonValueDef(channelDef) {\n  return channelDef && !('value' in channelDef);\n}\nfunction isFieldDef(channelDef) {\n  return channelDef && 'field' in channelDef && !!channelDef.field;\n}\nfunction isTypedFieldDef(channelDef) {\n  return isFieldDef(channelDef) && 'type' in channelDef && !!channelDef.type;\n}\nfunction isScaleFieldDef(channelDef) {\n  return isTypedFieldDef(channelDef) && 'scale' in channelDef;\n}\nfunction isPositionFieldDef(channelDef) {\n  return isTypedFieldDef(channelDef) && 'axis' in channelDef;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkzNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMvZXJpa19yaXR0ZXIvcmVwb3MvZ2l0aHViLmNvbS9hcGFjaGUtc3VwZXJzZXQvc3VwZXJzZXQtdWkvbm9kZV9tb2R1bGVzL2VuY29kYWJsZS9lc20vdHlwZUd1YXJkcy9DaGFubmVsRGVmLmpzPzg2NmQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzVmFsdWVEZWYoY2hhbm5lbERlZikge1xuICByZXR1cm4gY2hhbm5lbERlZiAmJiAndmFsdWUnIGluIGNoYW5uZWxEZWY7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNOb25WYWx1ZURlZihjaGFubmVsRGVmKSB7XG4gIHJldHVybiBjaGFubmVsRGVmICYmICEoJ3ZhbHVlJyBpbiBjaGFubmVsRGVmKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0ZpZWxkRGVmKGNoYW5uZWxEZWYpIHtcbiAgcmV0dXJuIGNoYW5uZWxEZWYgJiYgJ2ZpZWxkJyBpbiBjaGFubmVsRGVmICYmICEhY2hhbm5lbERlZi5maWVsZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGVkRmllbGREZWYoY2hhbm5lbERlZikge1xuICByZXR1cm4gaXNGaWVsZERlZihjaGFubmVsRGVmKSAmJiAndHlwZScgaW4gY2hhbm5lbERlZiAmJiAhIWNoYW5uZWxEZWYudHlwZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1NjYWxlRmllbGREZWYoY2hhbm5lbERlZikge1xuICByZXR1cm4gaXNUeXBlZEZpZWxkRGVmKGNoYW5uZWxEZWYpICYmICdzY2FsZScgaW4gY2hhbm5lbERlZjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Bvc2l0aW9uRmllbGREZWYoY2hhbm5lbERlZikge1xuICByZXR1cm4gaXNUeXBlZEZpZWxkRGVmKGNoYW5uZWxEZWYpICYmICdheGlzJyBpbiBjaGFubmVsRGVmO1xufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1936\n")},1978:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DEFAULT_MARGIN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return createMarginSelector; });\n/* harmony import */ var reselect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(181);\n\nconst DEFAULT_MARGIN = { bottom: 16, left: 16, right: 16, top: 16 };\nfunction createMarginSelector(defaultMargin = DEFAULT_MARGIN) {\n    return Object(reselect__WEBPACK_IMPORTED_MODULE_0__["createSelector"])((margin) => margin.bottom, margin => margin.left, margin => margin.right, margin => margin.top, (bottom = defaultMargin.bottom, left = defaultMargin.left, right = defaultMargin.right, top = defaultMargin.top) => ({\n        bottom,\n        left,\n        right,\n        top,\n    }));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk3OC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMvZXJpa19yaXR0ZXIvcmVwb3MvZ2l0aHViLmNvbS9hcGFjaGUtc3VwZXJzZXQvc3VwZXJzZXQtdWkvcGx1Z2lucy9wcmVzZXQtY2hhcnQteHkvc3JjL3V0aWxzL2NyZWF0ZU1hcmdpblNlbGVjdG9yLnRzeD83NTU1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yIH0gZnJvbSAncmVzZWxlY3QnO1xuaW1wb3J0IHsgTWFyZ2luIH0gZnJvbSAnQHN1cGVyc2V0LXVpL2NvcmUnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9NQVJHSU4gPSB7IGJvdHRvbTogMTYsIGxlZnQ6IDE2LCByaWdodDogMTYsIHRvcDogMTYgfTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTWFyZ2luU2VsZWN0b3IoZGVmYXVsdE1hcmdpbjogTWFyZ2luID0gREVGQVVMVF9NQVJHSU4pIHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxuICAgIChtYXJnaW46IFBhcnRpYWw8TWFyZ2luPikgPT4gbWFyZ2luLmJvdHRvbSxcbiAgICBtYXJnaW4gPT4gbWFyZ2luLmxlZnQsXG4gICAgbWFyZ2luID0+IG1hcmdpbi5yaWdodCxcbiAgICBtYXJnaW4gPT4gbWFyZ2luLnRvcCxcbiAgICAoXG4gICAgICBib3R0b20gPSBkZWZhdWx0TWFyZ2luLmJvdHRvbSxcbiAgICAgIGxlZnQgPSBkZWZhdWx0TWFyZ2luLmxlZnQsXG4gICAgICByaWdodCA9IGRlZmF1bHRNYXJnaW4ucmlnaHQsXG4gICAgICB0b3AgPSBkZWZhdWx0TWFyZ2luLnRvcCxcbiAgICApID0+ICh7XG4gICAgICBib3R0b20sXG4gICAgICBsZWZ0LFxuICAgICAgcmlnaHQsXG4gICAgICB0b3AsXG4gICAgfSksXG4gICk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBR0E7QUFFQTtBQUNBO0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1978\n')},1979:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return convertScaleToDataUIScale; });\nfunction isCompatibleDomainOrRange(array) {\n    return (typeof array !== 'undefined' &&\n        array.length > 0 &&\n        (typeof array[0] === 'string' || typeof array[0] === 'number'));\n}\n/**\n * Convert encodeable scale object into @data-ui's scale config\n * @param scale\n */\nfunction convertScaleToDataUIScale(scale) {\n    const { type, domain, range } = scale;\n    let outputType;\n    if (type === 'linear' || type === 'time' || type === 'band') {\n        outputType = type;\n    }\n    else if (type === 'utc') {\n        outputType = 'timeUtc';\n    }\n    else {\n        throw new Error(`Unsupported scale type: ${type}`);\n    }\n    const output = { type: outputType };\n    if (isCompatibleDomainOrRange(domain)) {\n        output.domain = domain;\n    }\n    if (isCompatibleDomainOrRange(range)) {\n        output.range = range;\n    }\n    if ('nice' in scale && typeof scale.nice === 'boolean') {\n        output.nice = scale.nice;\n    }\n    if ('paddingInner' in scale && typeof scale.paddingInner !== 'undefined') {\n        output.paddingInner = scale.paddingInner;\n    }\n    if ('paddingOuter' in scale && typeof scale.paddingOuter !== 'undefined') {\n        output.paddingOuter = scale.paddingOuter;\n    }\n    return output;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk3OS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMvZXJpa19yaXR0ZXIvcmVwb3MvZ2l0aHViLmNvbS9hcGFjaGUtc3VwZXJzZXQvc3VwZXJzZXQtdWkvcGx1Z2lucy9wcmVzZXQtY2hhcnQteHkvc3JjL3V0aWxzL2NvbnZlcnRTY2FsZVRvRGF0YVVJU2NhbGVTaGFwZS50cz8wNDdmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZhbHVlLCBTY2FsZUNvbmZpZyB9IGZyb20gJ2VuY29kYWJsZSc7XG5cbnR5cGUgRGF0YVVJU2NhbGVUeXBlID0gJ3RpbWUnIHwgJ3RpbWVVdGMnIHwgJ2xpbmVhcicgfCAnYmFuZCc7XG5cbmludGVyZmFjZSBEYXRhVUlTY2FsZSB7XG4gIHR5cGU6IERhdGFVSVNjYWxlVHlwZTtcbiAgZG9tYWluPzogbnVtYmVyW10gfCBzdHJpbmdbXTtcbiAgaW5jbHVkZVplcm8/OiBib29sZWFuO1xuICBuaWNlPzogYm9vbGVhbjtcbiAgcGFkZGluZ0lubmVyPzogbnVtYmVyO1xuICBwYWRkaW5nT3V0ZXI/OiBudW1iZXI7XG4gIHJhbmdlPzogbnVtYmVyW10gfCBzdHJpbmdbXTtcbiAgcmFuZ2VSb3VuZD86IG51bWJlcltdIHwgc3RyaW5nW107XG59XG5cbmZ1bmN0aW9uIGlzQ29tcGF0aWJsZURvbWFpbk9yUmFuZ2UoXG4gIGFycmF5OiBTY2FsZUNvbmZpZ1snZG9tYWluJ10gfCBTY2FsZUNvbmZpZ1sncmFuZ2UnXSxcbik6IGFycmF5IGlzIG51bWJlcltdIHwgc3RyaW5nW10ge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiBhcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICBhcnJheS5sZW5ndGggPiAwICYmXG4gICAgKHR5cGVvZiBhcnJheVswXSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGFycmF5WzBdID09PSAnbnVtYmVyJylcbiAgKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGVuY29kZWFibGUgc2NhbGUgb2JqZWN0IGludG8gQGRhdGEtdWkncyBzY2FsZSBjb25maWdcbiAqIEBwYXJhbSBzY2FsZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb252ZXJ0U2NhbGVUb0RhdGFVSVNjYWxlPE91dHB1dCBleHRlbmRzIFZhbHVlPihcbiAgc2NhbGU6IFNjYWxlQ29uZmlnPE91dHB1dD4sXG4pIHtcbiAgY29uc3QgeyB0eXBlLCBkb21haW4sIHJhbmdlIH0gPSBzY2FsZTtcblxuICBsZXQgb3V0cHV0VHlwZTogRGF0YVVJU2NhbGVUeXBlO1xuXG4gIGlmICh0eXBlID09PSAnbGluZWFyJyB8fCB0eXBlID09PSAndGltZScgfHwgdHlwZSA9PT0gJ2JhbmQnKSB7XG4gICAgb3V0cHV0VHlwZSA9IHR5cGU7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3V0YycpIHtcbiAgICBvdXRwdXRUeXBlID0gJ3RpbWVVdGMnO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgc2NhbGUgdHlwZTogJHt0eXBlfWApO1xuICB9XG5cbiAgY29uc3Qgb3V0cHV0OiBEYXRhVUlTY2FsZSA9IHsgdHlwZTogb3V0cHV0VHlwZSB9O1xuICBpZiAoaXNDb21wYXRpYmxlRG9tYWluT3JSYW5nZShkb21haW4pKSB7XG4gICAgb3V0cHV0LmRvbWFpbiA9IGRvbWFpbjtcbiAgfVxuICBpZiAoaXNDb21wYXRpYmxlRG9tYWluT3JSYW5nZShyYW5nZSkpIHtcbiAgICBvdXRwdXQucmFuZ2UgPSByYW5nZTtcbiAgfVxuICBpZiAoJ25pY2UnIGluIHNjYWxlICYmIHR5cGVvZiBzY2FsZS5uaWNlID09PSAnYm9vbGVhbicpIHtcbiAgICBvdXRwdXQubmljZSA9IHNjYWxlLm5pY2U7XG4gIH1cbiAgaWYgKCdwYWRkaW5nSW5uZXInIGluIHNjYWxlICYmIHR5cGVvZiBzY2FsZS5wYWRkaW5nSW5uZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgb3V0cHV0LnBhZGRpbmdJbm5lciA9IHNjYWxlLnBhZGRpbmdJbm5lcjtcbiAgfVxuICBpZiAoJ3BhZGRpbmdPdXRlcicgaW4gc2NhbGUgJiYgdHlwZW9mIHNjYWxlLnBhZGRpbmdPdXRlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBvdXRwdXQucGFkZGluZ091dGVyID0gc2NhbGUucGFkZGluZ091dGVyO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBZUE7QUFBQTtBQUdBO0FBRUE7QUFDQTtBQUVBO0FBRUE7OztBQUdBO0FBQ0E7QUFHQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1979\n")},1980:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ createXYChartLayoutWithTheme; });\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@data-ui/xy-chart/esm/axis/XAxis.js\nvar XAxis = __webpack_require__(2387);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@data-ui/xy-chart/esm/axis/YAxis.js\nvar YAxis = __webpack_require__(2388);\n\n// EXTERNAL MODULE: ../superset-ui-core/src/dimension/mergeMargin.ts\nvar mergeMargin = __webpack_require__(1055);\n\n// EXTERNAL MODULE: ../superset-ui-core/src/chart-composition/ChartFrame.tsx\nvar ChartFrame = __webpack_require__(1059);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/preset-chart-xy/src/utils/createTickComponent.tsx\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\nfunction createTickComponent({ axisWidth, labelAngle, labelFlush, labelOverlap, orient, tickLabels, tickLabelDimensions, tickTextAnchor = 'middle', }) {\n    if (labelOverlap === 'rotate' && labelAngle !== 0) {\n        let xOffset = labelAngle > 0 ? -6 : 6;\n        if (orient === 'top') {\n            xOffset = 0;\n        }\n        const yOffset = orient === 'top' ? -3 : 0;\n        return (_a) => {\n            var { x, y, formattedValue = '' } = _a, textStyle = __rest(_a, [\"x\", \"y\", \"formattedValue\"]);\n            return (react_default.a.createElement(\"g\", { transform: `translate(${x + xOffset}, ${y + yOffset})` },\n                react_default.a.createElement(\"text\", Object.assign({ transform: `rotate(${labelAngle})` }, textStyle, { textAnchor: tickTextAnchor }), formattedValue)));\n        };\n    }\n    if (labelFlush === true || typeof labelFlush === 'number') {\n        const labelToDimensionMap = new Map();\n        tickLabels.forEach((label, i) => {\n            labelToDimensionMap.set(label, tickLabelDimensions[i]);\n        });\n        return (_a) => {\n            var { x, y, formattedValue = '' } = _a, textStyle = __rest(_a, [\"x\", \"y\", \"formattedValue\"]);\n            const dimension = labelToDimensionMap.get(formattedValue);\n            const labelWidth = typeof dimension === 'undefined' ? 0 : dimension.width;\n            let textAnchor = tickTextAnchor;\n            let xOffset = 0;\n            if (x - labelWidth / 2 < 0) {\n                textAnchor = 'start';\n                if (typeof labelFlush === 'number') {\n                    xOffset -= labelFlush;\n                }\n            }\n            else if (x + labelWidth / 2 > axisWidth) {\n                textAnchor = 'end';\n                if (typeof labelFlush === 'number') {\n                    xOffset += labelFlush;\n                }\n            }\n            return (react_default.a.createElement(\"text\", Object.assign({ x: x + xOffset, y: y }, textStyle, { textAnchor: textAnchor }), formattedValue));\n        };\n    }\n    // This will render the tick as horizontal string.\n    return null;\n}\n\n// EXTERNAL MODULE: ../superset-ui-core/src/dimension/getTextDimension.ts\nvar getTextDimension = __webpack_require__(442);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/preset-chart-xy/src/utils/computeAxisLayout.ts\n\nfunction computeAxisLayout(axis, { axisTitleHeight = 20, axisWidth, gapBetweenAxisLabelAndBorder = 4, gapBetweenTickAndTickLabel = 4, defaultTickSize = 8, tickTextStyle = {}, }) {\n    const tickLabels = axis.getTickLabels();\n    const tickLabelDimensions = tickLabels.map((text) => Object(getTextDimension[\"a\" /* default */])({\n        style: tickTextStyle,\n        text,\n    }));\n    const { labelAngle, labelFlush, labelOverlap, labelPadding, orient, tickSize = defaultTickSize, } = axis.config;\n    const maxWidth = Math.max(...tickLabelDimensions.map(d => d.width), 0);\n    // cheap heuristic, can improve\n    const widthPerTick = axisWidth / tickLabels.length;\n    const isLabelOverlap = maxWidth > widthPerTick;\n    const labelAngleIfOverlap = labelOverlap.strategy === 'rotate' ? labelOverlap.labelAngle : 0;\n    const labelAngleAfterOverlapCheck = isLabelOverlap ? labelAngleIfOverlap : 0;\n    const finalLabelAngle = labelAngle === 0 ? labelAngleAfterOverlapCheck : labelAngle;\n    const spaceForAxisTitle = axis.hasTitle() ? labelPadding + axisTitleHeight : 0;\n    let tickTextAnchor = 'middle';\n    let labelOffset = 0;\n    let requiredMargin = tickSize + gapBetweenTickAndTickLabel + spaceForAxisTitle + gapBetweenAxisLabelAndBorder;\n    if (axis.channelEncoder.isX()) {\n        if (finalLabelAngle === 0) {\n            const labelHeight = tickLabelDimensions.length > 0 ? tickLabelDimensions[0].height : 0;\n            labelOffset = labelHeight + labelPadding;\n            requiredMargin += labelHeight;\n        }\n        else {\n            const labelHeight = Math.ceil(Math.abs(maxWidth * Math.sin((finalLabelAngle * Math.PI) / 180)));\n            labelOffset = labelHeight + labelPadding;\n            requiredMargin += labelHeight;\n            tickTextAnchor =\n                (orient === 'top' && finalLabelAngle > 0) || (orient === 'bottom' && finalLabelAngle < 0)\n                    ? 'end'\n                    : 'start';\n        }\n        requiredMargin += 8;\n    }\n    else {\n        labelOffset = maxWidth + spaceForAxisTitle;\n        requiredMargin += maxWidth;\n    }\n    return {\n        axisWidth,\n        labelAngle: finalLabelAngle,\n        labelFlush,\n        labelOffset,\n        labelOverlap: isLabelOverlap ? labelOverlap.strategy : 'flat',\n        minMargin: {\n            [orient]: Math.ceil(requiredMargin),\n        },\n        orient,\n        tickLabelDimensions,\n        tickLabels,\n        tickTextAnchor,\n    };\n}\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/preset-chart-xy/src/utils/XYChartLayout.tsx\n\n\n\n\n\nconst DEFAULT_LABEL_ANGLE = 40;\n// Additional margin to avoid content hidden behind scroll bar\nconst OVERFLOW_MARGIN = 8;\nclass XYChartLayout_XYChartLayout {\n    constructor(config) {\n        const { width, height, minContentWidth = 0, minContentHeight = 0, margin, xEncoder, xTickSize, xTickTextStyle, autoAdjustXMargin = true, yEncoder, yTickSize, yTickTextStyle, autoAdjustYMargin = true, } = config;\n        this.xEncoder = xEncoder;\n        this.yEncoder = yEncoder;\n        if (typeof yEncoder.axis !== 'undefined') {\n            this.yLayout = computeAxisLayout(yEncoder.axis, {\n                axisWidth: Math.max(height - margin.top - margin.bottom),\n                defaultTickSize: yTickSize,\n                tickTextStyle: yTickTextStyle,\n            });\n        }\n        const secondMargin = this.yLayout && autoAdjustYMargin ? Object(mergeMargin[\"a\" /* default */])(margin, this.yLayout.minMargin) : margin;\n        const innerWidth = Math.max(width - secondMargin.left - secondMargin.right, minContentWidth);\n        if (typeof xEncoder.axis !== 'undefined') {\n            this.xLayout = computeAxisLayout(xEncoder.axis, {\n                axisWidth: innerWidth,\n                defaultTickSize: xTickSize,\n                tickTextStyle: xTickTextStyle,\n            });\n        }\n        const finalMargin = this.xLayout && autoAdjustXMargin\n            ? Object(mergeMargin[\"a\" /* default */])(secondMargin, this.xLayout.minMargin)\n            : secondMargin;\n        const innerHeight = Math.max(height - finalMargin.top - finalMargin.bottom, minContentHeight);\n        const chartWidth = Math.round(innerWidth + finalMargin.left + finalMargin.right);\n        const chartHeight = Math.round(innerHeight + finalMargin.top + finalMargin.bottom);\n        const isOverFlowX = chartWidth > width;\n        const isOverFlowY = chartHeight > height;\n        if (isOverFlowX) {\n            finalMargin.bottom += OVERFLOW_MARGIN;\n        }\n        if (isOverFlowY) {\n            finalMargin.right += OVERFLOW_MARGIN;\n        }\n        this.chartWidth = isOverFlowX ? chartWidth + OVERFLOW_MARGIN : chartWidth;\n        this.chartHeight = isOverFlowY ? chartHeight + OVERFLOW_MARGIN : chartHeight;\n        this.containerWidth = width;\n        this.containerHeight = height;\n        this.margin = finalMargin;\n    }\n    renderChartWithFrame(renderChart) {\n        return (react_default.a.createElement(ChartFrame[\"a\" /* default */], { width: this.containerWidth, height: this.containerHeight, contentWidth: this.chartWidth, contentHeight: this.chartHeight, renderContent: renderChart }));\n    }\n    renderXAxis(props) {\n        const { axis } = this.xEncoder;\n        return axis && this.xLayout ? (react_default.a.createElement(XAxis[\"a\" /* default */], Object.assign({ label: axis.getTitle(), labelOffset: this.xLayout.labelOffset, numTicks: axis.config.tickCount, orientation: axis.config.orient, tickComponent: createTickComponent(this.xLayout), tickFormat: axis.formatValue }, props))) : null;\n    }\n    renderYAxis(props) {\n        const { axis } = this.yEncoder;\n        return axis && this.yLayout ? (react_default.a.createElement(YAxis[\"a\" /* default */], Object.assign({ label: axis.getTitle(), labelOffset: this.yLayout.labelOffset, numTicks: axis.config.tickCount, orientation: axis.config.orient, tickFormat: axis.formatValue }, props))) : null;\n    }\n}\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/preset-chart-xy/src/utils/createXYChartLayoutWithTheme.ts\nvar createXYChartLayoutWithTheme_rest = (undefined && undefined.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n\nfunction createXYChartLayoutWithTheme(config) {\n    const { theme } = config, rest = createXYChartLayoutWithTheme_rest(config, [\"theme\"]);\n    return new XYChartLayout_XYChartLayout(Object.assign(Object.assign({}, rest), { \n        // @ts-ignore\n        xTickSize: theme.xTickStyles.length || theme.xTickStyles.tickLength, xTickTextStyle: theme.xTickStyles.label.bottom || theme.xTickStyles.label.top, \n        // @ts-ignore\n        yTickSize: theme.yTickStyles.length || theme.yTickStyles.tickLength, yTickTextStyle: theme.yTickStyles.label.left || theme.yTickStyles.label.right }));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk4MC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMvZXJpa19yaXR0ZXIvcmVwb3MvZ2l0aHViLmNvbS9hcGFjaGUtc3VwZXJzZXQvc3VwZXJzZXQtdWkvcGx1Z2lucy9wcmVzZXQtY2hhcnQteHkvc3JjL3V0aWxzL2NyZWF0ZVRpY2tDb21wb25lbnQudHN4P2UxOWQiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy9lcmlrX3JpdHRlci9yZXBvcy9naXRodWIuY29tL2FwYWNoZS1zdXBlcnNldC9zdXBlcnNldC11aS9wbHVnaW5zL3ByZXNldC1jaGFydC14eS9zcmMvdXRpbHMvY29tcHV0ZUF4aXNMYXlvdXQudHM/Yjk2ZCIsIndlYnBhY2s6Ly8vL1VzZXJzL2VyaWtfcml0dGVyL3JlcG9zL2dpdGh1Yi5jb20vYXBhY2hlLXN1cGVyc2V0L3N1cGVyc2V0LXVpL3BsdWdpbnMvcHJlc2V0LWNoYXJ0LXh5L3NyYy91dGlscy9YWUNoYXJ0TGF5b3V0LnRzeD83YzZmIiwid2VicGFjazovLy8vVXNlcnMvZXJpa19yaXR0ZXIvcmVwb3MvZ2l0aHViLmNvbS9hcGFjaGUtc3VwZXJzZXQvc3VwZXJzZXQtdWkvcGx1Z2lucy9wcmVzZXQtY2hhcnQteHkvc3JjL3V0aWxzL2NyZWF0ZVhZQ2hhcnRMYXlvdXRXaXRoVGhlbWUudHM/ZDI4OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ1NTUHJvcGVydGllcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IERpbWVuc2lvbiB9IGZyb20gJ0BzdXBlcnNldC11aS9jb3JlJztcbmltcG9ydCB7IEF4aXNMYXlvdXQgfSBmcm9tICcuL2NvbXB1dGVBeGlzTGF5b3V0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVGlja0NvbXBvbmVudCh7XG4gIGF4aXNXaWR0aCxcbiAgbGFiZWxBbmdsZSxcbiAgbGFiZWxGbHVzaCxcbiAgbGFiZWxPdmVybGFwLFxuICBvcmllbnQsXG4gIHRpY2tMYWJlbHMsXG4gIHRpY2tMYWJlbERpbWVuc2lvbnMsXG4gIHRpY2tUZXh0QW5jaG9yID0gJ21pZGRsZScsXG59OiBBeGlzTGF5b3V0KSB7XG4gIGlmIChsYWJlbE92ZXJsYXAgPT09ICdyb3RhdGUnICYmIGxhYmVsQW5nbGUgIT09IDApIHtcbiAgICBsZXQgeE9mZnNldCA9IGxhYmVsQW5nbGUgPiAwID8gLTYgOiA2O1xuICAgIGlmIChvcmllbnQgPT09ICd0b3AnKSB7XG4gICAgICB4T2Zmc2V0ID0gMDtcbiAgICB9XG4gICAgY29uc3QgeU9mZnNldCA9IG9yaWVudCA9PT0gJ3RvcCcgPyAtMyA6IDA7XG5cbiAgICByZXR1cm4gKHtcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgZm9ybWF0dGVkVmFsdWUgPSAnJyxcbiAgICAgIC4uLnRleHRTdHlsZVxuICAgIH06IHtcbiAgICAgIHg6IG51bWJlcjtcbiAgICAgIHk6IG51bWJlcjtcbiAgICAgIGR5PzogbnVtYmVyO1xuICAgICAgZm9ybWF0dGVkVmFsdWU6IHN0cmluZztcbiAgICAgIHRleHRTdHlsZTogQ1NTUHJvcGVydGllcztcbiAgICB9KSA9PiAoXG4gICAgICA8ZyB0cmFuc2Zvcm09e2B0cmFuc2xhdGUoJHt4ICsgeE9mZnNldH0sICR7eSArIHlPZmZzZXR9KWB9PlxuICAgICAgICA8dGV4dCB0cmFuc2Zvcm09e2Byb3RhdGUoJHtsYWJlbEFuZ2xlfSlgfSB7Li4udGV4dFN0eWxlfSB0ZXh0QW5jaG9yPXt0aWNrVGV4dEFuY2hvcn0+XG4gICAgICAgICAge2Zvcm1hdHRlZFZhbHVlfVxuICAgICAgICA8L3RleHQ+XG4gICAgICA8L2c+XG4gICAgKTtcbiAgfVxuXG4gIGlmIChsYWJlbEZsdXNoID09PSB0cnVlIHx8IHR5cGVvZiBsYWJlbEZsdXNoID09PSAnbnVtYmVyJykge1xuICAgIGNvbnN0IGxhYmVsVG9EaW1lbnNpb25NYXAgPSBuZXcgTWFwPHN0cmluZywgRGltZW5zaW9uPigpO1xuICAgIHRpY2tMYWJlbHMuZm9yRWFjaCgobGFiZWwsIGkpID0+IHtcbiAgICAgIGxhYmVsVG9EaW1lbnNpb25NYXAuc2V0KGxhYmVsLCB0aWNrTGFiZWxEaW1lbnNpb25zW2ldKTtcbiAgICB9KTtcblxuICAgIHJldHVybiAoe1xuICAgICAgeCxcbiAgICAgIHksXG4gICAgICBmb3JtYXR0ZWRWYWx1ZSA9ICcnLFxuICAgICAgLi4udGV4dFN0eWxlXG4gICAgfToge1xuICAgICAgeDogbnVtYmVyO1xuICAgICAgeTogbnVtYmVyO1xuICAgICAgZHk/OiBudW1iZXI7XG4gICAgICBmb3JtYXR0ZWRWYWx1ZTogc3RyaW5nO1xuICAgICAgdGV4dFN0eWxlOiBDU1NQcm9wZXJ0aWVzO1xuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IGRpbWVuc2lvbiA9IGxhYmVsVG9EaW1lbnNpb25NYXAuZ2V0KGZvcm1hdHRlZFZhbHVlKTtcbiAgICAgIGNvbnN0IGxhYmVsV2lkdGggPSB0eXBlb2YgZGltZW5zaW9uID09PSAndW5kZWZpbmVkJyA/IDAgOiBkaW1lbnNpb24ud2lkdGg7XG4gICAgICBsZXQgdGV4dEFuY2hvciA9IHRpY2tUZXh0QW5jaG9yO1xuICAgICAgbGV0IHhPZmZzZXQgPSAwO1xuXG4gICAgICBpZiAoeCAtIGxhYmVsV2lkdGggLyAyIDwgMCkge1xuICAgICAgICB0ZXh0QW5jaG9yID0gJ3N0YXJ0JztcbiAgICAgICAgaWYgKHR5cGVvZiBsYWJlbEZsdXNoID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIHhPZmZzZXQgLT0gbGFiZWxGbHVzaDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh4ICsgbGFiZWxXaWR0aCAvIDIgPiBheGlzV2lkdGgpIHtcbiAgICAgICAgdGV4dEFuY2hvciA9ICdlbmQnO1xuICAgICAgICBpZiAodHlwZW9mIGxhYmVsRmx1c2ggPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgeE9mZnNldCArPSBsYWJlbEZsdXNoO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDx0ZXh0IHg9e3ggKyB4T2Zmc2V0fSB5PXt5fSB7Li4udGV4dFN0eWxlfSB0ZXh0QW5jaG9yPXt0ZXh0QW5jaG9yfT5cbiAgICAgICAgICB7Zm9ybWF0dGVkVmFsdWV9XG4gICAgICAgIDwvdGV4dD5cbiAgICAgICk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIFRoaXMgd2lsbCByZW5kZXIgdGhlIHRpY2sgYXMgaG9yaXpvbnRhbCBzdHJpbmcuXG4gIHJldHVybiBudWxsO1xufVxuIiwiaW1wb3J0IHsgQ1NTUHJvcGVydGllcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldFRleHREaW1lbnNpb24sIE1hcmdpbiwgRGltZW5zaW9uIH0gZnJvbSAnQHN1cGVyc2V0LXVpL2NvcmUnO1xuaW1wb3J0IHsgQXhpc09yaWVudCwgQ2hhbm5lbERlZiwgVmFsdWUgfSBmcm9tICdlbmNvZGFibGUnO1xuXG5pbXBvcnQgQ2hhbm5lbEVuY29kZXJBeGlzIGZyb20gJ2VuY29kYWJsZS9saWIvZW5jb2RlcnMvQ2hhbm5lbEVuY29kZXJBeGlzJztcblxuZXhwb3J0IGludGVyZmFjZSBBeGlzTGF5b3V0IHtcbiAgYXhpc1dpZHRoOiBudW1iZXI7XG4gIGxhYmVsQW5nbGU6IG51bWJlcjtcbiAgbGFiZWxGbHVzaDogbnVtYmVyIHwgYm9vbGVhbjtcbiAgbGFiZWxPZmZzZXQ6IG51bWJlcjtcbiAgbGFiZWxPdmVybGFwOiAnZmxhdCcgfCAncm90YXRlJztcbiAgbWluTWFyZ2luOiBQYXJ0aWFsPE1hcmdpbj47XG4gIG9yaWVudDogQXhpc09yaWVudDtcbiAgdGlja0xhYmVsRGltZW5zaW9uczogRGltZW5zaW9uW107XG4gIHRpY2tMYWJlbHM6IHN0cmluZ1tdO1xuICB0aWNrVGV4dEFuY2hvcj86IHN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZUF4aXNMYXlvdXQ8RGVmIGV4dGVuZHMgQ2hhbm5lbERlZjxPdXRwdXQ+LCBPdXRwdXQgZXh0ZW5kcyBWYWx1ZT4oXG4gIGF4aXM6IENoYW5uZWxFbmNvZGVyQXhpczxEZWYsIE91dHB1dD4sXG4gIHtcbiAgICBheGlzVGl0bGVIZWlnaHQgPSAyMCxcbiAgICBheGlzV2lkdGgsXG4gICAgZ2FwQmV0d2VlbkF4aXNMYWJlbEFuZEJvcmRlciA9IDQsXG4gICAgZ2FwQmV0d2VlblRpY2tBbmRUaWNrTGFiZWwgPSA0LFxuICAgIGRlZmF1bHRUaWNrU2l6ZSA9IDgsXG4gICAgdGlja1RleHRTdHlsZSA9IHt9LFxuICB9OiB7XG4gICAgYXhpc1RpdGxlSGVpZ2h0PzogbnVtYmVyO1xuICAgIGF4aXNXaWR0aDogbnVtYmVyO1xuICAgIGdhcEJldHdlZW5BeGlzTGFiZWxBbmRCb3JkZXI/OiBudW1iZXI7XG4gICAgZ2FwQmV0d2VlblRpY2tBbmRUaWNrTGFiZWw/OiBudW1iZXI7XG4gICAgZGVmYXVsdFRpY2tTaXplPzogbnVtYmVyO1xuICAgIHRpY2tUZXh0U3R5bGU/OiBDU1NQcm9wZXJ0aWVzO1xuICB9LFxuKTogQXhpc0xheW91dCB7XG4gIGNvbnN0IHRpY2tMYWJlbHMgPSBheGlzLmdldFRpY2tMYWJlbHMoKTtcbiAgY29uc3QgdGlja0xhYmVsRGltZW5zaW9ucyA9IHRpY2tMYWJlbHMubWFwKCh0ZXh0OiBzdHJpbmcpID0+XG4gICAgZ2V0VGV4dERpbWVuc2lvbih7XG4gICAgICBzdHlsZTogdGlja1RleHRTdHlsZSxcbiAgICAgIHRleHQsXG4gICAgfSksXG4gICk7XG5cbiAgY29uc3Qge1xuICAgIGxhYmVsQW5nbGUsXG4gICAgbGFiZWxGbHVzaCxcbiAgICBsYWJlbE92ZXJsYXAsXG4gICAgbGFiZWxQYWRkaW5nLFxuICAgIG9yaWVudCxcbiAgICB0aWNrU2l6ZSA9IGRlZmF1bHRUaWNrU2l6ZSxcbiAgfSA9IGF4aXMuY29uZmlnO1xuXG4gIGNvbnN0IG1heFdpZHRoID0gTWF0aC5tYXgoLi4udGlja0xhYmVsRGltZW5zaW9ucy5tYXAoZCA9PiBkLndpZHRoKSwgMCk7XG5cbiAgLy8gY2hlYXAgaGV1cmlzdGljLCBjYW4gaW1wcm92ZVxuICBjb25zdCB3aWR0aFBlclRpY2sgPSBheGlzV2lkdGggLyB0aWNrTGFiZWxzLmxlbmd0aDtcbiAgY29uc3QgaXNMYWJlbE92ZXJsYXAgPSBtYXhXaWR0aCA+IHdpZHRoUGVyVGljaztcbiAgY29uc3QgbGFiZWxBbmdsZUlmT3ZlcmxhcCA9IGxhYmVsT3ZlcmxhcC5zdHJhdGVneSA9PT0gJ3JvdGF0ZScgPyBsYWJlbE92ZXJsYXAubGFiZWxBbmdsZSA6IDA7XG4gIGNvbnN0IGxhYmVsQW5nbGVBZnRlck92ZXJsYXBDaGVjayA9IGlzTGFiZWxPdmVybGFwID8gbGFiZWxBbmdsZUlmT3ZlcmxhcCA6IDA7XG4gIGNvbnN0IGZpbmFsTGFiZWxBbmdsZSA9IGxhYmVsQW5nbGUgPT09IDAgPyBsYWJlbEFuZ2xlQWZ0ZXJPdmVybGFwQ2hlY2sgOiBsYWJlbEFuZ2xlO1xuXG4gIGNvbnN0IHNwYWNlRm9yQXhpc1RpdGxlID0gYXhpcy5oYXNUaXRsZSgpID8gbGFiZWxQYWRkaW5nICsgYXhpc1RpdGxlSGVpZ2h0IDogMDtcbiAgbGV0IHRpY2tUZXh0QW5jaG9yID0gJ21pZGRsZSc7XG4gIGxldCBsYWJlbE9mZnNldCA9IDA7XG4gIGxldCByZXF1aXJlZE1hcmdpbiA9XG4gICAgdGlja1NpemUgKyBnYXBCZXR3ZWVuVGlja0FuZFRpY2tMYWJlbCArIHNwYWNlRm9yQXhpc1RpdGxlICsgZ2FwQmV0d2VlbkF4aXNMYWJlbEFuZEJvcmRlcjtcblxuICBpZiAoYXhpcy5jaGFubmVsRW5jb2Rlci5pc1goKSkge1xuICAgIGlmIChmaW5hbExhYmVsQW5nbGUgPT09IDApIHtcbiAgICAgIGNvbnN0IGxhYmVsSGVpZ2h0ID0gdGlja0xhYmVsRGltZW5zaW9ucy5sZW5ndGggPiAwID8gdGlja0xhYmVsRGltZW5zaW9uc1swXS5oZWlnaHQgOiAwO1xuICAgICAgbGFiZWxPZmZzZXQgPSBsYWJlbEhlaWdodCArIGxhYmVsUGFkZGluZztcbiAgICAgIHJlcXVpcmVkTWFyZ2luICs9IGxhYmVsSGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBsYWJlbEhlaWdodCA9IE1hdGguY2VpbChcbiAgICAgICAgTWF0aC5hYnMobWF4V2lkdGggKiBNYXRoLnNpbigoZmluYWxMYWJlbEFuZ2xlICogTWF0aC5QSSkgLyAxODApKSxcbiAgICAgICk7XG4gICAgICBsYWJlbE9mZnNldCA9IGxhYmVsSGVpZ2h0ICsgbGFiZWxQYWRkaW5nO1xuICAgICAgcmVxdWlyZWRNYXJnaW4gKz0gbGFiZWxIZWlnaHQ7XG4gICAgICB0aWNrVGV4dEFuY2hvciA9XG4gICAgICAgIChvcmllbnQgPT09ICd0b3AnICYmIGZpbmFsTGFiZWxBbmdsZSA+IDApIHx8IChvcmllbnQgPT09ICdib3R0b20nICYmIGZpbmFsTGFiZWxBbmdsZSA8IDApXG4gICAgICAgICAgPyAnZW5kJ1xuICAgICAgICAgIDogJ3N0YXJ0JztcbiAgICB9XG4gICAgcmVxdWlyZWRNYXJnaW4gKz0gODtcbiAgfSBlbHNlIHtcbiAgICBsYWJlbE9mZnNldCA9IG1heFdpZHRoICsgc3BhY2VGb3JBeGlzVGl0bGU7XG4gICAgcmVxdWlyZWRNYXJnaW4gKz0gbWF4V2lkdGg7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGF4aXNXaWR0aCxcbiAgICBsYWJlbEFuZ2xlOiBmaW5hbExhYmVsQW5nbGUsXG4gICAgbGFiZWxGbHVzaCxcbiAgICBsYWJlbE9mZnNldCxcbiAgICBsYWJlbE92ZXJsYXA6IGlzTGFiZWxPdmVybGFwID8gbGFiZWxPdmVybGFwLnN0cmF0ZWd5IDogJ2ZsYXQnLFxuICAgIG1pbk1hcmdpbjoge1xuICAgICAgW29yaWVudF06IE1hdGguY2VpbChyZXF1aXJlZE1hcmdpbiksXG4gICAgfSxcbiAgICBvcmllbnQsXG4gICAgdGlja0xhYmVsRGltZW5zaW9ucyxcbiAgICB0aWNrTGFiZWxzLFxuICAgIHRpY2tUZXh0QW5jaG9yLFxuICB9O1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSwgQ1NTUHJvcGVydGllcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFhBeGlzLCBZQXhpcyB9IGZyb20gJ0BkYXRhLXVpL3h5LWNoYXJ0JztcbmltcG9ydCB7IENoYXJ0RnJhbWUsIE1hcmdpbiwgbWVyZ2VNYXJnaW4sIERpbWVuc2lvbiB9IGZyb20gJ0BzdXBlcnNldC11aS9jb3JlJztcbmltcG9ydCB7IENoYW5uZWxFbmNvZGVyLCBQbGFpbk9iamVjdCwgVmFsdWUsIFhGaWVsZERlZiwgWUZpZWxkRGVmIH0gZnJvbSAnZW5jb2RhYmxlJztcbmltcG9ydCBjcmVhdGVUaWNrQ29tcG9uZW50IGZyb20gJy4vY3JlYXRlVGlja0NvbXBvbmVudCc7XG5pbXBvcnQgY29tcHV0ZUF4aXNMYXlvdXQsIHsgQXhpc0xheW91dCB9IGZyb20gJy4vY29tcHV0ZUF4aXNMYXlvdXQnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9MQUJFTF9BTkdMRSA9IDQwO1xuXG4vLyBBZGRpdGlvbmFsIG1hcmdpbiB0byBhdm9pZCBjb250ZW50IGhpZGRlbiBiZWhpbmQgc2Nyb2xsIGJhclxuY29uc3QgT1ZFUkZMT1dfTUFSR0lOID0gODtcblxuZXhwb3J0IGludGVyZmFjZSBYWUNoYXJ0TGF5b3V0Q29uZmlnPFhPdXRwdXQgZXh0ZW5kcyBWYWx1ZSwgWU91dHB1dCBleHRlbmRzIFZhbHVlPiB7XG4gIHdpZHRoOiBudW1iZXI7XG4gIGhlaWdodDogbnVtYmVyO1xuICBtaW5Db250ZW50V2lkdGg/OiBudW1iZXI7XG4gIG1pbkNvbnRlbnRIZWlnaHQ/OiBudW1iZXI7XG4gIG1hcmdpbjogTWFyZ2luO1xuICB4RW5jb2RlcjogQ2hhbm5lbEVuY29kZXI8WEZpZWxkRGVmPFhPdXRwdXQ+LCBYT3V0cHV0PjtcbiAgeFRpY2tTaXplPzogbnVtYmVyO1xuICB4VGlja1RleHRTdHlsZT86IENTU1Byb3BlcnRpZXM7XG4gIGF1dG9BZGp1c3RYTWFyZ2luPzogYm9vbGVhbjtcbiAgeUVuY29kZXI6IENoYW5uZWxFbmNvZGVyPFlGaWVsZERlZjxZT3V0cHV0PiwgWU91dHB1dD47XG4gIHlUaWNrU2l6ZT86IG51bWJlcjtcbiAgeVRpY2tUZXh0U3R5bGU/OiBDU1NQcm9wZXJ0aWVzO1xuICBhdXRvQWRqdXN0WU1hcmdpbj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhZQ2hhcnRMYXlvdXQ8WE91dHB1dCBleHRlbmRzIFZhbHVlLCBZT3V0cHV0IGV4dGVuZHMgVmFsdWU+IHtcbiAgY2hhcnRXaWR0aDogbnVtYmVyO1xuXG4gIGNoYXJ0SGVpZ2h0OiBudW1iZXI7XG5cbiAgY29udGFpbmVyV2lkdGg6IG51bWJlcjtcblxuICBjb250YWluZXJIZWlnaHQ6IG51bWJlcjtcblxuICBtYXJnaW46IE1hcmdpbjtcblxuICB4RW5jb2RlcjogQ2hhbm5lbEVuY29kZXI8WEZpZWxkRGVmPFhPdXRwdXQ+LCBYT3V0cHV0PjtcblxuICB4TGF5b3V0PzogQXhpc0xheW91dDtcblxuICB5RW5jb2RlcjogQ2hhbm5lbEVuY29kZXI8WUZpZWxkRGVmPFlPdXRwdXQ+LCBZT3V0cHV0PjtcblxuICB5TGF5b3V0PzogQXhpc0xheW91dDtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFhZQ2hhcnRMYXlvdXRDb25maWc8WE91dHB1dCwgWU91dHB1dD4pIHtcbiAgICBjb25zdCB7XG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodCxcbiAgICAgIG1pbkNvbnRlbnRXaWR0aCA9IDAsXG4gICAgICBtaW5Db250ZW50SGVpZ2h0ID0gMCxcbiAgICAgIG1hcmdpbixcbiAgICAgIHhFbmNvZGVyLFxuICAgICAgeFRpY2tTaXplLFxuICAgICAgeFRpY2tUZXh0U3R5bGUsXG4gICAgICBhdXRvQWRqdXN0WE1hcmdpbiA9IHRydWUsXG4gICAgICB5RW5jb2RlcixcbiAgICAgIHlUaWNrU2l6ZSxcbiAgICAgIHlUaWNrVGV4dFN0eWxlLFxuICAgICAgYXV0b0FkanVzdFlNYXJnaW4gPSB0cnVlLFxuICAgIH0gPSBjb25maWc7XG5cbiAgICB0aGlzLnhFbmNvZGVyID0geEVuY29kZXI7XG4gICAgdGhpcy55RW5jb2RlciA9IHlFbmNvZGVyO1xuXG4gICAgaWYgKHR5cGVvZiB5RW5jb2Rlci5heGlzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy55TGF5b3V0ID0gY29tcHV0ZUF4aXNMYXlvdXQoeUVuY29kZXIuYXhpcywge1xuICAgICAgICBheGlzV2lkdGg6IE1hdGgubWF4KGhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tKSxcbiAgICAgICAgZGVmYXVsdFRpY2tTaXplOiB5VGlja1NpemUsXG4gICAgICAgIHRpY2tUZXh0U3R5bGU6IHlUaWNrVGV4dFN0eWxlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2Vjb25kTWFyZ2luID1cbiAgICAgIHRoaXMueUxheW91dCAmJiBhdXRvQWRqdXN0WU1hcmdpbiA/IG1lcmdlTWFyZ2luKG1hcmdpbiwgdGhpcy55TGF5b3V0Lm1pbk1hcmdpbikgOiBtYXJnaW47XG4gICAgY29uc3QgaW5uZXJXaWR0aCA9IE1hdGgubWF4KHdpZHRoIC0gc2Vjb25kTWFyZ2luLmxlZnQgLSBzZWNvbmRNYXJnaW4ucmlnaHQsIG1pbkNvbnRlbnRXaWR0aCk7XG5cbiAgICBpZiAodHlwZW9mIHhFbmNvZGVyLmF4aXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLnhMYXlvdXQgPSBjb21wdXRlQXhpc0xheW91dCh4RW5jb2Rlci5heGlzLCB7XG4gICAgICAgIGF4aXNXaWR0aDogaW5uZXJXaWR0aCxcbiAgICAgICAgZGVmYXVsdFRpY2tTaXplOiB4VGlja1NpemUsXG4gICAgICAgIHRpY2tUZXh0U3R5bGU6IHhUaWNrVGV4dFN0eWxlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgZmluYWxNYXJnaW4gPVxuICAgICAgdGhpcy54TGF5b3V0ICYmIGF1dG9BZGp1c3RYTWFyZ2luXG4gICAgICAgID8gbWVyZ2VNYXJnaW4oc2Vjb25kTWFyZ2luLCB0aGlzLnhMYXlvdXQubWluTWFyZ2luKVxuICAgICAgICA6IHNlY29uZE1hcmdpbjtcblxuICAgIGNvbnN0IGlubmVySGVpZ2h0ID0gTWF0aC5tYXgoaGVpZ2h0IC0gZmluYWxNYXJnaW4udG9wIC0gZmluYWxNYXJnaW4uYm90dG9tLCBtaW5Db250ZW50SGVpZ2h0KTtcblxuICAgIGNvbnN0IGNoYXJ0V2lkdGggPSBNYXRoLnJvdW5kKGlubmVyV2lkdGggKyBmaW5hbE1hcmdpbi5sZWZ0ICsgZmluYWxNYXJnaW4ucmlnaHQpO1xuICAgIGNvbnN0IGNoYXJ0SGVpZ2h0ID0gTWF0aC5yb3VuZChpbm5lckhlaWdodCArIGZpbmFsTWFyZ2luLnRvcCArIGZpbmFsTWFyZ2luLmJvdHRvbSk7XG5cbiAgICBjb25zdCBpc092ZXJGbG93WCA9IGNoYXJ0V2lkdGggPiB3aWR0aDtcbiAgICBjb25zdCBpc092ZXJGbG93WSA9IGNoYXJ0SGVpZ2h0ID4gaGVpZ2h0O1xuICAgIGlmIChpc092ZXJGbG93WCkge1xuICAgICAgZmluYWxNYXJnaW4uYm90dG9tICs9IE9WRVJGTE9XX01BUkdJTjtcbiAgICB9XG4gICAgaWYgKGlzT3ZlckZsb3dZKSB7XG4gICAgICBmaW5hbE1hcmdpbi5yaWdodCArPSBPVkVSRkxPV19NQVJHSU47XG4gICAgfVxuICAgIHRoaXMuY2hhcnRXaWR0aCA9IGlzT3ZlckZsb3dYID8gY2hhcnRXaWR0aCArIE9WRVJGTE9XX01BUkdJTiA6IGNoYXJ0V2lkdGg7XG4gICAgdGhpcy5jaGFydEhlaWdodCA9IGlzT3ZlckZsb3dZID8gY2hhcnRIZWlnaHQgKyBPVkVSRkxPV19NQVJHSU4gOiBjaGFydEhlaWdodDtcbiAgICB0aGlzLmNvbnRhaW5lcldpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5jb250YWluZXJIZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5tYXJnaW4gPSBmaW5hbE1hcmdpbjtcbiAgfVxuXG4gIHJlbmRlckNoYXJ0V2l0aEZyYW1lKHJlbmRlckNoYXJ0OiAoaW5wdXQ6IERpbWVuc2lvbikgPT4gUmVhY3ROb2RlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxDaGFydEZyYW1lXG4gICAgICAgIHdpZHRoPXt0aGlzLmNvbnRhaW5lcldpZHRofVxuICAgICAgICBoZWlnaHQ9e3RoaXMuY29udGFpbmVySGVpZ2h0fVxuICAgICAgICBjb250ZW50V2lkdGg9e3RoaXMuY2hhcnRXaWR0aH1cbiAgICAgICAgY29udGVudEhlaWdodD17dGhpcy5jaGFydEhlaWdodH1cbiAgICAgICAgcmVuZGVyQ29udGVudD17cmVuZGVyQ2hhcnR9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJYQXhpcyhwcm9wcz86IFBsYWluT2JqZWN0KSB7XG4gICAgY29uc3QgeyBheGlzIH0gPSB0aGlzLnhFbmNvZGVyO1xuXG4gICAgcmV0dXJuIGF4aXMgJiYgdGhpcy54TGF5b3V0ID8gKFxuICAgICAgPFhBeGlzXG4gICAgICAgIGxhYmVsPXtheGlzLmdldFRpdGxlKCl9XG4gICAgICAgIGxhYmVsT2Zmc2V0PXt0aGlzLnhMYXlvdXQubGFiZWxPZmZzZXR9XG4gICAgICAgIG51bVRpY2tzPXtheGlzLmNvbmZpZy50aWNrQ291bnR9XG4gICAgICAgIG9yaWVudGF0aW9uPXtheGlzLmNvbmZpZy5vcmllbnR9XG4gICAgICAgIHRpY2tDb21wb25lbnQ9e2NyZWF0ZVRpY2tDb21wb25lbnQodGhpcy54TGF5b3V0KX1cbiAgICAgICAgdGlja0Zvcm1hdD17YXhpcy5mb3JtYXRWYWx1ZX1cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgLz5cbiAgICApIDogbnVsbDtcbiAgfVxuXG4gIHJlbmRlcllBeGlzKHByb3BzPzogUGxhaW5PYmplY3QpIHtcbiAgICBjb25zdCB7IGF4aXMgfSA9IHRoaXMueUVuY29kZXI7XG5cbiAgICByZXR1cm4gYXhpcyAmJiB0aGlzLnlMYXlvdXQgPyAoXG4gICAgICA8WUF4aXNcbiAgICAgICAgbGFiZWw9e2F4aXMuZ2V0VGl0bGUoKX1cbiAgICAgICAgbGFiZWxPZmZzZXQ9e3RoaXMueUxheW91dC5sYWJlbE9mZnNldH1cbiAgICAgICAgbnVtVGlja3M9e2F4aXMuY29uZmlnLnRpY2tDb3VudH1cbiAgICAgICAgb3JpZW50YXRpb249e2F4aXMuY29uZmlnLm9yaWVudH1cbiAgICAgICAgdGlja0Zvcm1hdD17YXhpcy5mb3JtYXRWYWx1ZX1cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgLz5cbiAgICApIDogbnVsbDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ2hhcnRUaGVtZSB9IGZyb20gJ0BkYXRhLXVpL3RoZW1lJztcbmltcG9ydCB7IFZhbHVlIH0gZnJvbSAnZW5jb2RhYmxlJztcbmltcG9ydCBYWUNoYXJ0TGF5b3V0LCB7IFhZQ2hhcnRMYXlvdXRDb25maWcgfSBmcm9tICcuL1hZQ2hhcnRMYXlvdXQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVYWUNoYXJ0TGF5b3V0V2l0aFRoZW1lPFhPdXRwdXQgZXh0ZW5kcyBWYWx1ZSwgWU91dHB1dCBleHRlbmRzIFZhbHVlPihcbiAgY29uZmlnOiBYWUNoYXJ0TGF5b3V0Q29uZmlnPFhPdXRwdXQsIFlPdXRwdXQ+ICYge1xuICAgIHRoZW1lOiBDaGFydFRoZW1lO1xuICB9LFxuKSB7XG4gIGNvbnN0IHsgdGhlbWUsIC4uLnJlc3QgfSA9IGNvbmZpZztcblxuICByZXR1cm4gbmV3IFhZQ2hhcnRMYXlvdXQ8WE91dHB1dCwgWU91dHB1dD4oe1xuICAgIC4uLnJlc3QsXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHhUaWNrU2l6ZTogdGhlbWUueFRpY2tTdHlsZXMubGVuZ3RoIHx8IHRoZW1lLnhUaWNrU3R5bGVzLnRpY2tMZW5ndGgsXG4gICAgeFRpY2tUZXh0U3R5bGU6IHRoZW1lLnhUaWNrU3R5bGVzLmxhYmVsLmJvdHRvbSB8fCB0aGVtZS54VGlja1N0eWxlcy5sYWJlbC50b3AsXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHlUaWNrU2l6ZTogdGhlbWUueVRpY2tTdHlsZXMubGVuZ3RoIHx8IHRoZW1lLnlUaWNrU3R5bGVzLnRpY2tMZW5ndGgsXG4gICAgeVRpY2tUZXh0U3R5bGU6IHRoZW1lLnlUaWNrU3R5bGVzLmxhYmVsLmxlZnQgfHwgdGhlbWUueVRpY2tTdHlsZXMubGFiZWwucmlnaHQsXG4gIH0pO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBSUE7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBV0E7QUFFQTtBQUlBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQVlBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFLQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7Ozs7QUNyRkE7QUFrQkE7QUFrQkE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBU0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDekdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFrQkE7QUFtQkE7QUFDQTtBQWdCQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQVNBO0FBRUE7QUFDQTtBQUVBO0FBV0E7QUFFQTtBQUNBO0FBRUE7QUFVQTtBQUNBOzs7Ozs7Ozs7Ozs7OztBQ3hKQTtBQUVBO0FBS0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1980\n")},1981:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ createRenderLegend; });\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/legend/esm/legends/Legend/LegendItem.js\nvar LegendItem = __webpack_require__(2254);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/legend/esm/legends/Legend/LegendLabel.js\nvar LegendLabel = __webpack_require__(2255);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/preset-chart-xy/src/components/legend/DefaultLegendItem.tsx\n\n\nconst MARK_SIZE = 8;\nconst MARK_STYLE = { display: 'inline-block' };\nfunction DefaultLegendItem({ group, item, MarkRenderer, LabelRenderer, }) {\n    var _a, _b, _c, _d;\n    return (react_default.a.createElement(LegendItem[\"a\" /* default */], { key: `legend-item-${group.field}-${item.input}`, margin: \"0 5px\" },\n        typeof MarkRenderer === 'undefined' ? (react_default.a.createElement(\"svg\", { width: MARK_SIZE, height: MARK_SIZE, style: MARK_STYLE },\n            react_default.a.createElement(\"circle\", { fill: \n                // @ts-ignore\n                ((_c = (_b = (_a = item.output.color) !== null && _a !== void 0 ? _a : \n                // @ts-ignore\n                item.output.fill) !== null && _b !== void 0 ? _b : \n                // @ts-ignore\n                item.output.stroke) !== null && _c !== void 0 ? _c : '#ccc'), stroke: \n                // @ts-ignore\n                ((_d = item.output.stroke) !== null && _d !== void 0 ? _d : 'none'), r: MARK_SIZE / 2, cx: MARK_SIZE / 2, cy: MARK_SIZE / 2 }))) : (react_default.a.createElement(MarkRenderer, { group: group, item: item })),\n        typeof LabelRenderer === 'undefined' ? (react_default.a.createElement(LegendLabel[\"a\" /* default */], { align: \"left\", margin: \"0 0 0 4px\" }, item.input)) : (react_default.a.createElement(LabelRenderer, { group: group, item: item }))));\n}\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/preset-chart-xy/src/components/legend/DefaultLegendGroup.tsx\n\n\nconst LEGEND_GROUP_STYLE = {\n    display: 'flex',\n    flexBasis: 'auto',\n    flexDirection: 'row',\n    flexGrow: 1,\n    flexShrink: 1,\n    flexWrap: 'wrap',\n    fontSize: '0.8em',\n    justifyContent: 'flex-end',\n    padding: 8,\n};\nfunction DefaultLegendGroupRenderer({ group, ItemRenderer = DefaultLegendItem, ItemMarkRenderer, ItemLabelRenderer, style, }) {\n    const combinedStyle = typeof style === 'undefined' ? LEGEND_GROUP_STYLE : Object.assign(Object.assign({}, LEGEND_GROUP_STYLE), style);\n    return (react_default.a.createElement(\"div\", { style: combinedStyle }, 'items' in group &&\n        group.items.map(item => (react_default.a.createElement(ItemRenderer, { key: `legend-item-${group.field}-${item.input}`, group: group, item: item, MarkRenderer: ItemMarkRenderer, LabelRenderer: ItemLabelRenderer })))));\n}\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/preset-chart-xy/src/components/legend/DefaultLegend.tsx\n\n\nconst LEGEND_CONTAINER_STYLE = {\n    display: 'flex',\n    flexBasis: 'auto',\n    flexGrow: 1,\n    flexShrink: 1,\n    maxHeight: 100,\n    overflowY: 'auto',\n    position: 'relative',\n};\nclass DefaultLegend_DefaultLegend extends react[\"PureComponent\"] {\n    render() {\n        const { groups, LegendGroupRenderer = DefaultLegendGroupRenderer, LegendItemRenderer, LegendItemMarkRenderer, LegendItemLabelRenderer, style, } = this.props;\n        const combinedStyle = typeof style === 'undefined'\n            ? LEGEND_CONTAINER_STYLE\n            : Object.assign(Object.assign({}, LEGEND_CONTAINER_STYLE), style);\n        return (react_default.a.createElement(\"div\", { style: combinedStyle }, groups\n            .filter(group => 'items' in group && group.items.length > 0)\n            .map(group => (react_default.a.createElement(LegendGroupRenderer, { key: group.field, group: group, ItemRenderer: LegendItemRenderer, ItemMarkRenderer: LegendItemMarkRenderer, ItemLabelRenderer: LegendItemLabelRenderer })))));\n    }\n}\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/preset-chart-xy/src/components/legend/createRenderLegend.tsx\n\n\nfunction createRenderLegend(encoder, data, props) {\n    if (encoder.hasLegend()) {\n        const { LegendRenderer = DefaultLegend_DefaultLegend, LegendGroupRenderer, LegendItemRenderer, LegendItemLabelRenderer, LegendItemMarkRenderer, } = props;\n        return () => (react_default.a.createElement(LegendRenderer, { groups: encoder.getLegendInformation(data), LegendGroupRenderer: LegendGroupRenderer, LegendItemRenderer: LegendItemRenderer, LegendItemMarkRenderer: LegendItemMarkRenderer, LegendItemLabelRenderer: LegendItemLabelRenderer }));\n    }\n    return undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1981\n")},2220:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ createEncoderFactory; });\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/reselect/es/index.js\nvar es = __webpack_require__(181);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/typeGuards/ChannelDef.js\nvar ChannelDef = __webpack_require__(1936);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/typeGuards/Base.js\nfunction isArray(maybeArray) {\n  return Array.isArray(maybeArray);\n}\nfunction isNotArray(maybeArray) {\n  return !Array.isArray(maybeArray);\n}\nfunction isDefined(value) {\n  return typeof value !== 'undefined' && value !== null;\n}\nfunction isEveryElementDefined(array) {\n  return array.every(isDefined);\n}\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-array/src/extent.js\nvar src_extent = __webpack_require__(290);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/types/scale/ScaleType.js\n// Modified from vega-lite\n// because vega-lite uses namespace which has issues with babel and typescript\nconst ScaleType = {\n  // Continuous - Quantitative\n  LINEAR: 'linear',\n  LOG: 'log',\n  POW: 'pow',\n  SQRT: 'sqrt',\n  SYMLOG: 'symlog',\n  // Continuous - Time\n  TIME: 'time',\n  UTC: 'utc',\n  // Discretizing scales\n  QUANTILE: 'quantile',\n  QUANTIZE: 'quantize',\n  THRESHOLD: 'threshold',\n  BIN_ORDINAL: 'bin-ordinal',\n  // Discrete scales\n  ORDINAL: 'ordinal',\n  POINT: 'point',\n  BAND: 'band'\n};\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/typeGuards/Channel.js\nfunction isX(channelType) {\n  return channelType === 'X' || channelType === 'XBand';\n}\nfunction isY(channelType) {\n  return channelType === 'Y' || channelType === 'YBand';\n}\nfunction isXOrY(channelType) {\n  return isX(channelType) || isY(channelType);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/utils/keys.js\n/**\n * This is a stricter version of Object.keys but with better types.\n * See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\n */\nconst keys = Object.keys;\n/* harmony default export */ var utils_keys = (keys);\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/dateTimeToTimestamp.js\n// Modified from vega-lite version\n// and remove unnecessary dependency\n\n/* eslint-disable no-param-reassign */\n\n/* eslint-disable no-negated-condition */\n\n/**\n * Internal Object for defining datetime expressions.\n * This is an expression version of DateTime.\n * If both month and quarter are provided, month has higher precedence.\n * `day` cannot be combined with other date.\n */\n\nfunction invalidTimeUnit(unitName, value) {\n  return \"Invalid \" + unitName + \": \" + String(value) + \".\";\n}\n/*\n * A designated year that starts on Sunday.\n */\n\n\nconst SUNDAY_YEAR = 2006;\nconst MONTHS = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\nconst SHORT_MONTHS = MONTHS.map(m => m.slice(0, 3));\nconst DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\nconst SHORT_DAYS = DAYS.map(d => d.slice(0, 3));\n\nfunction isNumber(x) {\n  return typeof x === 'number';\n}\n/**\n * Returns whether the passed in value is a valid number.\n */\n\n\nfunction isNumeric(value) {\n  if (isNumber(value)) {\n    return true;\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  return !isNaN(value) && !isNaN(parseFloat(value));\n}\n\nfunction normalizeQuarter(q) {\n  if (isNumeric(q)) {\n    q = Number(q);\n  }\n\n  if (isNumber(q)) {\n    if (q > 4) {\n      // eslint-disable-next-line no-console\n      console.warn(invalidTimeUnit('quarter', q));\n    } // We accept 1-based quarter, so need to readjust to 0-based quarter\n\n\n    return q - 1;\n  } // Invalid quarter\n\n\n  throw new Error(invalidTimeUnit('quarter', q));\n}\nfunction normalizeMonth(m) {\n  if (isNumeric(m)) {\n    m = Number(m);\n  }\n\n  if (isNumber(m)) {\n    // We accept 1-based month, so need to readjust to 0-based month\n    return m - 1;\n  }\n\n  const lowerM = m.toLowerCase();\n  const monthIndex = MONTHS.indexOf(lowerM);\n\n  if (monthIndex !== -1) {\n    return monthIndex; // 0 for january, ...\n  }\n\n  const shortM = lowerM.slice(0, 3);\n  const shortMonthIndex = SHORT_MONTHS.indexOf(shortM);\n\n  if (shortMonthIndex !== -1) {\n    return shortMonthIndex;\n  } // Invalid month\n\n\n  throw new Error(invalidTimeUnit('month', m));\n}\nfunction normalizeDay(d) {\n  if (isNumeric(d)) {\n    d = Number(d);\n  }\n\n  if (isNumber(d)) {\n    // mod so that this can be both 0-based where 0 = sunday\n    // and 1-based where 7=sunday\n    return d % 7;\n  }\n\n  const lowerD = d.toLowerCase();\n  const dayIndex = DAYS.indexOf(lowerD);\n\n  if (dayIndex !== -1) {\n    return dayIndex; // 0 for january, ...\n  }\n\n  const shortD = lowerD.slice(0, 3);\n  const shortDayIndex = SHORT_DAYS.indexOf(shortD);\n\n  if (shortDayIndex !== -1) {\n    return shortDayIndex;\n  } // Invalid day\n\n\n  throw new Error(invalidTimeUnit('day', d));\n}\n/**\n * @param d the date.\n * @param normalize whether to normalize quarter, month, day. This should probably be true if d is a DateTime.\n * @returns array of date time parts [year, month, day, hours, minutes, seconds, milliseconds]\n */\n\nfunction dateTimeParts(d, normalize) {\n  const parts = [];\n\n  if (normalize && d.day !== undefined) {\n    if (utils_keys(d).length > 1) {\n      d = { ...d\n      };\n      delete d.day;\n    }\n  }\n\n  if (d.year !== undefined) {\n    parts.push(d.year);\n  } else if (d.day !== undefined) {\n    // Set year to 2006 for working with day since January 1 2006 is a Sunday\n    parts.push(SUNDAY_YEAR);\n  } else {\n    parts.push(0);\n  }\n\n  if (d.month !== undefined) {\n    const month = normalize ? normalizeMonth(d.month) : d.month;\n    parts.push(month);\n  } else if (d.quarter !== undefined) {\n    const quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;\n    parts.push(isNumber(quarter) ? quarter * 3 : quarter + \"*3\");\n  } else {\n    parts.push(0); // months start at zero in JS\n  }\n\n  if (d.date !== undefined) {\n    parts.push(d.date);\n  } else if (d.day !== undefined) {\n    // HACK: Day only works as a standalone unit\n    // This is only correct because we always set year to 2006 for day\n    const day = normalize ? normalizeDay(d.day) : d.day;\n    parts.push(isNumber(day) ? day + 1 : day + \"+1\");\n  } else {\n    parts.push(1); // Date starts at 1 in JS\n  }\n\n  ['hours', 'minutes', 'seconds', 'milliseconds'].forEach(timeUnit => {\n    const unit = d[timeUnit];\n    parts.push(typeof unit === 'undefined' ? 0 : unit);\n  });\n  return parts;\n}\n/**\n * @param d the date time.\n * @returns the timestamp.\n */\n\nfunction dateTimeToTimestamp(d) {\n  const parts = dateTimeParts(d, true);\n\n  if (d.utc) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return Number(new Date(Date.UTC(...parts)));\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  return Number(new Date(...parts));\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/parseDateTime.js\n\nfunction parseDateTime(dateTime) {\n  if (typeof dateTime === 'number' || typeof dateTime === 'string') {\n    return new Date(dateTime);\n  }\n\n  return new Date(dateTimeToTimestamp(dateTime));\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/utils/inferElementTypeFromUnionOfArrayTypes.js\n/**\n * Type workaround for https://github.com/Microsoft/TypeScript/issues/7294#issuecomment-465794460\n * to avoid error \"Cannot invoke an expression whose type lacks a call signature\"\n * when using array.map\n */\nfunction inferElementTypeFromUnionOfArrayTypes(array) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return array;\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/typeGuards/DateTime.js\n// eslint-disable-next-line import/prefer-default-export\nfunction isDateTime(o) {\n  return !!o && !(o instanceof Date) && typeof o !== 'string' && typeof o !== 'boolean' && typeof o !== 'number' && ('year' in o && o.year != null || 'quarter' in o && o.quarter != null || 'month' in o && o.month != null || 'date' in o && o.date != null || 'day' in o && o.day != null || 'hours' in o && o.hours != null || 'minutes' in o && o.minutes != null || 'seconds' in o && o.seconds != null || 'milliseconds' in o && o.milliseconds != null);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/format/fallbackFormatter.js\nfunction fallbackFormatter(v) {\n  return \"\" + v;\n}\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/options/Encodable.js\nvar Encodable = __webpack_require__(1207);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/format/createFormatter.js\n\n\nfunction createFormatter({\n  formatType,\n  format,\n  formatInLocalTime\n}) {\n  if (formatType === 'time') {\n    const formatter = Encodable[\"a\" /* default */].resolveTimeFormat({\n      format,\n      formatInLocalTime\n    });\n    return value => formatter(value);\n  }\n\n  if (formatType === 'number' || typeof format !== 'undefined' && format.length > 0) {\n    const formatter = Encodable[\"a\" /* default */].resolveNumberFormat(format);\n    return value => formatter(value);\n  }\n\n  return fallbackFormatter;\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/encoders/ChannelEncoderAxis.js\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nclass ChannelEncoderAxis_ChannelEncoderAxis {\n  constructor(channelEncoder) {\n    _defineProperty(this, \"channelEncoder\", void 0);\n\n    _defineProperty(this, \"config\", void 0);\n\n    _defineProperty(this, \"formatValue\", void 0);\n\n    this.channelEncoder = channelEncoder;\n    this.config = channelEncoder.definition.axis;\n    this.formatValue = createFormatter(this.config);\n  }\n\n  getTitle() {\n    return this.config.title;\n  }\n\n  hasTitle() {\n    const {\n      title\n    } = this.config;\n    return title !== null && typeof title !== 'undefined' && title !== '';\n  }\n\n  getTickLabels() {\n    const {\n      tickCount,\n      values\n    } = this.config;\n\n    if (typeof values !== 'undefined') {\n      return inferElementTypeFromUnionOfArrayTypes(values).map(v => this.formatValue(isDateTime(v) ? parseDateTime(v) : v));\n    }\n\n    const {\n      scale\n    } = this.channelEncoder;\n\n    if (scale && 'domain' in scale) {\n      const ticks = 'ticks' in scale ? scale.ticks(tickCount) : scale.domain();\n      return ticks.map(this.formatValue);\n    }\n\n    return [];\n  }\n\n}\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/lodash.get/index.js\nvar lodash_get = __webpack_require__(1209);\nvar lodash_get_default = /*#__PURE__*/__webpack_require__.n(lodash_get);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/createGetterFromChannelDef.js\n\n\nfunction createGetterFromChannelDef(definition) {\n  if (Object(ChannelDef[\"c\" /* isValueDef */])(definition)) {\n    return () => definition.value;\n  }\n\n  if (typeof definition.field !== 'undefined') {\n    return x => lodash_get_default()(x, definition.field);\n  }\n\n  return () => undefined;\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/utils/isDisabled.js\nfunction isDisabled(config) {\n  return config === false || config === null;\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/utils/isEnabled.js\n\nfunction isEnabled(config) {\n  return !isDisabled(config);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/fillers/expandLabelOverlapStrategy.js\n\nconst STRATEGY_FLAT = {\n  strategy: 'flat'\n};\nconst STRATEGY_ROTATE = {\n  labelAngle: 40,\n  strategy: 'rotate'\n};\nfunction expandLabelOverlapStrategy(channelType, labelOverlap = 'auto') {\n  let output;\n\n  switch (labelOverlap) {\n    case 'flat':\n      output = STRATEGY_FLAT;\n      break;\n\n    case 'rotate':\n      output = STRATEGY_ROTATE;\n      break;\n\n    case 'auto':\n      output = isX(channelType) ? STRATEGY_ROTATE : STRATEGY_FLAT;\n      break;\n\n    default:\n      output = labelOverlap;\n      break;\n  }\n\n  return { ...output\n  };\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/scaleCategories.js\n // Grouped by domain and range\n\nconst continuousToContinuousScaleTypes = [ScaleType.LINEAR, ScaleType.POW, ScaleType.SQRT, ScaleType.SYMLOG, ScaleType.LOG, ScaleType.TIME, ScaleType.UTC];\nconst continuousToContinuousScaleTypesSet = new Set(continuousToContinuousScaleTypes);\nconst continuousToDiscreteScaleTypes = [ScaleType.QUANTILE, ScaleType.QUANTIZE, ScaleType.THRESHOLD];\nconst continuousToDiscreteScaleTypesSet = new Set(continuousToDiscreteScaleTypes); // Grouped by Domain\n\nconst continuousDomainScaleTypes = continuousToContinuousScaleTypes.concat(continuousToDiscreteScaleTypes);\nconst continuousDomainScaleTypesSet = new Set(continuousDomainScaleTypes);\nconst discreteDomainScaleTypes = [ScaleType.ORDINAL, ScaleType.BIN_ORDINAL, ScaleType.POINT, ScaleType.BAND];\nconst discreteDomainScaleTypesSet = new Set(discreteDomainScaleTypes); // Three broad categories\n\nconst continuousScaleTypes = continuousToContinuousScaleTypes;\nconst continuousScaleTypesSet = continuousToContinuousScaleTypesSet;\nconst discreteScaleTypes = [ScaleType.BAND, ScaleType.POINT, ScaleType.ORDINAL];\nconst discreteScaleTypesSet = new Set(discreteScaleTypes);\nconst discretizingScaleTypes = [ScaleType.BIN_ORDINAL, ScaleType.QUANTILE, ScaleType.QUANTIZE, ScaleType.THRESHOLD];\nconst discretizingScaleTypesSet = new Set(discretizingScaleTypes); // Others\n\nconst timeScaleTypes = [ScaleType.TIME, ScaleType.UTC];\nconst timeScaleTypesSet = new Set(timeScaleTypes);\nconst allScaleTypes = [ScaleType.LINEAR, ScaleType.LOG, ScaleType.POW, ScaleType.SQRT, ScaleType.SYMLOG, ScaleType.TIME, ScaleType.UTC, ScaleType.QUANTILE, ScaleType.QUANTIZE, ScaleType.THRESHOLD, ScaleType.BIN_ORDINAL, ScaleType.ORDINAL, ScaleType.POINT, ScaleType.BAND];\nconst allScaleTypesSet = new Set(allScaleTypes);\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/fillers/completeAxisConfig.js\n\n\n\n\n\n\nfunction isChannelDefWithAxisSupport(channelType, channelDef) {\n  return Object(ChannelDef[\"b\" /* isTypedFieldDef */])(channelDef) && isXOrY(channelType);\n}\n\nfunction completeAxisConfig(channelType, channelDef) {\n  if (isChannelDefWithAxisSupport(channelType, channelDef) && isEnabled(channelDef.axis)) {\n    const axis = channelDef.axis === true || typeof channelDef.axis === 'undefined' ? {} : channelDef.axis;\n    const isXChannel = isX(channelType);\n    const {\n      format = channelDef.format,\n      formatType = channelDef.formatType,\n      formatInLocalTime = channelDef.formatInLocalTime,\n      labelAngle = 0,\n      labelFlush,\n      labelOverlap,\n      labelPadding = 4,\n      orient = isXChannel ? 'bottom' : 'left',\n      tickCount = 5,\n      ticks = true,\n      title = channelDef.title,\n      titlePadding = 4\n    } = axis;\n    const output = { ...axis,\n      format,\n      formatType,\n      labelAngle,\n      labelFlush: typeof labelFlush === 'undefined' ? channelDef.scale && typeof channelDef.scale.type !== 'undefined' && continuousToContinuousScaleTypesSet.has(channelDef.scale.type) : labelFlush,\n      labelOverlap: expandLabelOverlapStrategy(channelType, labelOverlap),\n      labelPadding,\n      orient,\n      tickCount,\n      ticks,\n      title,\n      titlePadding\n    };\n\n    if (typeof formatInLocalTime !== 'undefined') {\n      output.formatInLocalTime = formatInLocalTime;\n    }\n\n    return output;\n  }\n\n  return false;\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/fillers/completeFormatConfig.js\nfunction completeFormatConfig(config) {\n  const {\n    formatType,\n    formatInLocalTime,\n    format,\n    type,\n    scaleType\n  } = config;\n  let resolvedFormatType;\n\n  if (typeof formatType !== 'undefined') {\n    resolvedFormatType = formatType;\n  } else if (type === 'quantitative') {\n    resolvedFormatType = 'number';\n  } else if (type === 'temporal' || scaleType === 'time' || scaleType === 'utc') {\n    resolvedFormatType = 'time';\n  } else if (typeof format !== 'undefined' && format.length > 0) {\n    resolvedFormatType = 'number';\n  }\n\n  if (resolvedFormatType === 'time') {\n    return {\n      formatType: 'time',\n      formatInLocalTime: formatInLocalTime || typeof formatInLocalTime === 'undefined' && scaleType === 'time',\n      format\n    };\n  }\n\n  return {\n    formatType: resolvedFormatType,\n    format\n  };\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/fillers/completeLegendConfig.js\n\nfunction completeLegendConfig(channelType, channelDef) {\n  if ('legend' in channelDef && channelDef.legend !== undefined) {\n    return channelDef.legend;\n  }\n\n  return isXOrY(channelType) || channelType === 'Text' ? false : {};\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/fillers/inferScaleType.js\n\n/**\n * Sometimes scale type is not specified but can be inferred\n * from other fields.\n * See https://vega.github.io/vega-lite/docs/scale.html\n * @param channelType type of the channel\n * @param fieldType type of the field\n * @param bin is value binned\n */\n\nfunction inferScaleType(channelType, fieldType, bin = false) {\n  if (fieldType === 'nominal' || fieldType === 'ordinal') {\n    switch (channelType) {\n      // For positional (x and y) ordinal and ordinal fields,\n      // \"point\" is the default scale type for all marks\n      // except bar and rect marks, which use \"band\" scales.\n      // https://vega.github.io/vega-lite/docs/scale.html\n      case 'XBand':\n      case 'YBand':\n        return ScaleType.BAND;\n\n      case 'X':\n      case 'Y':\n      case 'Numeric':\n        return ScaleType.POINT;\n\n      case 'Color':\n      case 'Category':\n        return ScaleType.ORDINAL;\n\n      default:\n    }\n  } else if (fieldType === 'quantitative') {\n    switch (channelType) {\n      case 'XBand':\n      case 'YBand':\n      case 'X':\n      case 'Y':\n      case 'Numeric':\n        return ScaleType.LINEAR;\n\n      case 'Color':\n        return bin ? ScaleType.BIN_ORDINAL : ScaleType.LINEAR;\n\n      default:\n    }\n  } else if (fieldType === 'temporal') {\n    switch (channelType) {\n      case 'XBand':\n      case 'YBand':\n      case 'X':\n      case 'Y':\n      case 'Numeric':\n        return ScaleType.UTC;\n\n      case 'Color':\n        return ScaleType.LINEAR;\n\n      default:\n    }\n  }\n\n  return undefined;\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/isPropertySupportedByScaleType.js\n\n\nconst pointOrBand = [ScaleType.POINT, ScaleType.BAND];\nconst pointOrBandSet = new Set(pointOrBand);\nconst exceptPointOrBand = allScaleTypes.filter(type => !pointOrBandSet.has(type));\nconst exceptPointOrBandSet = new Set(exceptPointOrBand);\nconst continuousOrPointOrBandSet = new Set(continuousScaleTypes.concat(pointOrBand));\nconst zeroSet = new Set(continuousDomainScaleTypes); // log scale cannot have zero value\n\nzeroSet.delete(ScaleType.LOG); // zero is not meaningful for time\n\nzeroSet.delete(ScaleType.TIME);\nzeroSet.delete(ScaleType.UTC); // threshold requires custom domain so zero does not matter\n\nzeroSet.delete(ScaleType.THRESHOLD); // quantile depends on distribution so zero does not matter\n\nzeroSet.delete(ScaleType.QUANTILE);\nconst supportedScaleTypes = {\n  align: pointOrBandSet,\n  base: new Set([ScaleType.LOG]),\n  clamp: continuousScaleTypesSet,\n  constant: new Set([ScaleType.SYMLOG]),\n  domain: allScaleTypesSet,\n  exponent: new Set([ScaleType.POW]),\n  interpolate: exceptPointOrBandSet,\n  nice: new Set(continuousScaleTypes.concat([ScaleType.QUANTIZE, ScaleType.THRESHOLD])),\n  padding: continuousOrPointOrBandSet,\n  paddingInner: new Set([ScaleType.BAND]),\n  paddingOuter: pointOrBandSet,\n  range: allScaleTypesSet,\n  reverse: allScaleTypesSet,\n  round: continuousOrPointOrBandSet,\n  scheme: exceptPointOrBandSet,\n  type: allScaleTypesSet,\n  unknown: new Set([ScaleType.ORDINAL]),\n  zero: zeroSet\n};\nfunction isPropertySupportedByScaleType(property, scaleType) {\n  return supportedScaleTypes[property].has(scaleType);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/typeGuards/ScaleConfig.js\n\n\nfunction isContinuousScaleConfig(config) {\n  return continuousScaleTypesSet.has(config.type);\n}\nfunction isDiscretizingScaleConfig(config) {\n  return discretizingScaleTypesSet.has(config.type);\n}\nfunction isDiscreteScaleConfig(config) {\n  return discreteScaleTypesSet.has(config.type);\n}\nfunction isScaleConfigWithZero(config) {\n  return isPropertySupportedByScaleType('zero', config.type);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/fillers/completeScaleConfig.js\n\n\n\n\n\nfunction completeScaleConfig(channelType, channelDef) {\n  if (Object(ChannelDef[\"b\" /* isTypedFieldDef */])(channelDef) && isEnabled(channelDef.scale)) {\n    const {\n      scale = {},\n      type,\n      bin\n    } = channelDef;\n    const {\n      type: scaleType = inferScaleType(channelType, type, bin)\n    } = scale;\n\n    if (typeof scaleType === 'undefined') {\n      return false;\n    } // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\n\n    const filledScale = { ...scale,\n      type: scaleType\n    };\n\n    if (isContinuousScaleConfig(filledScale)) {\n      if (typeof filledScale.nice === 'undefined') {\n        filledScale.nice = !timeScaleTypesSet.has(scaleType);\n      }\n\n      if (typeof filledScale.clamp === 'undefined') {\n        filledScale.clamp = true;\n      }\n    }\n\n    if (isScaleConfigWithZero(filledScale) && typeof filledScale.zero === 'undefined') {\n      filledScale.zero = true;\n    }\n\n    return filledScale;\n  }\n\n  return false;\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/fillers/inferFieldType.js\n\nconst temporalFieldNames = new Set(['time', 'date', 'datetime', 'timestamp']);\nfunction inferFieldType(channelType, field = '') {\n  if (isXOrY(channelType) || channelType === 'Numeric') {\n    return temporalFieldNames.has(field.toLowerCase()) ? 'temporal' : 'quantitative';\n  }\n\n  return 'nominal';\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/fillers/completeChannelDef.js\n\n\n\n\n\n\nfunction completeChannelDef(channelType, channelDef) {\n  var _channelDef$title;\n\n  if (Object(ChannelDef[\"c\" /* isValueDef */])(channelDef)) {\n    return { ...channelDef,\n      axis: false,\n      legend: false,\n      scale: false,\n      title: ''\n    };\n  } // Fill top-level properties\n\n\n  const copy = { ...channelDef,\n    title: Object(ChannelDef[\"a\" /* isFieldDef */])(channelDef) ? (_channelDef$title = channelDef.title) != null ? _channelDef$title : channelDef.field : '',\n    type: Object(ChannelDef[\"b\" /* isTypedFieldDef */])(channelDef) ? channelDef.type : inferFieldType(channelType, channelDef.field)\n  }; // Scale needs the top-level properties to be filled.\n\n  const scale = completeScaleConfig(channelType, copy); // Format needs scale.\n\n  const format = completeFormatConfig({ ...channelDef,\n    scaleType: scale ? scale.type : undefined\n  });\n  const copy2 = { ...copy,\n    ...format,\n    scale\n  }; // These need scale and format\n\n  const axis = completeAxisConfig(channelType, copy2);\n  const legend = completeLegendConfig(channelType, copy2);\n  return { ...copy2,\n    axis,\n    legend\n  };\n}\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/linear.js\nvar linear = __webpack_require__(73);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/log.js\nvar log = __webpack_require__(272);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/pow.js\nvar pow = __webpack_require__(219);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/time.js + 3 modules\nvar time = __webpack_require__(449);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/utcTime.js + 3 modules\nvar utcTime = __webpack_require__(1113);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/quantile.js\nvar quantile = __webpack_require__(1002);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/quantize.js\nvar quantize = __webpack_require__(1003);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/threshold.js\nvar threshold = __webpack_require__(1004);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/ordinal.js\nvar ordinal = __webpack_require__(340);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/band.js + 1 modules\nvar band = __webpack_require__(610);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/symlog.js\nvar symlog = __webpack_require__(273);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/createScaleFromScaleType.js\n\n\nfunction createScaleFromScaleType(type) {\n  switch (type) {\n    case ScaleType.LINEAR:\n      return Object(linear[\"a\" /* default */])();\n\n    case ScaleType.LOG:\n      return Object(log[\"a\" /* default */])();\n\n    case ScaleType.POW:\n      return Object(pow[\"a\" /* default */])();\n\n    case ScaleType.SQRT:\n      return Object(pow[\"c\" /* sqrt */])();\n\n    case ScaleType.TIME:\n      return Object(time[\"b\" /* default */])();\n\n    case ScaleType.UTC:\n      return Object(utcTime[\"a\" /* default */])();\n\n    case ScaleType.QUANTILE:\n      return Object(quantile[\"a\" /* default */])();\n\n    case ScaleType.QUANTIZE:\n      return Object(quantize[\"a\" /* default */])();\n\n    case ScaleType.THRESHOLD:\n      return Object(threshold[\"a\" /* default */])();\n\n    case ScaleType.ORDINAL:\n      return Object(ordinal[\"a\" /* default */])();\n\n    case ScaleType.POINT:\n      return Object(band[\"b\" /* point */])();\n\n    case ScaleType.BAND:\n      return Object(band[\"a\" /* default */])();\n\n    case ScaleType.SYMLOG:\n      return Object(symlog[\"a\" /* default */])();\n\n    case ScaleType.BIN_ORDINAL:\n      // TODO: Pending scale.bins implementation\n      throw new Error(\"\\\"type = \" + type + \"\\\" is not supported yet.\");\n\n    default:\n      return Object(linear[\"a\" /* default */])();\n  }\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyAlign.js\nfunction applyAlign(config, scale) {\n  if ('align' in config && typeof config.align !== 'undefined' && 'align' in scale) {\n    scale.align(config.align);\n  }\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyBase.js\nfunction applyBase(config, scale) {\n  if ('base' in config && typeof config.base !== 'undefined' && 'base' in scale) {\n    scale.base(config.base);\n  }\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyClamp.js\nfunction applyClamp(config, scale) {\n  if ('clamp' in config && config.clamp === true && 'clamp' in scale) {\n    scale.clamp(config.clamp);\n  }\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyExponent.js\nfunction applyExponent(config, scale) {\n  if ('exponent' in config && typeof config.exponent !== 'undefined' && 'exponent' in scale) {\n    scale.exponent(config.exponent);\n  }\n}\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/day.js\nvar day = __webpack_require__(593);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/hour.js\nvar hour = __webpack_require__(592);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/minute.js\nvar minute = __webpack_require__(591);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/month.js\nvar month = __webpack_require__(594);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/second.js\nvar second = __webpack_require__(339);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/week.js\nvar week = __webpack_require__(81);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/year.js\nvar year = __webpack_require__(595);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/utcDay.js\nvar utcDay = __webpack_require__(598);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/utcHour.js\nvar utcHour = __webpack_require__(597);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/utcMinute.js\nvar utcMinute = __webpack_require__(596);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/utcMonth.js\nvar utcMonth = __webpack_require__(599);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/utcWeek.js\nvar utcWeek = __webpack_require__(82);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/utcYear.js\nvar utcYear = __webpack_require__(600);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyNice.js\n\n\nconst localTimeIntervals = {\n  day: day[\"b\" /* default */],\n  hour: hour[\"a\" /* default */],\n  minute: minute[\"a\" /* default */],\n  month: month[\"a\" /* default */],\n  second: second[\"a\" /* default */],\n  week: week[\"g\" /* sunday */],\n  year: year[\"a\" /* default */]\n};\nconst utcIntervals = {\n  day: utcDay[\"a\" /* default */],\n  hour: utcHour[\"a\" /* default */],\n  minute: utcMinute[\"a\" /* default */],\n  month: utcMonth[\"a\" /* default */],\n  second: second[\"a\" /* default */],\n  week: utcWeek[\"g\" /* utcSunday */],\n  year: utcYear[\"a\" /* default */]\n};\nfunction applyNice(config, scale) {\n  if ('nice' in config && typeof config.nice !== 'undefined' && 'nice' in scale) {\n    const {\n      nice\n    } = config;\n\n    if (typeof nice === 'boolean') {\n      if (nice) {\n        scale.nice();\n      }\n    } else if (typeof nice === 'number') {\n      scale.nice(nice);\n    } else {\n      const timeScale = scale;\n      const {\n        type\n      } = config;\n\n      if (typeof nice === 'string') {\n        timeScale.nice(type === ScaleType.UTC ? utcIntervals[nice] : localTimeIntervals[nice]);\n      } else {\n        const {\n          interval,\n          step\n        } = nice;\n        const parsedInterval = (type === ScaleType.UTC ? utcIntervals[interval] : localTimeIntervals[interval]).every(step);\n\n        if (parsedInterval !== null) {\n          timeScale.nice(parsedInterval);\n        }\n      }\n    }\n  }\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/typeGuards/Scale.js\n\nfunction isContinuousScale(scale, scaleType) {\n  return scale && continuousScaleTypesSet.has(scaleType);\n}\nfunction isDiscretizingScale(scale, scaleType) {\n  return scale && discretizingScaleTypesSet.has(scaleType);\n}\nfunction isDiscreteScale(scale, scaleType) {\n  return scale && discreteScaleTypesSet.has(scaleType);\n}\nfunction isTimeScale(scale, scaleType) {\n  return scale && timeScaleTypesSet.has(scaleType);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyZero.js\n\nfunction applyZero(config, scale) {\n  if ('zero' in config && config.zero === true && isContinuousScale(scale, config.type)) {\n    const domain = scale.domain();\n    const [a, b] = domain;\n    const isDescending = b < a;\n    const [min, max] = isDescending ? [b, a] : [a, b];\n    const domainWithZero = [Math.min(0, min), Math.max(0, max)];\n    scale.domain(isDescending ? domainWithZero.reverse() : domainWithZero);\n  }\n}\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-interpolate/src/lab.js\nvar lab = __webpack_require__(1110);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-interpolate/src/hcl.js\nvar hcl = __webpack_require__(602);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-interpolate/src/hsl.js\nvar hsl = __webpack_require__(601);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-interpolate/src/cubehelix.js + 1 modules\nvar cubehelix = __webpack_require__(611);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-interpolate/src/rgb.js\nvar rgb = __webpack_require__(221);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/createColorInterpolator.js\n\nconst interpolatorMap = {\n  lab: lab[\"a\" /* default */],\n  hcl: hcl[\"a\" /* default */],\n  'hcl-long': hcl[\"b\" /* hclLong */],\n  hsl: hsl[\"a\" /* default */],\n  'hsl-long': hsl[\"b\" /* hslLong */],\n  cubehelix: cubehelix[\"b\" /* default */],\n  'cubehelix-long': cubehelix[\"a\" /* cubehelixLong */],\n  rgb: rgb[\"a\" /* default */]\n};\nfunction createColorInterpolator(interpolate) {\n  switch (interpolate) {\n    case 'lab':\n    case 'hcl':\n    case 'hcl-long':\n    case 'hsl':\n    case 'hsl-long':\n    case 'cubehelix':\n    case 'cubehelix-long':\n    case 'rgb':\n      return interpolatorMap[interpolate];\n\n    default:\n  }\n\n  const {\n    type,\n    gamma\n  } = interpolate;\n  const interpolator = interpolatorMap[type];\n  return typeof gamma === 'undefined' ? interpolator : interpolator.gamma(gamma);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyInterpolate.js\n\nfunction applyInterpolate(config, scale) {\n  if ('interpolate' in config && typeof config.interpolate !== 'undefined' && 'interpolate' in scale) {\n    scale.interpolate(createColorInterpolator(config.interpolate));\n  }\n}\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-interpolate/src/round.js\nvar round = __webpack_require__(1109);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyRound.js\n\nfunction applyRound(config, scale) {\n  if ('round' in config && config.round === true) {\n    const roundableScale = scale;\n\n    if ('round' in roundableScale) {\n      roundableScale.round(config.round);\n    } else {\n      roundableScale.interpolate(round[\"a\" /* default */]);\n    }\n  }\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/domain/parseContinuousDomain.js\n\n/**\n * Convert each element in the array into\n * - Date (for time scales)\n * - number (for other continuous scales)\n * @param domain\n * @param scaleType\n */\n\nfunction parseContinuousDomain(domain, scaleType) {\n  if (timeScaleTypesSet.has(scaleType)) {\n    return domain.filter(d => typeof d !== 'boolean').map(d => typeof d === 'string' || typeof d === 'number' ? new Date(d) : d);\n  }\n\n  return domain.map(d => typeof d === 'string' || typeof d === 'boolean' ? Number(d) : d);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/domain/parseDiscreteDomain.js\n/**\n * Discrete domains are converted into string[]\n * when using D3 scales\n * @param domain\n */\nfunction parseDiscreteDomain(domain) {\n  return domain.map(d => \"\" + d);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/utils/combineCategories.js\n/**\n * Combine two arrays into a unique list\n * by keeping the order the fixedCategories\n * and append new categories at the end.\n * @param fixedCategories\n * @param inputCategories\n */\nfunction combineCategories(fixedCategories, inputCategories = []) {\n  if (fixedCategories.length === 0) {\n    return inputCategories;\n  }\n\n  const fixedSet = new Set(fixedCategories);\n  return fixedCategories.concat(inputCategories.filter(d => !fixedSet.has(d)));\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/utils/combineContinuousDomains.js\n\n/**\n * Combine two continuous domain and ensure that the output\n * does not go beyond fixedDomain\n * @param bounds\n * @param dataDomain\n */\n\nfunction combineContinuousDomains(bounds, dataDomain) {\n  if (bounds.length > 0 && isEveryElementDefined(bounds)) {\n    return bounds;\n  }\n\n  if (bounds.length === 2 && dataDomain.length === 2 && bounds.filter(isDefined).length > 0) {\n    const [boundMin, boundMax] = bounds;\n    const [dataMin, dataMax] = dataDomain;\n    let min = dataMin;\n\n    if (isDefined(boundMin)) {\n      min = boundMin.valueOf() > dataMin.valueOf() ? boundMin : dataMin;\n    }\n\n    let max = dataMax;\n\n    if (isDefined(boundMax)) {\n      max = boundMax.valueOf() < dataMax.valueOf() ? boundMax : dataMax;\n    }\n\n    return [min, max];\n  }\n\n  return dataDomain;\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/utils/removeUndefinedAndNull.js\nfunction removeUndefinedAndNull(array) {\n  return array.filter(x => typeof x !== 'undefined' && x !== null);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/parseDateTimeIn.js\n\n\n/**\n * Only parse elements that are DateTime to Date.\n * Leave the rest alone.\n * @param array\n */\n\nfunction parseDateTimeIn(array) {\n  return array.map(d => !(d instanceof Date) && isDateTime(d) ? parseDateTime(d) : d);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyDomain.js\n\n\n\n\n\n\n\n\n\nfunction createOrderFunction(reverse) {\n  return reverse ? array => array.concat().reverse() : array => array;\n}\n\nfunction isCompleteDomain(domain) {\n  return domain.length !== 2 || domain[0] != null && domain[1] != null;\n}\n\nfunction applyDomain(config, scale,\n/** domain from dataset */\ndataDomain) {\n  const {\n    reverse,\n    type\n  } = config;\n  const order = createOrderFunction(reverse);\n\n  if (isContinuousScale(scale, type) && isContinuousScaleConfig(config) || isDiscretizingScale(scale, type) && isDiscretizingScaleConfig(config)) {\n    // For continuous and discretizing scales\n    if (config.domain) {\n      // If config.domain is specified\n      if (isCompleteDomain(config.domain)) {\n        // If the config.domain is completed\n        // ignores the dataDomain\n        scale.domain(order(parseDateTimeIn(config.domain)));\n      } else if (dataDomain) {\n        // If it is incompleted, then try to combine\n        // with the dataDomain\n        scale.domain(order(combineContinuousDomains(parseContinuousDomain(parseDateTimeIn(config.domain), type), parseContinuousDomain(removeUndefinedAndNull(dataDomain), type))));\n      }\n    } else if (dataDomain) {\n      // If no config.domain then just use the dataDomain if any\n      scale.domain(order(parseContinuousDomain(removeUndefinedAndNull(dataDomain), type)));\n    }\n  } else if (isDiscreteScale(scale, type) && isDiscreteScaleConfig(config)) {\n    // For discrete scales\n    if (config.domain) {\n      const fixedDomain = parseDiscreteDomain(parseDateTimeIn(config.domain));\n      scale.domain(order(dataDomain ? combineCategories(fixedDomain, parseDiscreteDomain(dataDomain)) : fixedDomain));\n    } else if (dataDomain) {\n      // If no config.domain then just use the dataDomain if any\n      scale.domain(order(parseDiscreteDomain(dataDomain)));\n    }\n  }\n}\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@encodable/color/esm/scheme/wrappers/wrapColorScheme.js + 21 modules\nvar wrapColorScheme = __webpack_require__(446);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/typeGuards/SchemeParams.js\n// eslint-disable-next-line import/prefer-default-export\nfunction isSchemeParams(scheme) {\n  return Object.prototype.toString.call(scheme) !== '[object String]';\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyRange.js\n\n\n\n\nfunction applyRange(config, scale) {\n  const {\n    range,\n    domain\n  } = config;\n\n  if (typeof range === 'undefined') {\n    if ('scheme' in config && typeof config.scheme !== 'undefined') {\n      const {\n        scheme\n      } = config;\n      let name;\n      let count;\n\n      if (isContinuousScaleConfig(config) && domain) {\n        count = domain.length;\n      }\n\n      let extent;\n\n      if (isSchemeParams(scheme)) {\n        name = scheme.name;\n\n        if (scheme.count) {\n          count = scheme.count;\n        }\n\n        extent = scheme.extent;\n      } else {\n        name = scheme;\n      }\n\n      const schemeObject = Encodable[\"a\" /* default */].resolveColorScheme({\n        name,\n        type: 'sequential'\n      });\n\n      if (typeof schemeObject !== 'undefined' && schemeObject.type === 'sequential') {\n        const wrappedScheme = Object(wrapColorScheme[\"a\" /* default */])(schemeObject);\n        scale.range(wrappedScheme.getColors(count, extent));\n      }\n    }\n  } else {\n    // TODO: add type guard should fix this problem\n    // @ts-ignore\n    scale.range(range);\n  }\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyPadding.js\nfunction applyPadding(config, scale) {\n  if ('padding' in config && typeof config.padding !== 'undefined' && 'padding' in scale) {\n    scale.padding(config.padding);\n  }\n\n  if ('paddingInner' in config && typeof config.paddingInner !== 'undefined' && 'paddingInner' in scale) {\n    scale.paddingInner(config.paddingInner);\n  }\n\n  if ('paddingOuter' in config && typeof config.paddingOuter !== 'undefined' && 'paddingOuter' in scale) {\n    scale.paddingOuter(config.paddingOuter);\n  }\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/updateScale.js\n\n\n\n\n\n\n\n\n\n\n\nfunction updateScale(scale, config) {\n  // domain and range apply to all scales\n  applyDomain(config, scale);\n  applyRange(config, scale); // Sort other properties alphabetically.\n\n  applyAlign(config, scale);\n  applyBase(config, scale);\n  applyClamp(config, scale);\n  applyExponent(config, scale);\n  applyInterpolate(config, scale); // Nice depends on domain.\n\n  applyNice(config, scale);\n  applyPadding(config, scale);\n  applyRound(config, scale); // Zero depends on domain and nice.\n\n  applyZero(config, scale);\n  return scale;\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/createScale.js\n\n\n\n\n\n\n\nfunction createScale(config) {\n  const {\n    range\n  } = config; // Handle categorical color scales\n  // An ordinal scale without specified range\n  // is assumed to be a color scale.\n\n  if (config.type === ScaleType.ORDINAL && typeof range === 'undefined') {\n    const scheme = 'scheme' in config ? config.scheme : undefined;\n    const resolve = Encodable[\"a\" /* default */].getCategoricalColorScaleResolver();\n    let colorScale;\n\n    if (typeof scheme === 'undefined') {\n      colorScale = resolve({});\n    } else if (isSchemeParams(scheme)) {\n      colorScale = resolve(scheme);\n    } else {\n      colorScale = resolve({\n        name: scheme\n      });\n    }\n\n    const castedColorScale = colorScale;\n    applyDomain(config, castedColorScale);\n    return castedColorScale;\n  }\n\n  const scale = createScaleFromScaleType(config.type);\n  return updateScale(scale, config);\n}\n\n/* harmony default export */ var scale_createScale = (createScale);\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/utils/identity.js\nfunction identity(x) {\n  return x;\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/typeGuards/CompleteChannelDef.js\nfunction isCompleteValueDef(def) {\n  return 'value' in def;\n}\nfunction isCompleteFieldDef(def) {\n  return 'field' in def;\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/encoders/ChannelEncoder.js\nfunction ChannelEncoder_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass ChannelEncoder_ChannelEncoder {\n  constructor({\n    name,\n    channelType,\n    definition: originalDefinition\n  }) {\n    ChannelEncoder_defineProperty(this, \"name\", void 0);\n\n    ChannelEncoder_defineProperty(this, \"channelType\", void 0);\n\n    ChannelEncoder_defineProperty(this, \"originalDefinition\", void 0);\n\n    ChannelEncoder_defineProperty(this, \"definition\", void 0);\n\n    ChannelEncoder_defineProperty(this, \"scale\", void 0);\n\n    ChannelEncoder_defineProperty(this, \"axis\", void 0);\n\n    ChannelEncoder_defineProperty(this, \"getValue\", void 0);\n\n    ChannelEncoder_defineProperty(this, \"encodeFunc\", void 0);\n\n    ChannelEncoder_defineProperty(this, \"formatValue\", void 0);\n\n    ChannelEncoder_defineProperty(this, \"encodeValue\", (value, otherwise) => {\n      if (typeof otherwise !== 'undefined' && (value === null || typeof value === 'undefined')) {\n        return otherwise;\n      } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n      return this.encodeFunc(value);\n    });\n\n    ChannelEncoder_defineProperty(this, \"encodeDatum\", (datum, otherwise) => typeof otherwise === 'undefined' ? this.encodeValue(this.getValueFromDatum(datum)) : this.encodeValue(this.getValueFromDatum(datum), otherwise));\n\n    ChannelEncoder_defineProperty(this, \"formatDatum\", datum => this.formatValue(this.getValueFromDatum(datum)));\n\n    ChannelEncoder_defineProperty(this, \"getValueFromDatum\", (datum, otherwise) => {\n      const value = this.getValue(datum);\n      return otherwise !== undefined && (value === null || value === undefined) ? otherwise : value;\n    });\n\n    ChannelEncoder_defineProperty(this, \"getDomainFromDataset\", data => {\n      if (Object(ChannelDef[\"c\" /* isValueDef */])(this.definition)) {\n        const {\n          value\n        } = this.definition;\n        return [value];\n      }\n\n      const {\n        type\n      } = this.definition;\n\n      if (type === 'nominal' || type === 'ordinal') {\n        return Array.from(new Set(data.map(d => this.getValueFromDatum(d))));\n      }\n\n      if (type === 'quantitative') {\n        // Quantile scale needs all items\n        // because it treats domain as a discrete set of sample values\n        // for computing the quantiles\n        if (this.definition.scale && this.definition.scale.type === 'quantile') {\n          return data.map(d => this.getValueFromDatum(d));\n        }\n\n        const extent = Object(src_extent[\"a\" /* default */])(data, d => this.getValueFromDatum(d));\n        return typeof extent[0] === 'undefined' ? [0, 1] : extent;\n      }\n\n      if (type === 'temporal') {\n        const extent = Object(src_extent[\"a\" /* default */])(data, d => this.getValueFromDatum(d));\n        return typeof extent[0] === 'undefined' ? [0, 1] : extent;\n      }\n\n      return [];\n    });\n\n    this.name = name;\n    this.channelType = channelType;\n    this.originalDefinition = originalDefinition;\n    this.definition = completeChannelDef(this.channelType, originalDefinition);\n    this.getValue = createGetterFromChannelDef(this.definition);\n    this.formatValue = Object(ChannelDef[\"a\" /* isFieldDef */])(this.definition) ? createFormatter(this.definition) : fallbackFormatter;\n\n    if (this.definition.scale) {\n      const scale = scale_createScale(this.definition.scale); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      this.encodeFunc = value => scale(value);\n\n      this.scale = scale;\n    } else {\n      const {\n        definition\n      } = this;\n      this.encodeFunc = isCompleteValueDef(definition) ? () => definition.value : identity;\n    }\n\n    if (this.definition.axis) {\n      this.axis = new ChannelEncoderAxis_ChannelEncoderAxis(this);\n    }\n  }\n\n  getDomain() {\n    if (this.scale && 'domain' in this.scale) {\n      return this.scale.domain();\n    }\n\n    return [];\n  }\n\n  setDomain(domain) {\n    if (this.definition.scale !== false && this.scale && !this.hasCategoricalColorScale() && 'domain' in this.scale) {\n      const config = this.definition.scale;\n      applyDomain(config, this.scale, domain);\n      applyRange(config, this.scale);\n      applyZero(config, this.scale);\n      applyNice(config, this.scale);\n    }\n\n    return this;\n  }\n\n  setDomainFromDataset(data) {\n    return this.scale && 'domain' in this.scale ? this.setDomain(this.getDomainFromDataset(data)) : this;\n  }\n\n  getTitle() {\n    return this.definition.title;\n  }\n\n  isGroupBy() {\n    if (Object(ChannelDef[\"b\" /* isTypedFieldDef */])(this.definition)) {\n      const {\n        type\n      } = this.definition;\n      return this.channelType === 'Category' || this.channelType === 'Text' || this.channelType === 'Color' && (type === 'nominal' || type === 'ordinal') || isXOrY(this.channelType) && (type === 'nominal' || type === 'ordinal');\n    }\n\n    return false;\n  }\n\n  isX() {\n    return isX(this.channelType);\n  }\n\n  isXOrY() {\n    return isXOrY(this.channelType);\n  }\n\n  isY() {\n    return isY(this.channelType);\n  }\n\n  hasCategoricalColorScale() {\n    const config = this.definition.scale; // Scale type is ordinal with not given range\n    // (may have optional scheme)\n    // will become a categorical scale\n    // of named color scheme.\n    // A color scale from named color scheme may be shared among multiple components\n    // in the same namespace by default, so changing its domain affect all components.\n    // (Sounds like a bad idea.)\n    // This function is currently only being used to check\n    // whether to apply domain from dataset or not.\n    // An ordinal scale with user-specified color scheme as range array\n    // will return false from this function and be excluded from it.\n\n    return this.scale && config && config.type === ScaleType.ORDINAL && typeof config.range === 'undefined';\n  }\n\n  hasLegend() {\n    return this.definition.legend !== false;\n  }\n\n  hasValueDefinition() {\n    return isCompleteValueDef(this.definition);\n  }\n\n  hasFieldDefinition() {\n    return isCompleteFieldDef(this.definition);\n  }\n\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/encoders/Encoder.js\nfunction Encoder_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nclass Encoder_Encoder {\n  constructor({\n    channelTypes,\n    encoding\n  }) {\n    Encoder_defineProperty(this, \"encoding\", void 0);\n\n    Encoder_defineProperty(this, \"channelTypes\", void 0);\n\n    Encoder_defineProperty(this, \"channels\", void 0);\n\n    Encoder_defineProperty(this, \"legends\", void 0);\n\n    this.channelTypes = channelTypes;\n    this.encoding = encoding;\n    const channelNames = this.getChannelNames(); // Create channel encoders\n\n    const channels = {};\n    channelNames.forEach(name => {\n      const channelEncoding = encoding[name];\n\n      if (Array.isArray(channelEncoding)) {\n        const definitions = channelEncoding;\n        channels[name] = definitions.map((definition, i) => new ChannelEncoder_ChannelEncoder({\n          channelType: channelTypes[name],\n          definition,\n          name: name + \"[\" + i + \"]\"\n        }));\n      } else {\n        const definition = channelEncoding;\n        channels[name] = new ChannelEncoder_ChannelEncoder({\n          channelType: channelTypes[name],\n          definition,\n          name: name\n        });\n      }\n    });\n    this.channels = channels; // Group the channels that use the same field together\n    // so they can share the same legend.\n\n    this.legends = {};\n    channelNames.map(name => this.channels[name]).forEach(c => {\n      if (isNotArray(c) && c.hasLegend() && Object(ChannelDef[\"b\" /* isTypedFieldDef */])(c.definition)) {\n        const {\n          field\n        } = c.definition;\n        const channelEncoder = c;\n\n        if (this.legends[field]) {\n          this.legends[field].push(channelEncoder);\n        } else {\n          this.legends[field] = [channelEncoder];\n        }\n      }\n    });\n  }\n\n  getChannelNames() {\n    return Object.keys(this.channelTypes);\n  }\n\n  getChannelEncoders() {\n    return this.getChannelNames().flatMap(name => this.channels[name]);\n  }\n\n  getGroupBys() {\n    const fields = this.getChannelEncoders().filter(c => c.isGroupBy()).map(c => c.definition.field);\n    return Array.from(new Set(fields));\n  }\n\n  createLegendItemsFactory(field) {\n    const channelEncoders = this.getChannelEncoders().filter(e => isNotArray(e) && Object(ChannelDef[\"c\" /* isValueDef */])(e.definition)).flat().concat(this.legends[field]);\n    return domain => domain.map(input => ({\n      input,\n      output: channelEncoders.reduce((prev, curr) => {\n        const map = prev;\n        map[curr.name] = curr.encodeValue(input);\n        return map;\n      }, {})\n    }));\n  }\n\n  getLegendInformation(data = []) {\n    return Object.keys(this.legends) // for each field that was encoded\n    .map(field => {\n      // get all the channels that use this field\n      const channelEncoders = this.legends[field];\n      const firstEncoder = channelEncoders[0];\n      const definition = firstEncoder.definition;\n      const createLegendItems = this.createLegendItemsFactory(field);\n\n      if (definition.type === 'nominal') {\n        return {\n          channelEncoders,\n          createLegendItems,\n          field,\n          items: createLegendItems(firstEncoder.getDomainFromDataset(data)),\n          type: definition.type\n        };\n      }\n\n      return {\n        channelEncoders,\n        createLegendItems,\n        field,\n        type: definition.type\n      };\n    });\n  }\n\n  setDomainFromDataset(data) {\n    this.getChannelEncoders().forEach(channelEncoder => {\n      channelEncoder.setDomainFromDataset(data);\n    });\n    return this;\n  }\n\n  hasLegend() {\n    return Object.keys(this.legends).length > 0;\n  }\n\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/utils/mergeEncoding.js\nfunction mergeEncoding(defaultEncoding, encoding) {\n  return { ...defaultEncoding,\n    ...encoding\n  };\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/encoders/createEncoderFactory.js\n\n\n\nfunction createEncoderFactory(params) {\n  const {\n    channelTypes\n  } = params;\n  const completeEncoding = 'defaultEncoding' in params ? encoding => mergeEncoding(params.defaultEncoding, encoding) : params.completeEncoding;\n\n  const create = (encoding = {}) => new Encoder_Encoder({\n    channelTypes,\n    encoding: completeEncoding(encoding)\n  });\n\n  return {\n    channelTypes,\n    create,\n    createSelector: () => Object(es[\"createSelector\"])(encoding => encoding, create),\n    DEFAULT_ENCODING: completeEncoding({})\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2220\n")},2391:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "default", function() { return /* binding */ BoxPlot_BoxPlot; });\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@data-ui/xy-chart/esm/chart/XYChart.js + 51 modules\nvar XYChart = __webpack_require__(2390);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/classnames/index.js\nvar classnames = __webpack_require__(76);\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/@vx/group/dist/vx-group.es.js\n\n\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar objectWithoutProperties = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nfunction Group(_ref) {\n  var _ref$top = _ref.top,\n      top = _ref$top === undefined ? 0 : _ref$top,\n      _ref$left = _ref.left,\n      left = _ref$left === undefined ? 0 : _ref$left,\n      transform = _ref.transform,\n      className = _ref.className,\n      children = _ref.children,\n      restProps = objectWithoutProperties(_ref, [\'top\', \'left\', \'transform\', \'className\', \'children\']);\n\n  return react_default.a.createElement(\n    \'g\',\n    _extends({\n      className: classnames_default()(\'cx-group\', className),\n      transform: transform || \'translate(\' + left + \', \' + top + \')\'\n    }, restProps),\n    children\n  );\n}\n\n\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-array/src/index.js + 31 modules\nvar src = __webpack_require__(1934);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/init.js\nfunction initRange(domain, range) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.range(domain); break;\n    default: this.range(range).domain(domain); break;\n  }\n  return this;\n}\n\nfunction initInterpolator(domain, interpolator) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.interpolator(domain); break;\n    default: this.interpolator(interpolator).domain(domain); break;\n  }\n  return this;\n}\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-collection/src/index.js + 6 modules\nvar d3_collection_src = __webpack_require__(882);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/array.js\nvar array = Array.prototype;\n\nvar map = array.map;\nvar slice = array.slice;\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/ordinal.js\n\n\n\n\nvar implicit = {name: "implicit"};\n\nfunction ordinal() {\n  var index = Object(d3_collection_src["map"])(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n\n  function scale(d) {\n    var key = d + "", i = index.get(key);\n    if (!i) {\n      if (unknown !== implicit) return unknown;\n      index.set(key, i = domain.push(d));\n    }\n    return range[(i - 1) % range.length];\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = Object(d3_collection_src["map"])();\n    var i = -1, n = _.length, d, key;\n    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));\n    return scale;\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), scale) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return ordinal(domain, range).unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/band.js\n\n\n\n\nfunction band() {\n  var scale = ordinal().unknown(undefined),\n      domain = scale.domain,\n      ordinalRange = scale.range,\n      range = [0, 1],\n      step,\n      bandwidth,\n      round = false,\n      paddingInner = 0,\n      paddingOuter = 0,\n      align = 0.5;\n\n  delete scale.unknown;\n\n  function rescale() {\n    var n = domain().length,\n        reverse = range[1] < range[0],\n        start = range[reverse - 0],\n        stop = range[1 - reverse];\n    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n    if (round) step = Math.floor(step);\n    start += (stop - start - step * (n - paddingInner)) * align;\n    bandwidth = step * (1 - paddingInner);\n    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n    var values = Object(src["range"])(n).map(function(i) { return start + step * i; });\n    return ordinalRange(reverse ? values.reverse() : values);\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = [+_[0], +_[1]], round = true, rescale();\n  };\n\n  scale.bandwidth = function() {\n    return bandwidth;\n  };\n\n  scale.step = function() {\n    return step;\n  };\n\n  scale.round = function(_) {\n    return arguments.length ? (round = !!_, rescale()) : round;\n  };\n\n  scale.padding = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;\n  };\n\n  scale.paddingInner = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;\n  };\n\n  scale.paddingOuter = function(_) {\n    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;\n  };\n\n  scale.align = function(_) {\n    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n  };\n\n  scale.copy = function() {\n    return band(domain(), range)\n        .round(round)\n        .paddingInner(paddingInner)\n        .paddingOuter(paddingOuter)\n        .align(align);\n  };\n\n  return initRange.apply(rescale(), arguments);\n}\n\nfunction pointish(scale) {\n  var copy = scale.copy;\n\n  scale.padding = scale.paddingOuter;\n  delete scale.paddingInner;\n  delete scale.paddingOuter;\n\n  scale.copy = function() {\n    return pointish(copy());\n  };\n\n  return scale;\n}\n\nfunction point() {\n  return pointish(band.apply(null, arguments).paddingInner(1));\n}\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-interpolate/src/value.js\nvar src_value = __webpack_require__(274);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-interpolate/src/number.js\nvar number = __webpack_require__(99);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-interpolate/src/round.js\nvar src_round = __webpack_require__(1005);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/constant.js\n/* harmony default export */ var constant = (function(x) {\n  return function() {\n    return x;\n  };\n});\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/number.js\n/* harmony default export */ var src_number = (function(x) {\n  return +x;\n});\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/continuous.js\n\n\n\n\n\n\nvar unit = [0, 1];\n\nfunction identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(domain) {\n  var a = domain[0], b = domain[domain.length - 1], t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = Object(src["bisect"])(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nfunction copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nfunction transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = src_value["a" /* default */],\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), number["a" /* default */])))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = map.call(_, src_number), clamp === identity || (clamp = clamper(domain)), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = slice.call(_), interpolate = src_round["a" /* default */], rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? clamper(domain) : identity, scale) : clamp !== identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nfunction continuous(transform, untransform) {\n  return transformer()(transform, untransform);\n}\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-format/src/formatSpecifier.js\nvar formatSpecifier = __webpack_require__(495);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-format/src/precisionPrefix.js\nvar precisionPrefix = __webpack_require__(2144);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-format/src/defaultLocale.js\nvar defaultLocale = __webpack_require__(406);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-format/src/precisionRound.js\nvar precisionRound = __webpack_require__(2145);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-format/src/precisionFixed.js\nvar precisionFixed = __webpack_require__(2146);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/tickFormat.js\n\n\n\n/* harmony default export */ var src_tickFormat = (function(start, stop, count, specifier) {\n  var step = Object(src["tickStep"])(start, stop, count),\n      precision;\n  specifier = Object(formatSpecifier["b" /* default */])(specifier == null ? ",f" : specifier);\n  switch (specifier.type) {\n    case "s": {\n      var value = Math.max(Math.abs(start), Math.abs(stop));\n      if (specifier.precision == null && !isNaN(precision = Object(precisionPrefix["a" /* default */])(step, value))) specifier.precision = precision;\n      return Object(defaultLocale["c" /* formatPrefix */])(specifier, value);\n    }\n    case "":\n    case "e":\n    case "g":\n    case "p":\n    case "r": {\n      if (specifier.precision == null && !isNaN(precision = Object(precisionRound["a" /* default */])(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");\n      break;\n    }\n    case "f":\n    case "%": {\n      if (specifier.precision == null && !isNaN(precision = Object(precisionFixed["a" /* default */])(step))) specifier.precision = precision - (specifier.type === "%") * 2;\n      break;\n    }\n  }\n  return Object(defaultLocale["b" /* format */])(specifier);\n});\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/linear.js\n\n\n\n\n\nfunction linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return Object(src["ticks"])(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    var d = domain();\n    return src_tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain(),\n        i0 = 0,\n        i1 = d.length - 1,\n        start = d[i0],\n        stop = d[i1],\n        step;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n\n    step = Object(src["tickIncrement"])(start, stop, count);\n\n    if (step > 0) {\n      start = Math.floor(start / step) * step;\n      stop = Math.ceil(stop / step) * step;\n      step = Object(src["tickIncrement"])(start, stop, count);\n    } else if (step < 0) {\n      start = Math.ceil(start * step) / step;\n      stop = Math.floor(stop * step) / step;\n      step = Object(src["tickIncrement"])(start, stop, count);\n    }\n\n    if (step > 0) {\n      d[i0] = Math.floor(start / step) * step;\n      d[i1] = Math.ceil(stop / step) * step;\n      domain(d);\n    } else if (step < 0) {\n      d[i0] = Math.ceil(start * step) / step;\n      d[i1] = Math.floor(stop * step) / step;\n      domain(d);\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nfunction linear() {\n  var scale = continuous(identity, identity);\n\n  scale.copy = function() {\n    return copy(scale, linear());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/identity.js\n\n\n\n\nfunction identity_identity(domain) {\n  var unknown;\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : x;\n  }\n\n  scale.invert = scale;\n\n  scale.domain = scale.range = function(_) {\n    return arguments.length ? (domain = map.call(_, src_number), scale) : domain.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return identity_identity(domain).unknown(unknown);\n  };\n\n  domain = arguments.length ? map.call(domain, src_number) : [0, 1];\n\n  return linearish(scale);\n}\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/nice.js\n/* harmony default export */ var src_nice = (function(domain, interval) {\n  domain = domain.slice();\n\n  var i0 = 0,\n      i1 = domain.length - 1,\n      x0 = domain[i0],\n      x1 = domain[i1],\n      t;\n\n  if (x1 < x0) {\n    t = i0, i0 = i1, i1 = t;\n    t = x0, x0 = x1, x1 = t;\n  }\n\n  domain[i0] = interval.floor(x0);\n  domain[i1] = interval.ceil(x1);\n  return domain;\n});\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/log.js\n\n\n\n\n\n\nfunction transformLog(x) {\n  return Math.log(x);\n}\n\nfunction transformExp(x) {\n  return Math.exp(x);\n}\n\nfunction transformLogn(x) {\n  return -Math.log(-x);\n}\n\nfunction transformExpn(x) {\n  return -Math.exp(-x);\n}\n\nfunction pow10(x) {\n  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;\n}\n\nfunction powp(base) {\n  return base === 10 ? pow10\n      : base === Math.E ? Math.exp\n      : function(x) { return Math.pow(base, x); };\n}\n\nfunction logp(base) {\n  return base === Math.E ? Math.log\n      : base === 10 && Math.log10\n      || base === 2 && Math.log2\n      || (base = Math.log(base), function(x) { return Math.log(x) / base; });\n}\n\nfunction reflect(f) {\n  return function(x) {\n    return -f(-x);\n  };\n}\n\nfunction loggish(transform) {\n  var scale = transform(transformLog, transformExp),\n      domain = scale.domain,\n      base = 10,\n      logs,\n      pows;\n\n  function rescale() {\n    logs = logp(base), pows = powp(base);\n    if (domain()[0] < 0) {\n      logs = reflect(logs), pows = reflect(pows);\n      transform(transformLogn, transformExpn);\n    } else {\n      transform(transformLog, transformExp);\n    }\n    return scale;\n  }\n\n  scale.base = function(_) {\n    return arguments.length ? (base = +_, rescale()) : base;\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.ticks = function(count) {\n    var d = domain(),\n        u = d[0],\n        v = d[d.length - 1],\n        r;\n\n    if (r = v < u) i = u, u = v, v = i;\n\n    var i = logs(u),\n        j = logs(v),\n        p,\n        k,\n        t,\n        n = count == null ? 10 : +count,\n        z = [];\n\n    if (!(base % 1) && j - i < n) {\n      i = Math.round(i) - 1, j = Math.round(j) + 1;\n      if (u > 0) for (; i < j; ++i) {\n        for (k = 1, p = pows(i); k < base; ++k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      } else for (; i < j; ++i) {\n        for (k = base - 1, p = pows(i); k >= 1; --k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      }\n    } else {\n      z = Object(src["ticks"])(i, j, Math.min(j - i, n)).map(pows);\n    }\n\n    return r ? z.reverse() : z;\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    if (specifier == null) specifier = base === 10 ? ".0e" : ",";\n    if (typeof specifier !== "function") specifier = Object(defaultLocale["b" /* format */])(specifier);\n    if (count === Infinity) return specifier;\n    if (count == null) count = 10;\n    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n    return function(d) {\n      var i = d / pows(Math.round(logs(d)));\n      if (i * base < base - 0.5) i *= base;\n      return i <= k ? specifier(d) : "";\n    };\n  };\n\n  scale.nice = function() {\n    return domain(src_nice(domain(), {\n      floor: function(x) { return pows(Math.floor(logs(x))); },\n      ceil: function(x) { return pows(Math.ceil(logs(x))); }\n    }));\n  };\n\n  return scale;\n}\n\nfunction log() {\n  var scale = loggish(transformer()).domain([1, 10]);\n\n  scale.copy = function() {\n    return copy(scale, log()).base(scale.base());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/symlog.js\n\n\n\n\nfunction transformSymlog(c) {\n  return function(x) {\n    return Math.sign(x) * Math.log1p(Math.abs(x / c));\n  };\n}\n\nfunction transformSymexp(c) {\n  return function(x) {\n    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;\n  };\n}\n\nfunction symlogish(transform) {\n  var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));\n\n  scale.constant = function(_) {\n    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;\n  };\n\n  return linearish(scale);\n}\n\nfunction symlog() {\n  var scale = symlogish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, symlog()).constant(scale.constant());\n  };\n\n  return initRange.apply(scale, arguments);\n}\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/pow.js\n\n\n\n\nfunction transformPow(exponent) {\n  return function(x) {\n    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n  };\n}\n\nfunction transformSqrt(x) {\n  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);\n}\n\nfunction transformSquare(x) {\n  return x < 0 ? -x * x : x * x;\n}\n\nfunction powish(transform) {\n  var scale = transform(identity, identity),\n      exponent = 1;\n\n  function rescale() {\n    return exponent === 1 ? transform(identity, identity)\n        : exponent === 0.5 ? transform(transformSqrt, transformSquare)\n        : transform(transformPow(exponent), transformPow(1 / exponent));\n  }\n\n  scale.exponent = function(_) {\n    return arguments.length ? (exponent = +_, rescale()) : exponent;\n  };\n\n  return linearish(scale);\n}\n\nfunction pow() {\n  var scale = powish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, pow()).exponent(scale.exponent());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n\nfunction sqrt() {\n  return pow.apply(null, arguments).exponent(0.5);\n}\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/quantile.js\n\n\n\n\nfunction quantile() {\n  var domain = [],\n      range = [],\n      thresholds = [],\n      unknown;\n\n  function rescale() {\n    var i = 0, n = Math.max(1, range.length);\n    thresholds = new Array(n - 1);\n    while (++i < n) thresholds[i - 1] = Object(src["quantile"])(domain, i / n);\n    return scale;\n  }\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : range[Object(src["bisect"])(thresholds, x)];\n  }\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN] : [\n      i > 0 ? thresholds[i - 1] : domain[0],\n      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\n    ];\n  };\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(src["ascending"]);\n    return rescale();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.quantiles = function() {\n    return thresholds.slice();\n  };\n\n  scale.copy = function() {\n    return quantile()\n        .domain(domain)\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(scale, arguments);\n}\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/quantize.js\n\n\n\n\n\nfunction quantize() {\n  var x0 = 0,\n      x1 = 1,\n      n = 1,\n      domain = [0.5],\n      range = [0, 1],\n      unknown;\n\n  function scale(x) {\n    return x <= x ? range[Object(src["bisect"])(domain, x, 0, n)] : unknown;\n  }\n\n  function rescale() {\n    var i = -1;\n    domain = new Array(n);\n    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n    return scale;\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (n = (range = slice.call(_)).length - 1, rescale()) : range.slice();\n  };\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN]\n        : i < 1 ? [x0, domain[0]]\n        : i >= n ? [domain[n - 1], x1]\n        : [domain[i - 1], domain[i]];\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : scale;\n  };\n\n  scale.thresholds = function() {\n    return domain.slice();\n  };\n\n  scale.copy = function() {\n    return quantize()\n        .domain([x0, x1])\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(linearish(scale), arguments);\n}\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/threshold.js\n\n\n\n\nfunction threshold() {\n  var domain = [0.5],\n      range = [0, 1],\n      unknown,\n      n = 1;\n\n  function scale(x) {\n    return x <= x ? range[Object(src["bisect"])(domain, x, 0, n)] : unknown;\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\n  };\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return [domain[i - 1], domain[i]];\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return threshold()\n        .domain(domain)\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(scale, arguments);\n}\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-time/src/year.js\nvar src_year = __webpack_require__(364);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-time/src/month.js\nvar src_month = __webpack_require__(1926);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-time/src/week.js\nvar src_week = __webpack_require__(176);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-time/src/day.js\nvar src_day = __webpack_require__(1203);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-time/src/hour.js\nvar src_hour = __webpack_require__(1925);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-time/src/minute.js\nvar src_minute = __webpack_require__(1924);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-time/src/second.js\nvar src_second = __webpack_require__(1923);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-time/src/millisecond.js\nvar src_millisecond = __webpack_require__(2366);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-time-format/src/defaultLocale.js\nvar src_defaultLocale = __webpack_require__(1201);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/time.js\n\n\n\n\n\n\n\n\nvar durationSecond = 1000,\n    durationMinute = durationSecond * 60,\n    durationHour = durationMinute * 60,\n    durationDay = durationHour * 24,\n    durationWeek = durationDay * 7,\n    durationMonth = durationDay * 30,\n    durationYear = durationDay * 365;\n\nfunction date(t) {\n  return new Date(t);\n}\n\nfunction time_number(t) {\n  return t instanceof Date ? +t : +new Date(+t);\n}\n\nfunction calendar(year, month, week, day, hour, minute, second, millisecond, format) {\n  var scale = continuous(identity, identity),\n      invert = scale.invert,\n      domain = scale.domain;\n\n  var formatMillisecond = format(".%L"),\n      formatSecond = format(":%S"),\n      formatMinute = format("%I:%M"),\n      formatHour = format("%I %p"),\n      formatDay = format("%a %d"),\n      formatWeek = format("%b %d"),\n      formatMonth = format("%B"),\n      formatYear = format("%Y");\n\n  var tickIntervals = [\n    [second,  1,      durationSecond],\n    [second,  5,  5 * durationSecond],\n    [second, 15, 15 * durationSecond],\n    [second, 30, 30 * durationSecond],\n    [minute,  1,      durationMinute],\n    [minute,  5,  5 * durationMinute],\n    [minute, 15, 15 * durationMinute],\n    [minute, 30, 30 * durationMinute],\n    [  hour,  1,      durationHour  ],\n    [  hour,  3,  3 * durationHour  ],\n    [  hour,  6,  6 * durationHour  ],\n    [  hour, 12, 12 * durationHour  ],\n    [   day,  1,      durationDay   ],\n    [   day,  2,  2 * durationDay   ],\n    [  week,  1,      durationWeek  ],\n    [ month,  1,      durationMonth ],\n    [ month,  3,  3 * durationMonth ],\n    [  year,  1,      durationYear  ]\n  ];\n\n  function tickFormat(date) {\n    return (second(date) < date ? formatMillisecond\n        : minute(date) < date ? formatSecond\n        : hour(date) < date ? formatMinute\n        : day(date) < date ? formatHour\n        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\n        : year(date) < date ? formatMonth\n        : formatYear)(date);\n  }\n\n  function tickInterval(interval, start, stop, step) {\n    if (interval == null) interval = 10;\n\n    // If a desired tick count is specified, pick a reasonable tick interval\n    // based on the extent of the domain and a rough estimate of tick size.\n    // Otherwise, assume interval is already a time interval and use it.\n    if (typeof interval === "number") {\n      var target = Math.abs(stop - start) / interval,\n          i = Object(src["bisector"])(function(i) { return i[2]; }).right(tickIntervals, target);\n      if (i === tickIntervals.length) {\n        step = Object(src["tickStep"])(start / durationYear, stop / durationYear, interval);\n        interval = year;\n      } else if (i) {\n        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\n        step = i[1];\n        interval = i[0];\n      } else {\n        step = Math.max(Object(src["tickStep"])(start, stop, interval), 1);\n        interval = millisecond;\n      }\n    }\n\n    return step == null ? interval : interval.every(step);\n  }\n\n  scale.invert = function(y) {\n    return new Date(invert(y));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? domain(map.call(_, time_number)) : domain().map(date);\n  };\n\n  scale.ticks = function(interval, step) {\n    var d = domain(),\n        t0 = d[0],\n        t1 = d[d.length - 1],\n        r = t1 < t0,\n        t;\n    if (r) t = t0, t0 = t1, t1 = t;\n    t = tickInterval(interval, t0, t1, step);\n    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop\n    return r ? t.reverse() : t;\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    return specifier == null ? tickFormat : format(specifier);\n  };\n\n  scale.nice = function(interval, step) {\n    var d = domain();\n    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))\n        ? domain(src_nice(d, interval))\n        : scale;\n  };\n\n  scale.copy = function() {\n    return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));\n  };\n\n  return scale;\n}\n\n/* harmony default export */ var time = (function() {\n  return initRange.apply(calendar(src_year["a" /* default */], src_month["a" /* default */], src_week["d" /* sunday */], src_day["a" /* default */], src_hour["a" /* default */], src_minute["a" /* default */], src_second["a" /* default */], src_millisecond["a" /* default */], src_defaultLocale["a" /* timeFormat */]).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);\n});\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-time/src/utcYear.js\nvar utcYear = __webpack_require__(365);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-time/src/utcMonth.js\nvar utcMonth = __webpack_require__(1929);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-time/src/utcWeek.js\nvar utcWeek = __webpack_require__(175);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-time/src/utcDay.js\nvar utcDay = __webpack_require__(1202);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-time/src/utcHour.js\nvar utcHour = __webpack_require__(1928);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-time/src/utcMinute.js\nvar utcMinute = __webpack_require__(1927);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/utcTime.js\n\n\n\n\n\n/* harmony default export */ var utcTime = (function() {\n  return initRange.apply(calendar(utcYear["a" /* default */], utcMonth["a" /* default */], utcWeek["d" /* utcSunday */], utcDay["a" /* default */], utcHour["a" /* default */], utcMinute["a" /* default */], src_second["a" /* default */], src_millisecond["a" /* default */], src_defaultLocale["b" /* utcFormat */]).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);\n});\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/sequential.js\n\n\n\n\n\n\n\nfunction sequential_transformer() {\n  var x0 = 0,\n      x1 = 1,\n      t0,\n      t1,\n      k10,\n      transform,\n      interpolator = identity,\n      clamp = false,\n      unknown;\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t) {\n    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);\n    return scale;\n  };\n}\n\nfunction sequential_copy(source, target) {\n  return target\n      .domain(source.domain())\n      .interpolator(source.interpolator())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nfunction sequential() {\n  var scale = linearish(sequential_transformer()(identity));\n\n  scale.copy = function() {\n    return sequential_copy(scale, sequential());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction sequentialLog() {\n  var scale = loggish(sequential_transformer()).domain([1, 10]);\n\n  scale.copy = function() {\n    return sequential_copy(scale, sequentialLog()).base(scale.base());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction sequentialSymlog() {\n  var scale = symlogish(sequential_transformer());\n\n  scale.copy = function() {\n    return sequential_copy(scale, sequentialSymlog()).constant(scale.constant());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction sequentialPow() {\n  var scale = powish(sequential_transformer());\n\n  scale.copy = function() {\n    return sequential_copy(scale, sequentialPow()).exponent(scale.exponent());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction sequentialSqrt() {\n  return sequentialPow.apply(null, arguments).exponent(0.5);\n}\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/sequentialQuantile.js\n\n\n\n\nfunction sequentialQuantile() {\n  var domain = [],\n      interpolator = identity;\n\n  function scale(x) {\n    if (!isNaN(x = +x)) return interpolator((Object(src["bisect"])(domain, x) - 1) / (domain.length - 1));\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(src["ascending"]);\n    return scale;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  scale.copy = function() {\n    return sequentialQuantile(interpolator).domain(domain);\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/diverging.js\n\n\n\n\n\n\n\n\nfunction diverging_transformer() {\n  var x0 = 0,\n      x1 = 0.5,\n      x2 = 1,\n      t0,\n      t1,\n      t2,\n      k10,\n      k21,\n      interpolator = identity,\n      transform,\n      clamp = false,\n      unknown;\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (x < t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), t2 = transform(x2 = +_[2]), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), scale) : [x0, x1, x2];\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t) {\n    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1);\n    return scale;\n  };\n}\n\nfunction diverging() {\n  var scale = linearish(diverging_transformer()(identity));\n\n  scale.copy = function() {\n    return sequential_copy(scale, diverging());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction divergingLog() {\n  var scale = loggish(diverging_transformer()).domain([0.1, 1, 10]);\n\n  scale.copy = function() {\n    return sequential_copy(scale, divergingLog()).base(scale.base());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction divergingSymlog() {\n  var scale = symlogish(diverging_transformer());\n\n  scale.copy = function() {\n    return sequential_copy(scale, divergingSymlog()).constant(scale.constant());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction divergingPow() {\n  var scale = powish(diverging_transformer());\n\n  scale.copy = function() {\n    return sequential_copy(scale, divergingPow()).exponent(scale.exponent());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nfunction divergingSqrt() {\n  return divergingPow.apply(null, arguments).exponent(0.5);\n}\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/d3-scale/src/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/node_modules/@vx/scale/dist/vx-scale.es.js\n\n\nvar vx_scale_es_band = (function (_ref) {\n  var range = _ref.range,\n      rangeRound = _ref.rangeRound,\n      domain = _ref.domain,\n      padding = _ref.padding,\n      paddingInner = _ref.paddingInner,\n      paddingOuter = _ref.paddingOuter,\n      align = _ref.align,\n      tickFormat = _ref.tickFormat;\n\n  var scale = band();\n\n  if (range) scale.range(range);\n  if (rangeRound) scale.rangeRound(rangeRound);\n  if (domain) scale.domain(domain);\n  if (padding) scale.padding(padding);\n  if (paddingInner) scale.paddingInner(paddingInner);\n  if (paddingOuter) scale.paddingOuter(paddingOuter);\n  if (align) scale.align(align);\n  if (tickFormat) scale.tickFormat = tickFormat;\n\n  return scale;\n});\n\nvar vx_scale_es_point = (function (_ref) {\n  var range = _ref.range,\n      rangeRound = _ref.rangeRound,\n      domain = _ref.domain,\n      padding = _ref.padding,\n      align = _ref.align,\n      _ref$nice = _ref.nice,\n      nice = _ref$nice === undefined ? false : _ref$nice;\n\n  var scale = point();\n\n  if (range) scale.range(range);\n  if (rangeRound) scale.rangeRound(rangeRound);\n  if (domain) scale.domain(domain);\n  if (nice) scale.nice();\n  if (padding) scale.padding(padding);\n  if (align) scale.align(align);\n\n  return scale;\n});\n\nvar vx_scale_es_linear = (function (_ref) {\n  var range = _ref.range,\n      rangeRound = _ref.rangeRound,\n      domain = _ref.domain,\n      _ref$nice = _ref.nice,\n      nice = _ref$nice === undefined ? false : _ref$nice,\n      _ref$clamp = _ref.clamp,\n      clamp = _ref$clamp === undefined ? false : _ref$clamp;\n\n  var scale = linear();\n\n  if (range) scale.range(range);\n  if (rangeRound) scale.rangeRound(rangeRound);\n  if (domain) scale.domain(domain);\n  if (nice) scale.nice();\n  if (clamp) scale.clamp(true);\n\n  return scale;\n});\n\nvar vx_scale_es_time = (function (_ref) {\n  var range = _ref.range,\n      rangeRound = _ref.rangeRound,\n      domain = _ref.domain,\n      _ref$nice = _ref.nice,\n      nice = _ref$nice === undefined ? false : _ref$nice,\n      _ref$clamp = _ref.clamp,\n      clamp = _ref$clamp === undefined ? false : _ref$clamp;\n\n  var scale = time();\n\n  if (range) scale.range(range);\n  if (rangeRound) scale.rangeRound(rangeRound);\n  if (domain) scale.domain(domain);\n  if (nice) scale.nice();\n  if (clamp) scale.clamp(true);\n\n  return scale;\n});\n\nvar utc = (function (_ref) {\n  var range = _ref.range,\n      rangeRound = _ref.rangeRound,\n      domain = _ref.domain,\n      _ref$nice = _ref.nice,\n      nice = _ref$nice === undefined ? false : _ref$nice,\n      _ref$clamp = _ref.clamp,\n      clamp = _ref$clamp === undefined ? false : _ref$clamp;\n\n  var scale = utcTime();\n\n  if (range) scale.range(range);\n  if (rangeRound) scale.rangeRound(rangeRound);\n  if (domain) scale.domain(domain);\n  if (nice) scale.nice();\n  if (clamp) scale.clamp(true);\n\n  return scale;\n});\n\nvar vx_scale_es_log = (function (_ref) {\n  var range = _ref.range,\n      rangeRound = _ref.rangeRound,\n      domain = _ref.domain,\n      base = _ref.base,\n      _ref$nice = _ref.nice,\n      nice = _ref$nice === undefined ? false : _ref$nice,\n      _ref$clamp = _ref.clamp,\n      clamp = _ref$clamp === undefined ? false : _ref$clamp;\n\n  var scale = log();\n\n  if (range) scale.range(range);\n  if (rangeRound) scale.rangeRound(rangeRound);\n  if (domain) scale.domain(domain);\n  if (nice) scale.nice();\n  if (clamp) scale.clamp(true);\n  if (base) scale.base(base);\n\n  return scale;\n});\n\nvar power = (function (_ref) {\n  var range = _ref.range,\n      rangeRound = _ref.rangeRound,\n      domain = _ref.domain,\n      exponent = _ref.exponent,\n      _ref$nice = _ref.nice,\n      nice = _ref$nice === undefined ? false : _ref$nice,\n      _ref$clamp = _ref.clamp,\n      clamp = _ref$clamp === undefined ? false : _ref$clamp;\n\n  var scale = pow();\n\n  if (range) scale.range(range);\n  if (rangeRound) scale.rangeRound(rangeRound);\n  if (domain) scale.domain(domain);\n  if (nice) scale.nice();\n  if (clamp) scale.clamp(true);\n  if (exponent) scale.exponent(exponent);\n\n  return scale;\n});\n\nvar vx_scale_es_ordinal = (function (_ref) {\n  var range = _ref.range,\n      domain = _ref.domain,\n      unknown = _ref.unknown;\n\n  var scale = ordinal();\n\n  if (range) scale.range(range);\n  if (domain) scale.domain(domain);\n  if (unknown) scale.unknown(unknown);\n\n  return scale;\n});\n\nvar vx_scale_es_quantize = (function (_ref) {\n  var range = _ref.range,\n      domain = _ref.domain,\n      ticks = _ref.ticks,\n      tickFormat = _ref.tickFormat,\n      _ref$nice = _ref.nice,\n      nice = _ref$nice === undefined ? false : _ref$nice;\n\n  var scale = quantize();\n\n  if (range) scale.range(range);\n  if (domain) scale.domain(domain);\n  if (nice) scale.nice();\n  if (ticks) scale.ticks(ticks);\n  if (tickFormat) scale.tickFormat(tickFormat);\n\n  return scale;\n});\n\nvar vx_scale_es_quantile = (function (_ref) {\n  var range = _ref.range,\n      domain = _ref.domain;\n\n  var scale = quantile();\n\n  if (range) scale.range(range);\n  if (domain) scale.domain(domain);\n\n  return scale;\n});\n\nvar vx_scale_es_threshold = (function (_ref) {\n  var range = _ref.range,\n      domain = _ref.domain;\n\n  var scale = threshold();\n\n  if (range) scale.range(range);\n  if (domain) scale.domain(domain);\n\n  return scale;\n});\n\nvar vx_scale_es_objectWithoutProperties = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nfunction updateScale(scale, _ref) {\n  var args = vx_scale_es_objectWithoutProperties(_ref, []);\n\n  var nextScale = scale.copy();\n  Object.keys(args).forEach(function (key) {\n    if (nextScale.hasOwnProperty(key)) nextScale[key](args[key]);\n  });\n  return nextScale;\n}\n\n\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-shape/src/line.js\nvar line = __webpack_require__(1983);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-shape/src/curve/cardinal.js\nvar cardinal = __webpack_require__(1950);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@vx/stats/dist/vx-stats.es.js\n\n\n\n\n\n\nfunction callOrValue(maybeFn, data) {\n  if (typeof maybeFn === \'function\') {\n    return maybeFn(data);\n  }\n  return maybeFn;\n}\n\nfunction additionalProps(restProps, data) {\n  return Object.keys(restProps).reduce(function (ret, cur) {\n    ret[cur] = callOrValue(restProps[cur], data);\n    return ret;\n  }, {});\n}\n\nvar vx_stats_es_extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar vx_stats_es_objectWithoutProperties = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i["return"]) _i["return"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError("Invalid attempt to destructure non-iterable instance");\n    }\n  };\n}();\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nfunction verticalToHorizontal(_ref) {\n  var _ref2 = slicedToArray(_ref, 4),\n      x1 = _ref2[0],\n      y1 = _ref2[1],\n      x2 = _ref2[2],\n      y2 = _ref2[3];\n\n  return [y1, x1, y2, x2];\n}\n\nfunction vx_stats_es_BoxPlot(_ref3) {\n  var _ref3$left = _ref3.left,\n      left = _ref3$left === undefined ? 0 : _ref3$left,\n      _ref3$top = _ref3.top,\n      top = _ref3$top === undefined ? 0 : _ref3$top,\n      className = _ref3.className,\n      data = _ref3.data,\n      max = _ref3.max,\n      min = _ref3.min,\n      firstQuartile = _ref3.firstQuartile,\n      thirdQuartile = _ref3.thirdQuartile,\n      median = _ref3.median,\n      boxWidth = _ref3.boxWidth,\n      fill = _ref3.fill,\n      fillOpacity = _ref3.fillOpacity,\n      stroke = _ref3.stroke,\n      strokeWidth = _ref3.strokeWidth,\n      _ref3$rx = _ref3.rx,\n      rx = _ref3$rx === undefined ? 2 : _ref3$rx,\n      _ref3$ry = _ref3.ry,\n      ry = _ref3$ry === undefined ? 2 : _ref3$ry,\n      valueScale = _ref3.valueScale,\n      outliers = _ref3.outliers,\n      horizontal = _ref3.horizontal,\n      _ref3$medianProps = _ref3.medianProps,\n      medianProps = _ref3$medianProps === undefined ? {} : _ref3$medianProps,\n      _ref3$maxProps = _ref3.maxProps,\n      maxProps = _ref3$maxProps === undefined ? {} : _ref3$maxProps,\n      _ref3$minProps = _ref3.minProps,\n      minProps = _ref3$minProps === undefined ? {} : _ref3$minProps,\n      _ref3$boxProps = _ref3.boxProps,\n      boxProps = _ref3$boxProps === undefined ? {} : _ref3$boxProps,\n      _ref3$outlierProps = _ref3.outlierProps,\n      outlierProps = _ref3$outlierProps === undefined ? {} : _ref3$outlierProps,\n      _ref3$container = _ref3.container,\n      container = _ref3$container === undefined ? false : _ref3$container,\n      _ref3$containerProps = _ref3.containerProps,\n      containerProps = _ref3$containerProps === undefined ? {} : _ref3$containerProps,\n      restProps = vx_stats_es_objectWithoutProperties(_ref3, [\'left\', \'top\', \'className\', \'data\', \'max\', \'min\', \'firstQuartile\', \'thirdQuartile\', \'median\', \'boxWidth\', \'fill\', \'fillOpacity\', \'stroke\', \'strokeWidth\', \'rx\', \'ry\', \'valueScale\', \'outliers\', \'horizontal\', \'medianProps\', \'maxProps\', \'minProps\', \'boxProps\', \'outlierProps\', \'container\', \'containerProps\']);\n\n  var offset = horizontal ? top : left;\n  var center = offset + boxWidth / 2;\n\n  var maxLinePos = Array(4).fill(0);\n  var maxToBoxLinePos = Array(4).fill(0);\n  var boxPos = Array(4).fill(0);\n  var medianLinePos = Array(4).fill(0);\n  var minToBoxLinePos = Array(4).fill(0);\n  var minLinePos = Array(4).fill(0);\n  var containerPos = Array(4).fill(0);\n\n  // all of these are [x0, y0, x1, y1]\n  maxLinePos[0] = center - boxWidth / 4;\n  maxLinePos[1] = valueScale(max);\n  maxLinePos[2] = center + boxWidth / 4;\n  maxLinePos[3] = valueScale(max);\n\n  maxToBoxLinePos[0] = center;\n  maxToBoxLinePos[1] = valueScale(max);\n  maxToBoxLinePos[2] = center;\n  maxToBoxLinePos[3] = valueScale(thirdQuartile);\n\n  boxPos[0] = offset;\n  boxPos[1] = valueScale(thirdQuartile);\n  boxPos[2] = boxWidth;\n  boxPos[3] = Math.abs(valueScale(thirdQuartile) - valueScale(firstQuartile));\n\n  medianLinePos[0] = offset;\n  medianLinePos[1] = valueScale(median);\n  medianLinePos[2] = offset + boxWidth;\n  medianLinePos[3] = valueScale(median);\n\n  minToBoxLinePos[0] = center;\n  minToBoxLinePos[1] = valueScale(firstQuartile);\n  minToBoxLinePos[2] = center;\n  minToBoxLinePos[3] = valueScale(min);\n\n  minLinePos[0] = center - boxWidth / 4;\n  minLinePos[1] = valueScale(min);\n  minLinePos[2] = center + boxWidth / 4;\n  minLinePos[3] = valueScale(min);\n\n  var valueRange = valueScale.range();\n  containerPos[0] = boxPos[0];\n  containerPos[1] = Math.min.apply(Math, toConsumableArray(valueRange));\n  containerPos[2] = boxPos[2];\n  containerPos[3] = Math.abs(valueRange[0] - valueRange[1]);\n\n  if (horizontal) {\n    maxLinePos = verticalToHorizontal(maxLinePos);\n    maxToBoxLinePos = verticalToHorizontal(maxToBoxLinePos);\n    boxPos = verticalToHorizontal(boxPos);\n    boxPos[0] = valueScale(firstQuartile);\n    medianLinePos = verticalToHorizontal(medianLinePos);\n    minToBoxLinePos = verticalToHorizontal(minToBoxLinePos);\n    minLinePos = verticalToHorizontal(minLinePos);\n    containerPos = verticalToHorizontal(containerPos);\n    containerPos[0] = Math.min.apply(Math, toConsumableArray(valueRange));\n  }\n  return react_default.a.createElement(\n    Group,\n    { className: classnames_default()(\'vx-boxplot\', className) },\n    outliers.map(function (d, i) {\n      var cx = horizontal ? valueScale(d) : center;\n      var cy = horizontal ? center : valueScale(d);\n      return react_default.a.createElement(\'circle\', vx_stats_es_extends({\n        key: i,\n        className: \'vx-boxplot-outlier\',\n        cx: cx,\n        cy: cy,\n        stroke: stroke,\n        strokeWidth: 1,\n        fill: fill,\n        fillOpacity: fillOpacity,\n        r: \'4\'\n      }, additionalProps(outlierProps, {\n        data: d,\n        cx: cx,\n        cy: cy\n      })));\n    }),\n    react_default.a.createElement(\'line\', vx_stats_es_extends({\n      className: \'vx-boxplot-max\',\n      x1: maxLinePos[0],\n      y1: maxLinePos[1],\n      x2: maxLinePos[2],\n      y2: maxLinePos[3],\n      stroke: stroke,\n      strokeWidth: strokeWidth\n    }, additionalProps(maxProps, {\n      data: data,\n      max: max,\n      x1: maxLinePos[0],\n      x2: maxLinePos[2],\n      y1: maxLinePos[1],\n      y2: maxLinePos[3]\n    }))),\n    react_default.a.createElement(\'line\', {\n      x1: maxToBoxLinePos[0],\n      y1: maxToBoxLinePos[1],\n      x2: maxToBoxLinePos[2],\n      y2: maxToBoxLinePos[3],\n      stroke: stroke,\n      strokeWidth: strokeWidth\n    }),\n    react_default.a.createElement(\'rect\', vx_stats_es_extends({\n      className: \'vx-boxplot-box\',\n      x: boxPos[0],\n      y: boxPos[1],\n      width: boxPos[2],\n      height: boxPos[3],\n      stroke: stroke,\n      strokeWidth: strokeWidth,\n      fill: fill,\n      fillOpacity: fillOpacity,\n      rx: rx,\n      ry: ry\n    }, additionalProps(boxProps, {\n      data: data,\n      height: boxPos[3],\n      median: median,\n      firstQuartile: firstQuartile,\n      thirdQuartile: thirdQuartile,\n      min: min,\n      max: max,\n      x1: boxPos[0],\n      x2: boxPos[0] + boxPos[2],\n      y1: boxPos[1],\n      y2: boxPos[1] + boxPos[3]\n    }))),\n    react_default.a.createElement(\'line\', vx_stats_es_extends({\n      className: \'vx-boxplot-median\',\n      x1: medianLinePos[0],\n      y1: medianLinePos[1],\n      x2: medianLinePos[2],\n      y2: medianLinePos[3],\n      stroke: stroke,\n      strokeWidth: strokeWidth\n    }, additionalProps(medianProps, {\n      data: data,\n      median: median,\n      x1: medianLinePos[0],\n      x2: medianLinePos[2],\n      y1: medianLinePos[1],\n      y2: medianLinePos[3]\n    }))),\n    react_default.a.createElement(\'line\', {\n      x1: minToBoxLinePos[0],\n      y1: minToBoxLinePos[1],\n      x2: minToBoxLinePos[2],\n      y2: minToBoxLinePos[3],\n      stroke: stroke,\n      strokeWidth: strokeWidth\n    }),\n    react_default.a.createElement(\'line\', vx_stats_es_extends({\n      className: \'vx-boxplot-min\',\n      x1: minLinePos[0],\n      y1: minLinePos[1],\n      x2: minLinePos[2],\n      y2: minLinePos[3],\n      stroke: stroke,\n      strokeWidth: strokeWidth\n    }, additionalProps(minProps, {\n      data: data,\n      min: min,\n      x1: minLinePos[0],\n      x2: minLinePos[2],\n      y1: minLinePos[1],\n      y2: minLinePos[3]\n    }))),\n    container && react_default.a.createElement(\'rect\', vx_stats_es_extends({\n      x: containerPos[0],\n      y: containerPos[1],\n      width: containerPos[2],\n      height: containerPos[3],\n      fillOpacity: \'0\'\n    }, additionalProps(containerProps, {\n      data: data,\n      x1: containerPos[0],\n      x2: containerPos[0] + containerPos[2],\n      y1: containerPos[1],\n      y2: containerPos[1] + containerPos[3],\n      median: median,\n      max: max,\n      min: min,\n      thirdQuartile: thirdQuartile,\n      firstQuartile: firstQuartile\n    })))\n  );\n}\n\nfunction ViolinPlot(_ref) {\n  var _ref$left = _ref.left,\n      left = _ref$left === undefined ? 0 : _ref$left,\n      _ref$top = _ref.top,\n      top = _ref$top === undefined ? 0 : _ref$top,\n      className = _ref.className,\n      binData = _ref.binData,\n      _ref$stroke = _ref.stroke,\n      stroke = _ref$stroke === undefined ? \'black\' : _ref$stroke,\n      _ref$fill = _ref.fill,\n      fill = _ref$fill === undefined ? \'rgba(0,0,0,0.3)\' : _ref$fill,\n      opacity = _ref.opacity,\n      strokeWidth = _ref.strokeWidth,\n      width = _ref.width,\n      valueScale = _ref.valueScale,\n      strokeDasharray = _ref.strokeDasharray,\n      horizontal = _ref.horizontal,\n      restProps = vx_stats_es_objectWithoutProperties(_ref, [\'left\', \'top\', \'className\', \'binData\', \'stroke\', \'fill\', \'opacity\', \'strokeWidth\', \'width\', \'valueScale\', \'strokeDasharray\', \'horizontal\']);\n\n  var center = (horizontal ? top : left) + width / 2;\n  var binCounts = binData.map(function (bin) {\n    return bin.count;\n  });\n  var widthScale = vx_scale_es_linear({\n    rangeRound: [0, width / 2],\n    domain: [0, Math.max.apply(Math, toConsumableArray(binCounts))]\n  });\n\n  var path = \'\';\n  if (horizontal) {\n    var topCurve = Object(line["a" /* default */])().x(function (d) {\n      return valueScale(d.value);\n    }).y(function (d) {\n      return center - widthScale(d.count);\n    }).curve(cardinal["b" /* default */]);\n\n    var bottomCurve = Object(line["a" /* default */])().x(function (d) {\n      return valueScale(d.value);\n    }).y(function (d) {\n      return center + widthScale(d.count);\n    }).curve(cardinal["b" /* default */]);\n\n    var topCurvePath = topCurve(binData);\n    var bottomCurvePath = bottomCurve([].concat(toConsumableArray(binData)).reverse());\n    path = topCurvePath + \' \' + bottomCurvePath.replace(\'M\', \'L\') + \' Z\';\n  } else {\n    var rightCurve = Object(line["a" /* default */])().x(function (d) {\n      return center + widthScale(d.count);\n    }).y(function (d) {\n      return valueScale(d.value);\n    }).curve(cardinal["b" /* default */]);\n\n    var leftCurve = Object(line["a" /* default */])().x(function (d) {\n      return center - widthScale(d.count);\n    }).y(function (d) {\n      return valueScale(d.value);\n    }).curve(cardinal["b" /* default */]);\n\n    var rightCurvePath = rightCurve(binData);\n    var leftCurvePath = leftCurve([].concat(toConsumableArray(binData)).reverse());\n    path = rightCurvePath + \' \' + leftCurvePath.replace(\'M\', \'L\') + \' Z\';\n  }\n  return react_default.a.createElement(\n    Group,\n    { className: classnames_default()(\'vx-violin\', className) },\n    react_default.a.createElement(\'path\', vx_stats_es_extends({\n      d: path,\n      stroke: stroke,\n      strokeWidth: strokeWidth,\n      strokeDasharray: strokeDasharray,\n      fill: fill,\n      fillOpacity: opacity\n    }, additionalProps(restProps, binData)))\n  );\n}\n\nfunction computeStats (numericalArray) {\n  var points = [].concat(toConsumableArray(numericalArray)).sort(function (a, b) {\n    return a - b;\n  });\n  var sampleSize = points.length;\n  var firstQuartile = points[Math.round(sampleSize / 4)];\n  var thirdQuartile = points[Math.round(3 * sampleSize / 4)];\n  var IQR = thirdQuartile - firstQuartile;\n\n  var min = firstQuartile - 1.5 * IQR;\n  var max = thirdQuartile + 1.5 * IQR;\n\n  var outliers = points.filter(function (p) {\n    return p < min || p > max;\n  });\n  var binWidth = 2 * IQR * Math.pow(sampleSize - outliers.length, -1 / 3);\n  var binNum = Math.round((max - min) / binWidth);\n  var actualBinWidth = (max - min) / binNum;\n\n  var bins = Array(binNum + 2).fill(0);\n  var values = Array(binNum + 2).fill(min);\n\n  for (var i = 1; i <= binNum; i += 1) {\n    values[i] += actualBinWidth * (i - 0.5);\n  }\n\n  values[values.length - 1] = max;\n\n  points.filter(function (p) {\n    return p >= min && p <= max;\n  }).forEach(function (p) {\n    bins[Math.floor((p - min) / actualBinWidth) + 1] += 1;\n  });\n\n  var binData = values.map(function (v, i) {\n    return {\n      value: v,\n      count: bins[i]\n    };\n  });\n\n  var boxPlot = {\n    min: min,\n    firstQuartile: firstQuartile,\n    median: points[Math.round(sampleSize / 2)],\n    thirdQuartile: thirdQuartile,\n    max: max,\n    outliers: outliers\n  };\n\n  return {\n    boxPlot: boxPlot,\n    binData: binData\n  };\n}\n\n\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@data-ui/shared/esm/components/FocusBlurHandler.js\nvar FocusBlurHandler = __webpack_require__(2377);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@data-ui/xy-chart/node_modules/@vx/group/dist/vx-group.es.js\nvar vx_group_es = __webpack_require__(1941);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(55);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@data-ui/theme/esm/color.js\nvar esm_color = __webpack_require__(1988);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@data-ui/xy-chart/esm/utils/chartUtils.js\nvar chartUtils = __webpack_require__(1939);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@data-ui/xy-chart/esm/utils/propShapes.js\nvar propShapes = __webpack_require__(1943);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@data-ui/xy-chart/esm/utils/sharedSeriesProps.js\nvar sharedSeriesProps = __webpack_require__(1968);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@data-ui/xy-chart/esm/series/BoxPlotSeries.js\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nfunction BoxPlotSeries_extends() { BoxPlotSeries_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return BoxPlotSeries_extends.apply(this, arguments); }\n\n\n\n\n\n\n\n\n\n\n\nvar propTypes = BoxPlotSeries_extends({}, sharedSeriesProps["a" /* default */], {\n  containerEvents: prop_types_default.a.bool,\n  data: propShapes["c" /* boxPlotSeriesDataShape */].isRequired,\n  fill: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.string]),\n  horizontal: prop_types_default.a.bool,\n  stroke: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.string]),\n  strokeWidth: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.number]),\n  fillOpacity: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.number]),\n  widthRatio: prop_types_default.a.number,\n  containerProps: prop_types_default.a.object,\n  // eslint-disable-line react/forbid-prop-types\n  outlierProps: prop_types_default.a.object,\n  // eslint-disable-line react/forbid-prop-types\n  boxProps: prop_types_default.a.object,\n  // eslint-disable-line react/forbid-prop-types\n  minProps: prop_types_default.a.object,\n  // eslint-disable-line react/forbid-prop-types\n  maxProps: prop_types_default.a.object,\n  // eslint-disable-line react/forbid-prop-types\n  medianProps: prop_types_default.a.object // eslint-disable-line react/forbid-prop-types\n\n});\n\nvar defaultProps = {\n  containerEvents: true,\n  stroke: esm_color["a" /* default */].darkGray,\n  strokeWidth: 2,\n  fill: esm_color["a" /* default */].default,\n  fillOpacity: 1,\n  horizontal: false,\n  widthRatio: 1,\n  containerProps: null,\n  outlierProps: null,\n  boxProps: null,\n  minProps: null,\n  maxProps: null,\n  medianProps: null\n};\nvar MAX_BOX_WIDTH = 50;\n\nvar BoxPlotSeries_x = function x(d) {\n  return d.x;\n};\n\nvar BoxPlotSeries_y = function y(d) {\n  return d.y;\n};\n\nvar BoxPlotSeries_min = function min(d) {\n  return d.min;\n};\n\nvar BoxPlotSeries_max = function max(d) {\n  return d.max;\n};\n\nvar BoxPlotSeries_median = function median(d) {\n  return d.median;\n};\n\nvar BoxPlotSeries_firstQuartile = function firstQuartile(d) {\n  return d.firstQuartile;\n};\n\nvar BoxPlotSeries_thirdQuartile = function thirdQuartile(d) {\n  return d.thirdQuartile;\n};\n\nvar BoxPlotSeries_outliers = function outliers(d) {\n  return d.outliers || [];\n};\n\nvar BoxPlotSeries_BoxPlotSeries =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inheritsLoose(BoxPlotSeries, _React$PureComponent);\n\n  function BoxPlotSeries() {\n    return _React$PureComponent.apply(this, arguments) || this;\n  }\n\n  var _proto = BoxPlotSeries.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        containerEvents = _this$props.containerEvents,\n        data = _this$props.data,\n        fill = _this$props.fill,\n        stroke = _this$props.stroke,\n        strokeWidth = _this$props.strokeWidth,\n        xScale = _this$props.xScale,\n        yScale = _this$props.yScale,\n        horizontal = _this$props.horizontal,\n        widthRatio = _this$props.widthRatio,\n        fillOpacity = _this$props.fillOpacity,\n        containerProps = _this$props.containerProps,\n        outlierProps = _this$props.outlierProps,\n        boxProps = _this$props.boxProps,\n        minProps = _this$props.minProps,\n        maxProps = _this$props.maxProps,\n        medianProps = _this$props.medianProps,\n        onMouseMove = _this$props.onMouseMove,\n        onMouseLeave = _this$props.onMouseLeave,\n        disableMouseEvents = _this$props.disableMouseEvents,\n        onClick = _this$props.onClick;\n    if (!xScale || !yScale) return null;\n    var offsetScale = horizontal ? yScale : xScale;\n    var offsetValue = horizontal ? BoxPlotSeries_y : BoxPlotSeries_x;\n    var valueScale = horizontal ? xScale : yScale;\n    var boxWidth = offsetScale.bandwidth();\n    var actualWidth = Math.min(MAX_BOX_WIDTH, boxWidth);\n    var offset = (offsetScale.offset || 0) - (boxWidth - actualWidth) / 2;\n    var offsetPropName = horizontal ? \'top\' : \'left\';\n\n    var offsetProp = function offsetProp(d) {\n      var _ref;\n\n      return _ref = {}, _ref[offsetPropName] = offsetScale(offsetValue(d)) - offset + (1 - widthRatio) / 2 * actualWidth, _ref;\n    };\n\n    var mouseEventProps = function mouseEventProps(d, i) {\n      return {\n        onMouseMove: disableMouseEvents ? null : onMouseMove && function () {\n          return function (event) {\n            onMouseMove({\n              event: event,\n              data: data,\n              datum: d,\n              index: i\n            });\n          };\n        },\n        onMouseLeave: disableMouseEvents ? null : onMouseLeave && function () {\n          return onMouseLeave;\n        },\n        onClick: disableMouseEvents ? null : onClick && function () {\n          return function (event) {\n            onClick({\n              event: event,\n              data: data,\n              datum: d,\n              index: i\n            });\n          };\n        }\n      };\n    };\n\n    return react_default.a.createElement(vx_group_es["a" /* Group */], null, data.map(function (d, i) {\n      var mouseEvents = mouseEventProps(d, i);\n      return Object(chartUtils["j" /* isDefined */])(BoxPlotSeries_min(d)) && react_default.a.createElement(FocusBlurHandler["a" /* default */], {\n        key: offsetValue(d),\n        xlinkHref: "#",\n        onBlur: disableMouseEvents ? null : onMouseLeave,\n        onFocus: disableMouseEvents ? null : function (event) {\n          onMouseMove({\n            event: event,\n            data: data,\n            datum: d,\n            index: i\n          });\n        }\n      }, react_default.a.createElement(vx_stats_es_BoxPlot, BoxPlotSeries_extends({\n        min: BoxPlotSeries_min(d),\n        max: BoxPlotSeries_max(d)\n      }, offsetProp(d), {\n        firstQuartile: BoxPlotSeries_firstQuartile(d),\n        thirdQuartile: BoxPlotSeries_thirdQuartile(d),\n        median: BoxPlotSeries_median(d),\n        boxWidth: actualWidth * widthRatio,\n        outliers: BoxPlotSeries_outliers(d),\n        fill: d.fill || Object(chartUtils["b" /* callOrValue */])(fill, d, i),\n        stroke: d.stroke || Object(chartUtils["b" /* callOrValue */])(stroke, d, i),\n        strokeWidth: d.strokeWidth || Object(chartUtils["b" /* callOrValue */])(strokeWidth, d, i),\n        fillOpacity: d.fillOpacity || Object(chartUtils["b" /* callOrValue */])(fillOpacity, d, i),\n        valueScale: valueScale,\n        horizontal: horizontal,\n        container: containerEvents,\n        containerProps: (containerEvents || containerProps || undefined) && BoxPlotSeries_extends({}, containerProps, containerEvents && mouseEvents),\n        outlierProps: (!containerEvents || outlierProps || undefined) && BoxPlotSeries_extends({}, outlierProps, !containerEvents && mouseEvents),\n        boxProps: (!containerEvents || boxProps || undefined) && BoxPlotSeries_extends({}, boxProps, !containerEvents && mouseEvents),\n        minProps: (!containerEvents || minProps || undefined) && BoxPlotSeries_extends({}, minProps, !containerEvents && mouseEvents),\n        maxProps: (!containerEvents || maxProps || undefined) && BoxPlotSeries_extends({}, maxProps, !containerEvents && mouseEvents),\n        medianProps: (!containerEvents || medianProps || undefined) && BoxPlotSeries_extends({}, medianProps, !containerEvents && mouseEvents)\n      })));\n    }));\n  };\n\n  return BoxPlotSeries;\n}(react_default.a.PureComponent);\n\n\nBoxPlotSeries_BoxPlotSeries.propTypes = propTypes;\nBoxPlotSeries_BoxPlotSeries.defaultProps = defaultProps;\nBoxPlotSeries_BoxPlotSeries.displayName = \'BoxPlotSeries\';\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@data-ui/theme/esm/chartTheme.js + 2 modules\nvar chartTheme = __webpack_require__(2408);\n\n// EXTERNAL MODULE: ../superset-ui-core/src/chart-composition/legend/WithLegend.tsx\nvar WithLegend = __webpack_require__(1060);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/typeGuards/ChannelDef.js\nvar ChannelDef = __webpack_require__(1936);\n\n// EXTERNAL MODULE: ../superset-ui-core/src/utils/isDefined.ts\nvar isDefined = __webpack_require__(468);\n\n// EXTERNAL MODULE: ../superset-ui-core/src/chart-composition/tooltip/TooltipFrame.tsx\nvar TooltipFrame = __webpack_require__(1061);\n\n// EXTERNAL MODULE: ../superset-ui-core/src/chart-composition/tooltip/TooltipTable.tsx\nvar TooltipTable = __webpack_require__(1062);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/preset-chart-xy/src/components/BoxPlot/DefaultTooltipRenderer.tsx\n\n\nfunction DefaultTooltipRenderer({ datum, color, encoder, }) {\n    const { label, min, max, median, firstQuartile, thirdQuartile, outliers } = datum;\n    const { channels } = encoder;\n    const { formatValue } = channels.y;\n    const data = [];\n    if (Object(isDefined["a" /* default */])(min)) {\n        data.push({ key: \'Min\', valueColumn: formatValue(min) });\n    }\n    if (Object(isDefined["a" /* default */])(max)) {\n        data.push({ key: \'Max\', valueColumn: formatValue(max) });\n    }\n    if (Object(isDefined["a" /* default */])(median)) {\n        data.push({ key: \'Median\', valueColumn: formatValue(median) });\n    }\n    if (Object(isDefined["a" /* default */])(firstQuartile)) {\n        data.push({ key: \'1st Quartile\', valueColumn: formatValue(firstQuartile) });\n    }\n    if (Object(isDefined["a" /* default */])(thirdQuartile)) {\n        data.push({ key: \'3rd Quartile\', valueColumn: formatValue(thirdQuartile) });\n    }\n    if (Object(isDefined["a" /* default */])(outliers) && outliers.length > 0) {\n        data.push({ key: \'# Outliers\', valueColumn: outliers.length });\n    }\n    return (react_default.a.createElement(TooltipFrame["a" /* default */], null,\n        react_default.a.createElement("div", null,\n            react_default.a.createElement("strong", { style: { color } }, label)),\n        data.length > 0 && react_default.a.createElement("br", null),\n        react_default.a.createElement(TooltipTable["a" /* default */], { data: data })));\n}\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/encoders/createEncoderFactory.js + 53 modules\nvar createEncoderFactory = __webpack_require__(2220);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/preset-chart-xy/src/components/BoxPlot/Encoder.ts\n\nconst boxPlotEncoderFactory = Object(createEncoderFactory["a" /* default */])({\n    channelTypes: {\n        x: \'XBand\',\n        y: \'YBand\',\n        color: \'Color\',\n    },\n    defaultEncoding: {\n        x: { field: \'x\', type: \'nominal\' },\n        y: { field: \'y\', type: \'quantitative\' },\n        color: { value: \'#222\' },\n    },\n});\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/preset-chart-xy/src/utils/createMarginSelector.tsx\nvar createMarginSelector = __webpack_require__(1978);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/preset-chart-xy/src/utils/convertScaleToDataUIScaleShape.ts\nvar convertScaleToDataUIScaleShape = __webpack_require__(1979);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/preset-chart-xy/src/utils/createXYChartLayoutWithTheme.ts + 3 modules\nvar createXYChartLayoutWithTheme = __webpack_require__(1980);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/preset-chart-xy/src/components/legend/createRenderLegend.tsx + 3 modules\nvar createRenderLegend = __webpack_require__(1981);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/preset-chart-xy/src/components/BoxPlot/BoxPlot.tsx\n\n\n\n\n\n\n\n\n\n\n\nconst BoxPlot_defaultProps = {\n    className: \'\',\n    margin: createMarginSelector["a" /* DEFAULT_MARGIN */],\n    encoding: {},\n    theme: chartTheme["a" /* default */],\n    TooltipRenderer: DefaultTooltipRenderer,\n};\nclass BoxPlot_BoxPlot extends react_default.a.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.createEncoder = boxPlotEncoderFactory.createSelector();\n        this.createMargin = Object(createMarginSelector["b" /* default */])();\n        this.renderChart = (dim) => {\n            const { width, height } = dim;\n            const { data, margin, theme, TooltipRenderer, encoding } = this.props;\n            const encoder = this.createEncoder(encoding);\n            const { channels } = encoder;\n            const isHorizontal = Object(ChannelDef["a" /* isFieldDef */])(channels.y.definition) && channels.y.definition.type === \'nominal\';\n            encoder.setDomainFromDataset(data);\n            const layout = Object(createXYChartLayoutWithTheme["a" /* default */])({\n                width,\n                height,\n                margin: this.createMargin(margin),\n                theme,\n                xEncoder: channels.x,\n                yEncoder: channels.y,\n            });\n            return layout.renderChartWithFrame((chartDim) => (react_default.a.createElement(XYChart["a" /* default */], { showYGrid: true, width: chartDim.width, height: chartDim.height, ariaLabel: "BoxPlot", margin: layout.margin, renderTooltip: ({ datum, color }) => (react_default.a.createElement(TooltipRenderer, { datum: datum, color: color, encoder: encoder })), theme: theme, \n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                xScale: Object(convertScaleToDataUIScaleShape["a" /* default */])(channels.x.definition.scale), \n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                yScale: Object(convertScaleToDataUIScaleShape["a" /* default */])(channels.y.definition.scale) },\n                layout.renderXAxis(),\n                layout.renderYAxis(),\n                react_default.a.createElement(BoxPlotSeries_BoxPlotSeries, { key: Object(ChannelDef["a" /* isFieldDef */])(channels.x.definition) ? channels.x.definition.field : \'\', animated: true, data: isHorizontal\n                        ? data.map(row => (Object.assign(Object.assign({}, row), { y: channels.y.getValueFromDatum(row) })))\n                        : data.map(row => (Object.assign(Object.assign({}, row), { x: channels.x.getValueFromDatum(row) }))), fill: (datum) => channels.color.encodeDatum(datum, \'#55acee\'), fillOpacity: 0.4, stroke: (datum) => channels.color.encodeDatum(datum), strokeWidth: 1, widthRatio: 0.6, horizontal: isHorizontal }))));\n        };\n    }\n    render() {\n        const { className, data, encoding, width, height } = this.props;\n        return (react_default.a.createElement(WithLegend["a" /* default */], { className: `superset-chart-box-plot ${className}`, width: width, height: height, position: "top", renderLegend: Object(createRenderLegend["a" /* default */])(this.createEncoder(encoding), data, this.props), renderChart: this.renderChart }));\n    }\n}\nBoxPlot_BoxPlot.defaultProps = BoxPlot_defaultProps;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2391\n')}}]);