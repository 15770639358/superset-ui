(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{2386:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ROTATION\", function() { return ROTATION; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var d3_cloud__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2342);\n/* harmony import */ var d3_cloud__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(d3_cloud__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var encodable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2220);\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1048);\n/* harmony import */ var _superset_ui_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(68);\n\n\n\n\nconst ROTATION = {\n    flat: () => 0,\n    // this calculates a random rotation between -90 and 90 degrees.\n    random: () => Math.floor(Object(_superset_ui_core__WEBPACK_IMPORTED_MODULE_3__[/* seedRandom */ \"b\"])() * 6 - 3) * 30,\n    square: () => Math.floor(Object(_superset_ui_core__WEBPACK_IMPORTED_MODULE_3__[/* seedRandom */ \"b\"])() * 2) * 90,\n};\nconst defaultProps = {\n    encoding: {},\n    rotation: 'flat',\n};\nconst SCALE_FACTOR_STEP = 0.5;\nconst MAX_SCALE_FACTOR = 3;\n// Percentage of top results that will always be displayed.\n// Needed to avoid clutter when shrinking a chart with many records.\nconst TOP_RESULTS_PERCENTAGE = 0.1;\nclass WordCloud extends react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent {\n    constructor(props) {\n        super(props);\n        // Cannot name it isMounted because of conflict\n        // with React's component function name\n        this.isComponentMounted = false;\n        this.wordCloudEncoderFactory = Object(encodable__WEBPACK_IMPORTED_MODULE_2__[/* default */ \"a\"])({\n            channelTypes: {\n                color: 'Color',\n                fontFamily: 'Category',\n                fontSize: 'Numeric',\n                fontWeight: 'Category',\n                text: 'Text',\n            },\n            defaultEncoding: {\n                color: { value: 'black' },\n                fontFamily: { value: this.props.theme.typography.families.sansSerif },\n                fontSize: { value: 20 },\n                fontWeight: { value: 'bold' },\n                text: { value: '' },\n            },\n        });\n        this.createEncoder = this.wordCloudEncoderFactory.createSelector();\n        this.state = {\n            words: [],\n            scaleFactor: 1,\n        };\n        this.setWords = this.setWords.bind(this);\n    }\n    componentDidMount() {\n        this.isComponentMounted = true;\n        this.update();\n    }\n    componentDidUpdate(prevProps) {\n        const { data, encoding, width, height, rotation } = this.props;\n        if (prevProps.data !== data ||\n            prevProps.encoding !== encoding ||\n            prevProps.width !== width ||\n            prevProps.height !== height ||\n            prevProps.rotation !== rotation) {\n            this.update();\n        }\n    }\n    componentWillUnmount() {\n        this.isComponentMounted = false;\n    }\n    setWords(words) {\n        if (this.isComponentMounted) {\n            this.setState({ words });\n        }\n    }\n    update() {\n        const { data, encoding } = this.props;\n        const encoder = this.createEncoder(encoding);\n        encoder.setDomainFromDataset(data);\n        const sortedData = [...data].sort((a, b) => encoder.channels.fontSize.encodeDatum(b, 0) - encoder.channels.fontSize.encodeDatum(a, 0));\n        const topResultsCount = Math.max(sortedData.length * TOP_RESULTS_PERCENTAGE, 10);\n        const topResults = sortedData.slice(0, topResultsCount);\n        // Ensure top results are always included in the final word cloud by scaling chart down if needed\n        this.generateCloud(encoder, 1, (words) => topResults.every((d) => words.find(({ text }) => encoder.channels.text.getValueFromDatum(d) === text)));\n    }\n    generateCloud(encoder, scaleFactor, isValid) {\n        const { data, width, height, rotation } = this.props;\n        d3_cloud__WEBPACK_IMPORTED_MODULE_1___default()()\n            .size([width * scaleFactor, height * scaleFactor])\n            // clone the data because cloudLayout mutates input\n            .words(data.map(d => (Object.assign({}, d))))\n            .padding(5)\n            .rotate(ROTATION[rotation] || ROTATION.flat)\n            .text(d => encoder.channels.text.getValueFromDatum(d))\n            .font(d => encoder.channels.fontFamily.encodeDatum(d, this.props.theme.typography.families.sansSerif))\n            .fontWeight(d => encoder.channels.fontWeight.encodeDatum(d, 'normal'))\n            .fontSize(d => encoder.channels.fontSize.encodeDatum(d, 0))\n            .on('end', (words) => {\n            if (isValid(words) || scaleFactor > MAX_SCALE_FACTOR) {\n                if (this.isComponentMounted) {\n                    this.setState({ words, scaleFactor });\n                }\n            }\n            else {\n                this.generateCloud(encoder, scaleFactor + SCALE_FACTOR_STEP, isValid);\n            }\n        })\n            .start();\n    }\n    render() {\n        const { scaleFactor } = this.state;\n        const { width, height, encoding } = this.props;\n        const { words } = this.state;\n        const encoder = this.createEncoder(encoding);\n        encoder.channels.color.setDomainFromDataset(words);\n        const viewBoxWidth = width * scaleFactor;\n        const viewBoxHeight = height * scaleFactor;\n        return (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"svg\", { width: width, height: height, viewBox: `-${viewBoxWidth / 2} -${viewBoxHeight / 2} ${viewBoxWidth} ${viewBoxHeight}` },\n            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"g\", null, words.map(w => (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"text\", { key: w.text, fontSize: `${w.size}px`, fontWeight: w.weight, fontFamily: w.font, fill: encoder.channels.color.encodeDatum(w, ''), textAnchor: \"middle\", transform: `translate(${w.x}, ${w.y}) rotate(${w.rotate})` }, w.text))))));\n    }\n}\nWordCloud.defaultProps = defaultProps;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(_superset_ui_core__WEBPACK_IMPORTED_MODULE_4__[/* b */ \"e\"])(WordCloud));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2386\n")}}]);