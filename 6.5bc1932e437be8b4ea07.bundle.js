(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{1928:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return isValueDef; });\n/* unused harmony export isNonValueDef */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return isFieldDef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return isTypedFieldDef; });\n/* unused harmony export isScaleFieldDef */\n/* unused harmony export isPositionFieldDef */\nfunction isValueDef(channelDef) {\n  return channelDef && 'value' in channelDef;\n}\nfunction isNonValueDef(channelDef) {\n  return channelDef && !('value' in channelDef);\n}\nfunction isFieldDef(channelDef) {\n  return channelDef && 'field' in channelDef && !!channelDef.field;\n}\nfunction isTypedFieldDef(channelDef) {\n  return isFieldDef(channelDef) && 'type' in channelDef && !!channelDef.type;\n}\nfunction isScaleFieldDef(channelDef) {\n  return isTypedFieldDef(channelDef) && 'scale' in channelDef;\n}\nfunction isPositionFieldDef(channelDef) {\n  return isTypedFieldDef(channelDef) && 'axis' in channelDef;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkyOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMvZXJpa19yaXR0ZXIvcmVwb3MvZ2l0aHViLmNvbS9hcGFjaGUtc3VwZXJzZXQvc3VwZXJzZXQtdWkvbm9kZV9tb2R1bGVzL2VuY29kYWJsZS9lc20vdHlwZUd1YXJkcy9DaGFubmVsRGVmLmpzPzg2NmQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzVmFsdWVEZWYoY2hhbm5lbERlZikge1xuICByZXR1cm4gY2hhbm5lbERlZiAmJiAndmFsdWUnIGluIGNoYW5uZWxEZWY7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNOb25WYWx1ZURlZihjaGFubmVsRGVmKSB7XG4gIHJldHVybiBjaGFubmVsRGVmICYmICEoJ3ZhbHVlJyBpbiBjaGFubmVsRGVmKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0ZpZWxkRGVmKGNoYW5uZWxEZWYpIHtcbiAgcmV0dXJuIGNoYW5uZWxEZWYgJiYgJ2ZpZWxkJyBpbiBjaGFubmVsRGVmICYmICEhY2hhbm5lbERlZi5maWVsZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGVkRmllbGREZWYoY2hhbm5lbERlZikge1xuICByZXR1cm4gaXNGaWVsZERlZihjaGFubmVsRGVmKSAmJiAndHlwZScgaW4gY2hhbm5lbERlZiAmJiAhIWNoYW5uZWxEZWYudHlwZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1NjYWxlRmllbGREZWYoY2hhbm5lbERlZikge1xuICByZXR1cm4gaXNUeXBlZEZpZWxkRGVmKGNoYW5uZWxEZWYpICYmICdzY2FsZScgaW4gY2hhbm5lbERlZjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Bvc2l0aW9uRmllbGREZWYoY2hhbm5lbERlZikge1xuICByZXR1cm4gaXNUeXBlZEZpZWxkRGVmKGNoYW5uZWxEZWYpICYmICdheGlzJyBpbiBjaGFubmVsRGVmO1xufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1928\n")},2404:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return isCompleteValueDef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return isCompleteFieldDef; });\nfunction isCompleteValueDef(def) {\n  return 'value' in def;\n}\nfunction isCompleteFieldDef(def) {\n  return 'field' in def;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQwNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMvZXJpa19yaXR0ZXIvcmVwb3MvZ2l0aHViLmNvbS9hcGFjaGUtc3VwZXJzZXQvc3VwZXJzZXQtdWkvbm9kZV9tb2R1bGVzL2VuY29kYWJsZS9lc20vdHlwZUd1YXJkcy9Db21wbGV0ZUNoYW5uZWxEZWYuanM/MmJkOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNDb21wbGV0ZVZhbHVlRGVmKGRlZikge1xuICByZXR1cm4gJ3ZhbHVlJyBpbiBkZWY7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNDb21wbGV0ZUZpZWxkRGVmKGRlZikge1xuICByZXR1cm4gJ2ZpZWxkJyBpbiBkZWY7XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2404\n")},2465:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"a\", function() { return /* binding */ createEncoderFactory; });\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/reselect/es/index.js\nvar es = __webpack_require__(181);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/typeGuards/ChannelDef.js\nvar ChannelDef = __webpack_require__(1928);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/typeGuards/Base.js\nfunction isArray(maybeArray) {\n  return Array.isArray(maybeArray);\n}\nfunction isNotArray(maybeArray) {\n  return !Array.isArray(maybeArray);\n}\nfunction isDefined(value) {\n  return typeof value !== 'undefined' && value !== null;\n}\nfunction isEveryElementDefined(array) {\n  return array.every(isDefined);\n}\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-array/src/extent.js\nvar src_extent = __webpack_require__(279);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/types/scale/ScaleType.js\n// Modified from vega-lite\n// because vega-lite uses namespace which has issues with babel and typescript\nconst ScaleType = {\n  // Continuous - Quantitative\n  LINEAR: 'linear',\n  LOG: 'log',\n  POW: 'pow',\n  SQRT: 'sqrt',\n  SYMLOG: 'symlog',\n  // Continuous - Time\n  TIME: 'time',\n  UTC: 'utc',\n  // Discretizing scales\n  QUANTILE: 'quantile',\n  QUANTIZE: 'quantize',\n  THRESHOLD: 'threshold',\n  BIN_ORDINAL: 'bin-ordinal',\n  // Discrete scales\n  ORDINAL: 'ordinal',\n  POINT: 'point',\n  BAND: 'band'\n};\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/typeGuards/Channel.js\nfunction isX(channelType) {\n  return channelType === 'X' || channelType === 'XBand';\n}\nfunction isY(channelType) {\n  return channelType === 'Y' || channelType === 'YBand';\n}\nfunction isXOrY(channelType) {\n  return isX(channelType) || isY(channelType);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/utils/keys.js\n/**\n * This is a stricter version of Object.keys but with better types.\n * See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\n */\nconst keys = Object.keys;\n/* harmony default export */ var utils_keys = (keys);\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/dateTimeToTimestamp.js\n// Modified from vega-lite version\n// and remove unnecessary dependency\n\n/* eslint-disable no-param-reassign */\n\n/* eslint-disable no-negated-condition */\n\n/**\n * Internal Object for defining datetime expressions.\n * This is an expression version of DateTime.\n * If both month and quarter are provided, month has higher precedence.\n * `day` cannot be combined with other date.\n */\n\nfunction invalidTimeUnit(unitName, value) {\n  return \"Invalid \" + unitName + \": \" + String(value) + \".\";\n}\n/*\n * A designated year that starts on Sunday.\n */\n\n\nconst SUNDAY_YEAR = 2006;\nconst MONTHS = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\nconst SHORT_MONTHS = MONTHS.map(m => m.slice(0, 3));\nconst DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\nconst SHORT_DAYS = DAYS.map(d => d.slice(0, 3));\n\nfunction isNumber(x) {\n  return typeof x === 'number';\n}\n/**\n * Returns whether the passed in value is a valid number.\n */\n\n\nfunction isNumeric(value) {\n  if (isNumber(value)) {\n    return true;\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  return !isNaN(value) && !isNaN(parseFloat(value));\n}\n\nfunction normalizeQuarter(q) {\n  if (isNumeric(q)) {\n    q = Number(q);\n  }\n\n  if (isNumber(q)) {\n    if (q > 4) {\n      // eslint-disable-next-line no-console\n      console.warn(invalidTimeUnit('quarter', q));\n    } // We accept 1-based quarter, so need to readjust to 0-based quarter\n\n\n    return q - 1;\n  } // Invalid quarter\n\n\n  throw new Error(invalidTimeUnit('quarter', q));\n}\nfunction normalizeMonth(m) {\n  if (isNumeric(m)) {\n    m = Number(m);\n  }\n\n  if (isNumber(m)) {\n    // We accept 1-based month, so need to readjust to 0-based month\n    return m - 1;\n  }\n\n  const lowerM = m.toLowerCase();\n  const monthIndex = MONTHS.indexOf(lowerM);\n\n  if (monthIndex !== -1) {\n    return monthIndex; // 0 for january, ...\n  }\n\n  const shortM = lowerM.slice(0, 3);\n  const shortMonthIndex = SHORT_MONTHS.indexOf(shortM);\n\n  if (shortMonthIndex !== -1) {\n    return shortMonthIndex;\n  } // Invalid month\n\n\n  throw new Error(invalidTimeUnit('month', m));\n}\nfunction normalizeDay(d) {\n  if (isNumeric(d)) {\n    d = Number(d);\n  }\n\n  if (isNumber(d)) {\n    // mod so that this can be both 0-based where 0 = sunday\n    // and 1-based where 7=sunday\n    return d % 7;\n  }\n\n  const lowerD = d.toLowerCase();\n  const dayIndex = DAYS.indexOf(lowerD);\n\n  if (dayIndex !== -1) {\n    return dayIndex; // 0 for january, ...\n  }\n\n  const shortD = lowerD.slice(0, 3);\n  const shortDayIndex = SHORT_DAYS.indexOf(shortD);\n\n  if (shortDayIndex !== -1) {\n    return shortDayIndex;\n  } // Invalid day\n\n\n  throw new Error(invalidTimeUnit('day', d));\n}\n/**\n * @param d the date.\n * @param normalize whether to normalize quarter, month, day. This should probably be true if d is a DateTime.\n * @returns array of date time parts [year, month, day, hours, minutes, seconds, milliseconds]\n */\n\nfunction dateTimeParts(d, normalize) {\n  const parts = [];\n\n  if (normalize && d.day !== undefined) {\n    if (utils_keys(d).length > 1) {\n      d = { ...d\n      };\n      delete d.day;\n    }\n  }\n\n  if (d.year !== undefined) {\n    parts.push(d.year);\n  } else if (d.day !== undefined) {\n    // Set year to 2006 for working with day since January 1 2006 is a Sunday\n    parts.push(SUNDAY_YEAR);\n  } else {\n    parts.push(0);\n  }\n\n  if (d.month !== undefined) {\n    const month = normalize ? normalizeMonth(d.month) : d.month;\n    parts.push(month);\n  } else if (d.quarter !== undefined) {\n    const quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;\n    parts.push(isNumber(quarter) ? quarter * 3 : quarter + \"*3\");\n  } else {\n    parts.push(0); // months start at zero in JS\n  }\n\n  if (d.date !== undefined) {\n    parts.push(d.date);\n  } else if (d.day !== undefined) {\n    // HACK: Day only works as a standalone unit\n    // This is only correct because we always set year to 2006 for day\n    const day = normalize ? normalizeDay(d.day) : d.day;\n    parts.push(isNumber(day) ? day + 1 : day + \"+1\");\n  } else {\n    parts.push(1); // Date starts at 1 in JS\n  }\n\n  ['hours', 'minutes', 'seconds', 'milliseconds'].forEach(timeUnit => {\n    const unit = d[timeUnit];\n    parts.push(typeof unit === 'undefined' ? 0 : unit);\n  });\n  return parts;\n}\n/**\n * @param d the date time.\n * @returns the timestamp.\n */\n\nfunction dateTimeToTimestamp(d) {\n  const parts = dateTimeParts(d, true);\n\n  if (d.utc) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return Number(new Date(Date.UTC(...parts)));\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  return Number(new Date(...parts));\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/parseDateTime.js\n\nfunction parseDateTime(dateTime) {\n  if (typeof dateTime === 'number' || typeof dateTime === 'string') {\n    return new Date(dateTime);\n  }\n\n  return new Date(dateTimeToTimestamp(dateTime));\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/utils/inferElementTypeFromUnionOfArrayTypes.js\n/**\n * Type workaround for https://github.com/Microsoft/TypeScript/issues/7294#issuecomment-465794460\n * to avoid error \"Cannot invoke an expression whose type lacks a call signature\"\n * when using array.map\n */\nfunction inferElementTypeFromUnionOfArrayTypes(array) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return array;\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/typeGuards/DateTime.js\n// eslint-disable-next-line import/prefer-default-export\nfunction isDateTime(o) {\n  return !!o && !(o instanceof Date) && typeof o !== 'string' && typeof o !== 'boolean' && typeof o !== 'number' && ('year' in o && o.year != null || 'quarter' in o && o.quarter != null || 'month' in o && o.month != null || 'date' in o && o.date != null || 'day' in o && o.day != null || 'hours' in o && o.hours != null || 'minutes' in o && o.minutes != null || 'seconds' in o && o.seconds != null || 'milliseconds' in o && o.milliseconds != null);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/format/fallbackFormatter.js\nfunction fallbackFormatter(v) {\n  return \"\" + v;\n}\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/options/Encodable.js\nvar Encodable = __webpack_require__(1170);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/format/createFormatter.js\n\n\nfunction createFormatter({\n  formatType,\n  format,\n  formatInLocalTime\n}) {\n  if (formatType === 'time') {\n    const formatter = Encodable[\"a\" /* default */].resolveTimeFormat({\n      format,\n      formatInLocalTime\n    });\n    return value => formatter(value);\n  }\n\n  if (formatType === 'number' || typeof format !== 'undefined' && format.length > 0) {\n    const formatter = Encodable[\"a\" /* default */].resolveNumberFormat(format);\n    return value => formatter(value);\n  }\n\n  return fallbackFormatter;\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/encoders/ChannelEncoderAxis.js\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nclass ChannelEncoderAxis_ChannelEncoderAxis {\n  constructor(channelEncoder) {\n    _defineProperty(this, \"channelEncoder\", void 0);\n\n    _defineProperty(this, \"config\", void 0);\n\n    _defineProperty(this, \"formatValue\", void 0);\n\n    this.channelEncoder = channelEncoder;\n    this.config = channelEncoder.definition.axis;\n    this.formatValue = createFormatter(this.config);\n  }\n\n  getTitle() {\n    return this.config.title;\n  }\n\n  hasTitle() {\n    const {\n      title\n    } = this.config;\n    return title !== null && typeof title !== 'undefined' && title !== '';\n  }\n\n  getTickLabels() {\n    const {\n      tickCount,\n      values\n    } = this.config;\n\n    if (typeof values !== 'undefined') {\n      return inferElementTypeFromUnionOfArrayTypes(values).map(v => this.formatValue(isDateTime(v) ? parseDateTime(v) : v));\n    }\n\n    const {\n      scale\n    } = this.channelEncoder;\n\n    if (scale && 'domain' in scale) {\n      const ticks = 'ticks' in scale ? scale.ticks(tickCount) : scale.domain();\n      return ticks.map(this.formatValue);\n    }\n\n    return [];\n  }\n\n}\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/lodash.get/index.js\nvar lodash_get = __webpack_require__(1172);\nvar lodash_get_default = /*#__PURE__*/__webpack_require__.n(lodash_get);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/createGetterFromChannelDef.js\n\n\nfunction createGetterFromChannelDef(definition) {\n  if (Object(ChannelDef[\"c\" /* isValueDef */])(definition)) {\n    return () => definition.value;\n  }\n\n  if (typeof definition.field !== 'undefined') {\n    return x => lodash_get_default()(x, definition.field);\n  }\n\n  return () => undefined;\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/utils/isDisabled.js\nfunction isDisabled(config) {\n  return config === false || config === null;\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/utils/isEnabled.js\n\nfunction isEnabled(config) {\n  return !isDisabled(config);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/fillers/expandLabelOverlapStrategy.js\n\nconst STRATEGY_FLAT = {\n  strategy: 'flat'\n};\nconst STRATEGY_ROTATE = {\n  labelAngle: 40,\n  strategy: 'rotate'\n};\nfunction expandLabelOverlapStrategy(channelType, labelOverlap = 'auto') {\n  let output;\n\n  switch (labelOverlap) {\n    case 'flat':\n      output = STRATEGY_FLAT;\n      break;\n\n    case 'rotate':\n      output = STRATEGY_ROTATE;\n      break;\n\n    case 'auto':\n      output = isX(channelType) ? STRATEGY_ROTATE : STRATEGY_FLAT;\n      break;\n\n    default:\n      output = labelOverlap;\n      break;\n  }\n\n  return { ...output\n  };\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/scaleCategories.js\n // Grouped by domain and range\n\nconst continuousToContinuousScaleTypes = [ScaleType.LINEAR, ScaleType.POW, ScaleType.SQRT, ScaleType.SYMLOG, ScaleType.LOG, ScaleType.TIME, ScaleType.UTC];\nconst continuousToContinuousScaleTypesSet = new Set(continuousToContinuousScaleTypes);\nconst continuousToDiscreteScaleTypes = [ScaleType.QUANTILE, ScaleType.QUANTIZE, ScaleType.THRESHOLD];\nconst continuousToDiscreteScaleTypesSet = new Set(continuousToDiscreteScaleTypes); // Grouped by Domain\n\nconst continuousDomainScaleTypes = continuousToContinuousScaleTypes.concat(continuousToDiscreteScaleTypes);\nconst continuousDomainScaleTypesSet = new Set(continuousDomainScaleTypes);\nconst discreteDomainScaleTypes = [ScaleType.ORDINAL, ScaleType.BIN_ORDINAL, ScaleType.POINT, ScaleType.BAND];\nconst discreteDomainScaleTypesSet = new Set(discreteDomainScaleTypes); // Three broad categories\n\nconst continuousScaleTypes = continuousToContinuousScaleTypes;\nconst continuousScaleTypesSet = continuousToContinuousScaleTypesSet;\nconst discreteScaleTypes = [ScaleType.BAND, ScaleType.POINT, ScaleType.ORDINAL];\nconst discreteScaleTypesSet = new Set(discreteScaleTypes);\nconst discretizingScaleTypes = [ScaleType.BIN_ORDINAL, ScaleType.QUANTILE, ScaleType.QUANTIZE, ScaleType.THRESHOLD];\nconst discretizingScaleTypesSet = new Set(discretizingScaleTypes); // Others\n\nconst timeScaleTypes = [ScaleType.TIME, ScaleType.UTC];\nconst timeScaleTypesSet = new Set(timeScaleTypes);\nconst allScaleTypes = [ScaleType.LINEAR, ScaleType.LOG, ScaleType.POW, ScaleType.SQRT, ScaleType.SYMLOG, ScaleType.TIME, ScaleType.UTC, ScaleType.QUANTILE, ScaleType.QUANTIZE, ScaleType.THRESHOLD, ScaleType.BIN_ORDINAL, ScaleType.ORDINAL, ScaleType.POINT, ScaleType.BAND];\nconst allScaleTypesSet = new Set(allScaleTypes);\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/fillers/completeAxisConfig.js\n\n\n\n\n\n\nfunction isChannelDefWithAxisSupport(channelType, channelDef) {\n  return Object(ChannelDef[\"b\" /* isTypedFieldDef */])(channelDef) && isXOrY(channelType);\n}\n\nfunction completeAxisConfig(channelType, channelDef) {\n  if (isChannelDefWithAxisSupport(channelType, channelDef) && isEnabled(channelDef.axis)) {\n    const axis = channelDef.axis === true || typeof channelDef.axis === 'undefined' ? {} : channelDef.axis;\n    const isXChannel = isX(channelType);\n    const {\n      format = channelDef.format,\n      formatType = channelDef.formatType,\n      formatInLocalTime = channelDef.formatInLocalTime,\n      labelAngle = 0,\n      labelFlush,\n      labelOverlap,\n      labelPadding = 4,\n      orient = isXChannel ? 'bottom' : 'left',\n      tickCount = 5,\n      ticks = true,\n      title = channelDef.title,\n      titlePadding = 4\n    } = axis;\n    const output = { ...axis,\n      format,\n      formatType,\n      labelAngle,\n      labelFlush: typeof labelFlush === 'undefined' ? channelDef.scale && typeof channelDef.scale.type !== 'undefined' && continuousToContinuousScaleTypesSet.has(channelDef.scale.type) : labelFlush,\n      labelOverlap: expandLabelOverlapStrategy(channelType, labelOverlap),\n      labelPadding,\n      orient,\n      tickCount,\n      ticks,\n      title,\n      titlePadding\n    };\n\n    if (typeof formatInLocalTime !== 'undefined') {\n      output.formatInLocalTime = formatInLocalTime;\n    }\n\n    return output;\n  }\n\n  return false;\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/fillers/completeFormatConfig.js\nfunction completeFormatConfig(config) {\n  const {\n    formatType,\n    formatInLocalTime,\n    format,\n    type,\n    scaleType\n  } = config;\n  let resolvedFormatType;\n\n  if (typeof formatType !== 'undefined') {\n    resolvedFormatType = formatType;\n  } else if (type === 'quantitative') {\n    resolvedFormatType = 'number';\n  } else if (type === 'temporal' || scaleType === 'time' || scaleType === 'utc') {\n    resolvedFormatType = 'time';\n  } else if (typeof format !== 'undefined' && format.length > 0) {\n    resolvedFormatType = 'number';\n  }\n\n  if (resolvedFormatType === 'time') {\n    return {\n      formatType: 'time',\n      formatInLocalTime: formatInLocalTime || typeof formatInLocalTime === 'undefined' && scaleType === 'time',\n      format\n    };\n  }\n\n  return {\n    formatType: resolvedFormatType,\n    format\n  };\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/fillers/completeLegendConfig.js\n\nfunction completeLegendConfig(channelType, channelDef) {\n  if ('legend' in channelDef && channelDef.legend !== undefined) {\n    return channelDef.legend;\n  }\n\n  return isXOrY(channelType) || channelType === 'Text' ? false : {};\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/fillers/inferScaleType.js\n\n/**\n * Sometimes scale type is not specified but can be inferred\n * from other fields.\n * See https://vega.github.io/vega-lite/docs/scale.html\n * @param channelType type of the channel\n * @param fieldType type of the field\n * @param bin is value binned\n */\n\nfunction inferScaleType(channelType, fieldType, bin = false) {\n  if (fieldType === 'nominal' || fieldType === 'ordinal') {\n    switch (channelType) {\n      // For positional (x and y) ordinal and ordinal fields,\n      // \"point\" is the default scale type for all marks\n      // except bar and rect marks, which use \"band\" scales.\n      // https://vega.github.io/vega-lite/docs/scale.html\n      case 'XBand':\n      case 'YBand':\n        return ScaleType.BAND;\n\n      case 'X':\n      case 'Y':\n      case 'Numeric':\n        return ScaleType.POINT;\n\n      case 'Color':\n      case 'Category':\n        return ScaleType.ORDINAL;\n\n      default:\n    }\n  } else if (fieldType === 'quantitative') {\n    switch (channelType) {\n      case 'XBand':\n      case 'YBand':\n      case 'X':\n      case 'Y':\n      case 'Numeric':\n        return ScaleType.LINEAR;\n\n      case 'Color':\n        return bin ? ScaleType.BIN_ORDINAL : ScaleType.LINEAR;\n\n      default:\n    }\n  } else if (fieldType === 'temporal') {\n    switch (channelType) {\n      case 'XBand':\n      case 'YBand':\n      case 'X':\n      case 'Y':\n      case 'Numeric':\n        return ScaleType.UTC;\n\n      case 'Color':\n        return ScaleType.LINEAR;\n\n      default:\n    }\n  }\n\n  return undefined;\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/isPropertySupportedByScaleType.js\n\n\nconst pointOrBand = [ScaleType.POINT, ScaleType.BAND];\nconst pointOrBandSet = new Set(pointOrBand);\nconst exceptPointOrBand = allScaleTypes.filter(type => !pointOrBandSet.has(type));\nconst exceptPointOrBandSet = new Set(exceptPointOrBand);\nconst continuousOrPointOrBandSet = new Set(continuousScaleTypes.concat(pointOrBand));\nconst zeroSet = new Set(continuousDomainScaleTypes); // log scale cannot have zero value\n\nzeroSet.delete(ScaleType.LOG); // zero is not meaningful for time\n\nzeroSet.delete(ScaleType.TIME);\nzeroSet.delete(ScaleType.UTC); // threshold requires custom domain so zero does not matter\n\nzeroSet.delete(ScaleType.THRESHOLD); // quantile depends on distribution so zero does not matter\n\nzeroSet.delete(ScaleType.QUANTILE);\nconst supportedScaleTypes = {\n  align: pointOrBandSet,\n  base: new Set([ScaleType.LOG]),\n  clamp: continuousScaleTypesSet,\n  constant: new Set([ScaleType.SYMLOG]),\n  domain: allScaleTypesSet,\n  exponent: new Set([ScaleType.POW]),\n  interpolate: exceptPointOrBandSet,\n  nice: new Set(continuousScaleTypes.concat([ScaleType.QUANTIZE, ScaleType.THRESHOLD])),\n  padding: continuousOrPointOrBandSet,\n  paddingInner: new Set([ScaleType.BAND]),\n  paddingOuter: pointOrBandSet,\n  range: allScaleTypesSet,\n  reverse: allScaleTypesSet,\n  round: continuousOrPointOrBandSet,\n  scheme: exceptPointOrBandSet,\n  type: allScaleTypesSet,\n  unknown: new Set([ScaleType.ORDINAL]),\n  zero: zeroSet\n};\nfunction isPropertySupportedByScaleType(property, scaleType) {\n  return supportedScaleTypes[property].has(scaleType);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/typeGuards/ScaleConfig.js\n\n\nfunction isContinuousScaleConfig(config) {\n  return continuousScaleTypesSet.has(config.type);\n}\nfunction isDiscretizingScaleConfig(config) {\n  return discretizingScaleTypesSet.has(config.type);\n}\nfunction isDiscreteScaleConfig(config) {\n  return discreteScaleTypesSet.has(config.type);\n}\nfunction isScaleConfigWithZero(config) {\n  return isPropertySupportedByScaleType('zero', config.type);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/fillers/completeScaleConfig.js\n\n\n\n\n\nfunction completeScaleConfig(channelType, channelDef) {\n  if (Object(ChannelDef[\"b\" /* isTypedFieldDef */])(channelDef) && isEnabled(channelDef.scale)) {\n    const {\n      scale = {},\n      type,\n      bin\n    } = channelDef;\n    const {\n      type: scaleType = inferScaleType(channelType, type, bin)\n    } = scale;\n\n    if (typeof scaleType === 'undefined') {\n      return false;\n    } // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\n\n    const filledScale = { ...scale,\n      type: scaleType\n    };\n\n    if (isContinuousScaleConfig(filledScale)) {\n      if (typeof filledScale.nice === 'undefined') {\n        filledScale.nice = !timeScaleTypesSet.has(scaleType);\n      }\n\n      if (typeof filledScale.clamp === 'undefined') {\n        filledScale.clamp = true;\n      }\n    }\n\n    if (isScaleConfigWithZero(filledScale) && typeof filledScale.zero === 'undefined') {\n      filledScale.zero = true;\n    }\n\n    return filledScale;\n  }\n\n  return false;\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/fillers/inferFieldType.js\n\nconst temporalFieldNames = new Set(['time', 'date', 'datetime', 'timestamp']);\nfunction inferFieldType(channelType, field = '') {\n  if (isXOrY(channelType) || channelType === 'Numeric') {\n    return temporalFieldNames.has(field.toLowerCase()) ? 'temporal' : 'quantitative';\n  }\n\n  return 'nominal';\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/fillers/completeChannelDef.js\n\n\n\n\n\n\nfunction completeChannelDef(channelType, channelDef) {\n  var _channelDef$title;\n\n  if (Object(ChannelDef[\"c\" /* isValueDef */])(channelDef)) {\n    return { ...channelDef,\n      axis: false,\n      legend: false,\n      scale: false,\n      title: ''\n    };\n  } // Fill top-level properties\n\n\n  const copy = { ...channelDef,\n    title: Object(ChannelDef[\"a\" /* isFieldDef */])(channelDef) ? (_channelDef$title = channelDef.title) != null ? _channelDef$title : channelDef.field : '',\n    type: Object(ChannelDef[\"b\" /* isTypedFieldDef */])(channelDef) ? channelDef.type : inferFieldType(channelType, channelDef.field)\n  }; // Scale needs the top-level properties to be filled.\n\n  const scale = completeScaleConfig(channelType, copy); // Format needs scale.\n\n  const format = completeFormatConfig({ ...channelDef,\n    scaleType: scale ? scale.type : undefined\n  });\n  const copy2 = { ...copy,\n    ...format,\n    scale\n  }; // These need scale and format\n\n  const axis = completeAxisConfig(channelType, copy2);\n  const legend = completeLegendConfig(channelType, copy2);\n  return { ...copy2,\n    axis,\n    legend\n  };\n}\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/linear.js\nvar linear = __webpack_require__(70);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/log.js\nvar log = __webpack_require__(262);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/pow.js\nvar pow = __webpack_require__(214);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/time.js + 3 modules\nvar time = __webpack_require__(438);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/utcTime.js + 3 modules\nvar utcTime = __webpack_require__(1074);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/quantile.js\nvar quantile = __webpack_require__(981);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/quantize.js\nvar quantize = __webpack_require__(982);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/threshold.js\nvar threshold = __webpack_require__(983);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/ordinal.js\nvar ordinal = __webpack_require__(329);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/band.js + 1 modules\nvar band = __webpack_require__(590);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-scale/src/symlog.js\nvar symlog = __webpack_require__(263);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/createScaleFromScaleType.js\n\n\nfunction createScaleFromScaleType(type) {\n  switch (type) {\n    case ScaleType.LINEAR:\n      return Object(linear[\"a\" /* default */])();\n\n    case ScaleType.LOG:\n      return Object(log[\"a\" /* default */])();\n\n    case ScaleType.POW:\n      return Object(pow[\"a\" /* default */])();\n\n    case ScaleType.SQRT:\n      return Object(pow[\"c\" /* sqrt */])();\n\n    case ScaleType.TIME:\n      return Object(time[\"b\" /* default */])();\n\n    case ScaleType.UTC:\n      return Object(utcTime[\"a\" /* default */])();\n\n    case ScaleType.QUANTILE:\n      return Object(quantile[\"a\" /* default */])();\n\n    case ScaleType.QUANTIZE:\n      return Object(quantize[\"a\" /* default */])();\n\n    case ScaleType.THRESHOLD:\n      return Object(threshold[\"a\" /* default */])();\n\n    case ScaleType.ORDINAL:\n      return Object(ordinal[\"a\" /* default */])();\n\n    case ScaleType.POINT:\n      return Object(band[\"b\" /* point */])();\n\n    case ScaleType.BAND:\n      return Object(band[\"a\" /* default */])();\n\n    case ScaleType.SYMLOG:\n      return Object(symlog[\"a\" /* default */])();\n\n    case ScaleType.BIN_ORDINAL:\n      // TODO: Pending scale.bins implementation\n      throw new Error(\"\\\"type = \" + type + \"\\\" is not supported yet.\");\n\n    default:\n      return Object(linear[\"a\" /* default */])();\n  }\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyAlign.js\nfunction applyAlign(config, scale) {\n  if ('align' in config && typeof config.align !== 'undefined' && 'align' in scale) {\n    scale.align(config.align);\n  }\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyBase.js\nfunction applyBase(config, scale) {\n  if ('base' in config && typeof config.base !== 'undefined' && 'base' in scale) {\n    scale.base(config.base);\n  }\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyClamp.js\nfunction applyClamp(config, scale) {\n  if ('clamp' in config && config.clamp === true && 'clamp' in scale) {\n    scale.clamp(config.clamp);\n  }\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyExponent.js\nfunction applyExponent(config, scale) {\n  if ('exponent' in config && typeof config.exponent !== 'undefined' && 'exponent' in scale) {\n    scale.exponent(config.exponent);\n  }\n}\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/day.js\nvar day = __webpack_require__(574);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/hour.js\nvar hour = __webpack_require__(573);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/minute.js\nvar minute = __webpack_require__(572);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/month.js\nvar month = __webpack_require__(575);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/second.js\nvar second = __webpack_require__(327);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/week.js\nvar week = __webpack_require__(78);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/year.js\nvar year = __webpack_require__(576);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/utcDay.js\nvar utcDay = __webpack_require__(579);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/utcHour.js\nvar utcHour = __webpack_require__(578);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/utcMinute.js\nvar utcMinute = __webpack_require__(577);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/utcMonth.js\nvar utcMonth = __webpack_require__(580);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/utcWeek.js\nvar utcWeek = __webpack_require__(79);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-time/src/utcYear.js\nvar utcYear = __webpack_require__(581);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyNice.js\n\n\nconst localTimeIntervals = {\n  day: day[\"b\" /* default */],\n  hour: hour[\"a\" /* default */],\n  minute: minute[\"a\" /* default */],\n  month: month[\"a\" /* default */],\n  second: second[\"a\" /* default */],\n  week: week[\"g\" /* sunday */],\n  year: year[\"a\" /* default */]\n};\nconst utcIntervals = {\n  day: utcDay[\"a\" /* default */],\n  hour: utcHour[\"a\" /* default */],\n  minute: utcMinute[\"a\" /* default */],\n  month: utcMonth[\"a\" /* default */],\n  second: second[\"a\" /* default */],\n  week: utcWeek[\"g\" /* utcSunday */],\n  year: utcYear[\"a\" /* default */]\n};\nfunction applyNice(config, scale) {\n  if ('nice' in config && typeof config.nice !== 'undefined' && 'nice' in scale) {\n    const {\n      nice\n    } = config;\n\n    if (typeof nice === 'boolean') {\n      if (nice) {\n        scale.nice();\n      }\n    } else if (typeof nice === 'number') {\n      scale.nice(nice);\n    } else {\n      const timeScale = scale;\n      const {\n        type\n      } = config;\n\n      if (typeof nice === 'string') {\n        timeScale.nice(type === ScaleType.UTC ? utcIntervals[nice] : localTimeIntervals[nice]);\n      } else {\n        const {\n          interval,\n          step\n        } = nice;\n        const parsedInterval = (type === ScaleType.UTC ? utcIntervals[interval] : localTimeIntervals[interval]).every(step);\n\n        if (parsedInterval !== null) {\n          timeScale.nice(parsedInterval);\n        }\n      }\n    }\n  }\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/typeGuards/Scale.js\n\nfunction isContinuousScale(scale, scaleType) {\n  return scale && continuousScaleTypesSet.has(scaleType);\n}\nfunction isDiscretizingScale(scale, scaleType) {\n  return scale && discretizingScaleTypesSet.has(scaleType);\n}\nfunction isDiscreteScale(scale, scaleType) {\n  return scale && discreteScaleTypesSet.has(scaleType);\n}\nfunction isTimeScale(scale, scaleType) {\n  return scale && timeScaleTypesSet.has(scaleType);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyZero.js\n\nfunction applyZero(config, scale) {\n  if ('zero' in config && config.zero === true && isContinuousScale(scale, config.type)) {\n    const domain = scale.domain();\n    const [a, b] = domain;\n    const isDescending = b < a;\n    const [min, max] = isDescending ? [b, a] : [a, b];\n    const domainWithZero = [Math.min(0, min), Math.max(0, max)];\n    scale.domain(isDescending ? domainWithZero.reverse() : domainWithZero);\n  }\n}\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-interpolate/src/lab.js\nvar lab = __webpack_require__(1071);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-interpolate/src/hcl.js\nvar hcl = __webpack_require__(583);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-interpolate/src/hsl.js\nvar hsl = __webpack_require__(582);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-interpolate/src/cubehelix.js + 1 modules\nvar cubehelix = __webpack_require__(591);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-interpolate/src/rgb.js\nvar rgb = __webpack_require__(217);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/createColorInterpolator.js\n\nconst interpolatorMap = {\n  lab: lab[\"a\" /* default */],\n  hcl: hcl[\"a\" /* default */],\n  'hcl-long': hcl[\"b\" /* hclLong */],\n  hsl: hsl[\"a\" /* default */],\n  'hsl-long': hsl[\"b\" /* hslLong */],\n  cubehelix: cubehelix[\"b\" /* default */],\n  'cubehelix-long': cubehelix[\"a\" /* cubehelixLong */],\n  rgb: rgb[\"a\" /* default */]\n};\nfunction createColorInterpolator(interpolate) {\n  switch (interpolate) {\n    case 'lab':\n    case 'hcl':\n    case 'hcl-long':\n    case 'hsl':\n    case 'hsl-long':\n    case 'cubehelix':\n    case 'cubehelix-long':\n    case 'rgb':\n      return interpolatorMap[interpolate];\n\n    default:\n  }\n\n  const {\n    type,\n    gamma\n  } = interpolate;\n  const interpolator = interpolatorMap[type];\n  return typeof gamma === 'undefined' ? interpolator : interpolator.gamma(gamma);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyInterpolate.js\n\nfunction applyInterpolate(config, scale) {\n  if ('interpolate' in config && typeof config.interpolate !== 'undefined' && 'interpolate' in scale) {\n    scale.interpolate(createColorInterpolator(config.interpolate));\n  }\n}\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/node_modules/d3-interpolate/src/round.js\nvar round = __webpack_require__(1070);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyRound.js\n\nfunction applyRound(config, scale) {\n  if ('round' in config && config.round === true) {\n    const roundableScale = scale;\n\n    if ('round' in roundableScale) {\n      roundableScale.round(config.round);\n    } else {\n      roundableScale.interpolate(round[\"a\" /* default */]);\n    }\n  }\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/domain/parseContinuousDomain.js\n\n/**\n * Convert each element in the array into\n * - Date (for time scales)\n * - number (for other continuous scales)\n * @param domain\n * @param scaleType\n */\n\nfunction parseContinuousDomain(domain, scaleType) {\n  if (timeScaleTypesSet.has(scaleType)) {\n    return domain.filter(d => typeof d !== 'boolean').map(d => typeof d === 'string' || typeof d === 'number' ? new Date(d) : d);\n  }\n\n  return domain.map(d => typeof d === 'string' || typeof d === 'boolean' ? Number(d) : d);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/domain/parseDiscreteDomain.js\n/**\n * Discrete domains are converted into string[]\n * when using D3 scales\n * @param domain\n */\nfunction parseDiscreteDomain(domain) {\n  return domain.map(d => \"\" + d);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/utils/combineCategories.js\n/**\n * Combine two arrays into a unique list\n * by keeping the order the fixedCategories\n * and append new categories at the end.\n * @param fixedCategories\n * @param inputCategories\n */\nfunction combineCategories(fixedCategories, inputCategories = []) {\n  if (fixedCategories.length === 0) {\n    return inputCategories;\n  }\n\n  const fixedSet = new Set(fixedCategories);\n  return fixedCategories.concat(inputCategories.filter(d => !fixedSet.has(d)));\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/utils/combineContinuousDomains.js\n\n/**\n * Combine two continuous domain and ensure that the output\n * does not go beyond fixedDomain\n * @param bounds\n * @param dataDomain\n */\n\nfunction combineContinuousDomains(bounds, dataDomain) {\n  if (bounds.length > 0 && isEveryElementDefined(bounds)) {\n    return bounds;\n  }\n\n  if (bounds.length === 2 && dataDomain.length === 2 && bounds.filter(isDefined).length > 0) {\n    const [boundMin, boundMax] = bounds;\n    const [dataMin, dataMax] = dataDomain;\n    let min = dataMin;\n\n    if (isDefined(boundMin)) {\n      min = boundMin.valueOf() > dataMin.valueOf() ? boundMin : dataMin;\n    }\n\n    let max = dataMax;\n\n    if (isDefined(boundMax)) {\n      max = boundMax.valueOf() < dataMax.valueOf() ? boundMax : dataMax;\n    }\n\n    return [min, max];\n  }\n\n  return dataDomain;\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/utils/removeUndefinedAndNull.js\nfunction removeUndefinedAndNull(array) {\n  return array.filter(x => typeof x !== 'undefined' && x !== null);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/parseDateTimeIn.js\n\n\n/**\n * Only parse elements that are DateTime to Date.\n * Leave the rest alone.\n * @param array\n */\n\nfunction parseDateTimeIn(array) {\n  return array.map(d => !(d instanceof Date) && isDateTime(d) ? parseDateTime(d) : d);\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyDomain.js\n\n\n\n\n\n\n\n\n\nfunction createOrderFunction(reverse) {\n  return reverse ? array => array.concat().reverse() : array => array;\n}\n\nfunction isCompleteDomain(domain) {\n  return domain.length !== 2 || domain[0] != null && domain[1] != null;\n}\n\nfunction applyDomain(config, scale,\n/** domain from dataset */\ndataDomain) {\n  const {\n    reverse,\n    type\n  } = config;\n  const order = createOrderFunction(reverse);\n\n  if (isContinuousScale(scale, type) && isContinuousScaleConfig(config) || isDiscretizingScale(scale, type) && isDiscretizingScaleConfig(config)) {\n    // For continuous and discretizing scales\n    if (config.domain) {\n      // If config.domain is specified\n      if (isCompleteDomain(config.domain)) {\n        // If the config.domain is completed\n        // ignores the dataDomain\n        scale.domain(order(parseDateTimeIn(config.domain)));\n      } else if (dataDomain) {\n        // If it is incompleted, then try to combine\n        // with the dataDomain\n        scale.domain(order(combineContinuousDomains(parseContinuousDomain(parseDateTimeIn(config.domain), type), parseContinuousDomain(removeUndefinedAndNull(dataDomain), type))));\n      }\n    } else if (dataDomain) {\n      // If no config.domain then just use the dataDomain if any\n      scale.domain(order(parseContinuousDomain(removeUndefinedAndNull(dataDomain), type)));\n    }\n  } else if (isDiscreteScale(scale, type) && isDiscreteScaleConfig(config)) {\n    // For discrete scales\n    if (config.domain) {\n      const fixedDomain = parseDiscreteDomain(parseDateTimeIn(config.domain));\n      scale.domain(order(dataDomain ? combineCategories(fixedDomain, parseDiscreteDomain(dataDomain)) : fixedDomain));\n    } else if (dataDomain) {\n      // If no config.domain then just use the dataDomain if any\n      scale.domain(order(parseDiscreteDomain(dataDomain)));\n    }\n  }\n}\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/@encodable/color/esm/scheme/wrappers/wrapColorScheme.js + 21 modules\nvar wrapColorScheme = __webpack_require__(435);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/typeGuards/SchemeParams.js\n// eslint-disable-next-line import/prefer-default-export\nfunction isSchemeParams(scheme) {\n  return Object.prototype.toString.call(scheme) !== '[object String]';\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyRange.js\n\n\n\n\nfunction applyRange(config, scale) {\n  const {\n    range,\n    domain\n  } = config;\n\n  if (typeof range === 'undefined') {\n    if ('scheme' in config && typeof config.scheme !== 'undefined') {\n      const {\n        scheme\n      } = config;\n      let name;\n      let count;\n\n      if (isContinuousScaleConfig(config) && domain) {\n        count = domain.length;\n      }\n\n      let extent;\n\n      if (isSchemeParams(scheme)) {\n        name = scheme.name;\n\n        if (scheme.count) {\n          count = scheme.count;\n        }\n\n        extent = scheme.extent;\n      } else {\n        name = scheme;\n      }\n\n      const schemeObject = Encodable[\"a\" /* default */].resolveColorScheme({\n        name,\n        type: 'sequential'\n      });\n\n      if (typeof schemeObject !== 'undefined' && schemeObject.type === 'sequential') {\n        const wrappedScheme = Object(wrapColorScheme[\"a\" /* default */])(schemeObject);\n        scale.range(wrappedScheme.getColors(count, extent));\n      }\n    }\n  } else {\n    // TODO: add type guard should fix this problem\n    // @ts-ignore\n    scale.range(range);\n  }\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/applyPadding.js\nfunction applyPadding(config, scale) {\n  if ('padding' in config && typeof config.padding !== 'undefined' && 'padding' in scale) {\n    scale.padding(config.padding);\n  }\n\n  if ('paddingInner' in config && typeof config.paddingInner !== 'undefined' && 'paddingInner' in scale) {\n    scale.paddingInner(config.paddingInner);\n  }\n\n  if ('paddingOuter' in config && typeof config.paddingOuter !== 'undefined' && 'paddingOuter' in scale) {\n    scale.paddingOuter(config.paddingOuter);\n  }\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/updateScale.js\n\n\n\n\n\n\n\n\n\n\n\nfunction updateScale(scale, config) {\n  // domain and range apply to all scales\n  applyDomain(config, scale);\n  applyRange(config, scale); // Sort other properties alphabetically.\n\n  applyAlign(config, scale);\n  applyBase(config, scale);\n  applyClamp(config, scale);\n  applyExponent(config, scale);\n  applyInterpolate(config, scale); // Nice depends on domain.\n\n  applyNice(config, scale);\n  applyPadding(config, scale);\n  applyRound(config, scale); // Zero depends on domain and nice.\n\n  applyZero(config, scale);\n  return scale;\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/parsers/scale/createScale.js\n\n\n\n\n\n\n\nfunction createScale(config) {\n  const {\n    range\n  } = config; // Handle categorical color scales\n  // An ordinal scale without specified range\n  // is assumed to be a color scale.\n\n  if (config.type === ScaleType.ORDINAL && typeof range === 'undefined') {\n    const scheme = 'scheme' in config ? config.scheme : undefined;\n    const resolve = Encodable[\"a\" /* default */].getCategoricalColorScaleResolver();\n    let colorScale;\n\n    if (typeof scheme === 'undefined') {\n      colorScale = resolve({});\n    } else if (isSchemeParams(scheme)) {\n      colorScale = resolve(scheme);\n    } else {\n      colorScale = resolve({\n        name: scheme\n      });\n    }\n\n    const castedColorScale = colorScale;\n    applyDomain(config, castedColorScale);\n    return castedColorScale;\n  }\n\n  const scale = createScaleFromScaleType(config.type);\n  return updateScale(scale, config);\n}\n\n/* harmony default export */ var scale_createScale = (createScale);\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/utils/identity.js\nfunction identity(x) {\n  return x;\n}\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/typeGuards/CompleteChannelDef.js\nvar CompleteChannelDef = __webpack_require__(2404);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/encoders/ChannelEncoder.js\nfunction ChannelEncoder_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass ChannelEncoder_ChannelEncoder {\n  constructor({\n    name,\n    channelType,\n    definition: originalDefinition\n  }) {\n    ChannelEncoder_defineProperty(this, \"name\", void 0);\n\n    ChannelEncoder_defineProperty(this, \"channelType\", void 0);\n\n    ChannelEncoder_defineProperty(this, \"originalDefinition\", void 0);\n\n    ChannelEncoder_defineProperty(this, \"definition\", void 0);\n\n    ChannelEncoder_defineProperty(this, \"scale\", void 0);\n\n    ChannelEncoder_defineProperty(this, \"axis\", void 0);\n\n    ChannelEncoder_defineProperty(this, \"getValue\", void 0);\n\n    ChannelEncoder_defineProperty(this, \"encodeFunc\", void 0);\n\n    ChannelEncoder_defineProperty(this, \"formatValue\", void 0);\n\n    ChannelEncoder_defineProperty(this, \"encodeValue\", (value, otherwise) => {\n      if (typeof otherwise !== 'undefined' && (value === null || typeof value === 'undefined')) {\n        return otherwise;\n      } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n      return this.encodeFunc(value);\n    });\n\n    ChannelEncoder_defineProperty(this, \"encodeDatum\", (datum, otherwise) => typeof otherwise === 'undefined' ? this.encodeValue(this.getValueFromDatum(datum)) : this.encodeValue(this.getValueFromDatum(datum), otherwise));\n\n    ChannelEncoder_defineProperty(this, \"formatDatum\", datum => this.formatValue(this.getValueFromDatum(datum)));\n\n    ChannelEncoder_defineProperty(this, \"getValueFromDatum\", (datum, otherwise) => {\n      const value = this.getValue(datum);\n      return otherwise !== undefined && (value === null || value === undefined) ? otherwise : value;\n    });\n\n    ChannelEncoder_defineProperty(this, \"getDomainFromDataset\", data => {\n      if (Object(ChannelDef[\"c\" /* isValueDef */])(this.definition)) {\n        const {\n          value\n        } = this.definition;\n        return [value];\n      }\n\n      const {\n        type\n      } = this.definition;\n\n      if (type === 'nominal' || type === 'ordinal') {\n        return Array.from(new Set(data.map(d => this.getValueFromDatum(d))));\n      }\n\n      if (type === 'quantitative') {\n        // Quantile scale needs all items\n        // because it treats domain as a discrete set of sample values\n        // for computing the quantiles\n        if (this.definition.scale && this.definition.scale.type === 'quantile') {\n          return data.map(d => this.getValueFromDatum(d));\n        }\n\n        const extent = Object(src_extent[\"a\" /* default */])(data, d => this.getValueFromDatum(d));\n        return typeof extent[0] === 'undefined' ? [0, 1] : extent;\n      }\n\n      if (type === 'temporal') {\n        const extent = Object(src_extent[\"a\" /* default */])(data, d => this.getValueFromDatum(d));\n        return typeof extent[0] === 'undefined' ? [0, 1] : extent;\n      }\n\n      return [];\n    });\n\n    this.name = name;\n    this.channelType = channelType;\n    this.originalDefinition = originalDefinition;\n    this.definition = completeChannelDef(this.channelType, originalDefinition);\n    this.getValue = createGetterFromChannelDef(this.definition);\n    this.formatValue = Object(ChannelDef[\"a\" /* isFieldDef */])(this.definition) ? createFormatter(this.definition) : fallbackFormatter;\n\n    if (this.definition.scale) {\n      const scale = scale_createScale(this.definition.scale); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      this.encodeFunc = value => scale(value);\n\n      this.scale = scale;\n    } else {\n      const {\n        definition\n      } = this;\n      this.encodeFunc = Object(CompleteChannelDef[\"b\" /* isCompleteValueDef */])(definition) ? () => definition.value : identity;\n    }\n\n    if (this.definition.axis) {\n      this.axis = new ChannelEncoderAxis_ChannelEncoderAxis(this);\n    }\n  }\n\n  getDomain() {\n    if (this.scale && 'domain' in this.scale) {\n      return this.scale.domain();\n    }\n\n    return [];\n  }\n\n  setDomain(domain) {\n    if (this.definition.scale !== false && this.scale && !this.hasCategoricalColorScale() && 'domain' in this.scale) {\n      const config = this.definition.scale;\n      applyDomain(config, this.scale, domain);\n      applyRange(config, this.scale);\n      applyZero(config, this.scale);\n      applyNice(config, this.scale);\n    }\n\n    return this;\n  }\n\n  setDomainFromDataset(data) {\n    return this.scale && 'domain' in this.scale ? this.setDomain(this.getDomainFromDataset(data)) : this;\n  }\n\n  getTitle() {\n    return this.definition.title;\n  }\n\n  isGroupBy() {\n    if (Object(ChannelDef[\"b\" /* isTypedFieldDef */])(this.definition)) {\n      const {\n        type\n      } = this.definition;\n      return this.channelType === 'Category' || this.channelType === 'Text' || this.channelType === 'Color' && (type === 'nominal' || type === 'ordinal') || isXOrY(this.channelType) && (type === 'nominal' || type === 'ordinal');\n    }\n\n    return false;\n  }\n\n  isX() {\n    return isX(this.channelType);\n  }\n\n  isXOrY() {\n    return isXOrY(this.channelType);\n  }\n\n  isY() {\n    return isY(this.channelType);\n  }\n\n  hasCategoricalColorScale() {\n    const config = this.definition.scale; // Scale type is ordinal with not given range\n    // (may have optional scheme)\n    // will become a categorical scale\n    // of named color scheme.\n    // A color scale from named color scheme may be shared among multiple components\n    // in the same namespace by default, so changing its domain affect all components.\n    // (Sounds like a bad idea.)\n    // This function is currently only being used to check\n    // whether to apply domain from dataset or not.\n    // An ordinal scale with user-specified color scheme as range array\n    // will return false from this function and be excluded from it.\n\n    return this.scale && config && config.type === ScaleType.ORDINAL && typeof config.range === 'undefined';\n  }\n\n  hasLegend() {\n    return this.definition.legend !== false;\n  }\n\n  hasValueDefinition() {\n    return Object(CompleteChannelDef[\"b\" /* isCompleteValueDef */])(this.definition);\n  }\n\n  hasFieldDefinition() {\n    return Object(CompleteChannelDef[\"a\" /* isCompleteFieldDef */])(this.definition);\n  }\n\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/encoders/Encoder.js\nfunction Encoder_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nclass Encoder_Encoder {\n  constructor({\n    channelTypes,\n    encoding\n  }) {\n    Encoder_defineProperty(this, \"encoding\", void 0);\n\n    Encoder_defineProperty(this, \"channelTypes\", void 0);\n\n    Encoder_defineProperty(this, \"channels\", void 0);\n\n    Encoder_defineProperty(this, \"legends\", void 0);\n\n    this.channelTypes = channelTypes;\n    this.encoding = encoding;\n    const channelNames = this.getChannelNames(); // Create channel encoders\n\n    const channels = {};\n    channelNames.forEach(name => {\n      const channelEncoding = encoding[name];\n\n      if (Array.isArray(channelEncoding)) {\n        const definitions = channelEncoding;\n        channels[name] = definitions.map((definition, i) => new ChannelEncoder_ChannelEncoder({\n          channelType: channelTypes[name],\n          definition,\n          name: name + \"[\" + i + \"]\"\n        }));\n      } else {\n        const definition = channelEncoding;\n        channels[name] = new ChannelEncoder_ChannelEncoder({\n          channelType: channelTypes[name],\n          definition,\n          name: name\n        });\n      }\n    });\n    this.channels = channels; // Group the channels that use the same field together\n    // so they can share the same legend.\n\n    this.legends = {};\n    channelNames.map(name => this.channels[name]).forEach(c => {\n      if (isNotArray(c) && c.hasLegend() && Object(ChannelDef[\"b\" /* isTypedFieldDef */])(c.definition)) {\n        const {\n          field\n        } = c.definition;\n        const channelEncoder = c;\n\n        if (this.legends[field]) {\n          this.legends[field].push(channelEncoder);\n        } else {\n          this.legends[field] = [channelEncoder];\n        }\n      }\n    });\n  }\n\n  getChannelNames() {\n    return Object.keys(this.channelTypes);\n  }\n\n  getChannelEncoders() {\n    return this.getChannelNames().flatMap(name => this.channels[name]);\n  }\n\n  getGroupBys() {\n    const fields = this.getChannelEncoders().filter(c => c.isGroupBy()).map(c => c.definition.field);\n    return Array.from(new Set(fields));\n  }\n\n  createLegendItemsFactory(field) {\n    const channelEncoders = this.getChannelEncoders().filter(e => isNotArray(e) && Object(ChannelDef[\"c\" /* isValueDef */])(e.definition)).flat().concat(this.legends[field]);\n    return domain => domain.map(input => ({\n      input,\n      output: channelEncoders.reduce((prev, curr) => {\n        const map = prev;\n        map[curr.name] = curr.encodeValue(input);\n        return map;\n      }, {})\n    }));\n  }\n\n  getLegendInformation(data = []) {\n    return Object.keys(this.legends) // for each field that was encoded\n    .map(field => {\n      // get all the channels that use this field\n      const channelEncoders = this.legends[field];\n      const firstEncoder = channelEncoders[0];\n      const definition = firstEncoder.definition;\n      const createLegendItems = this.createLegendItemsFactory(field);\n\n      if (definition.type === 'nominal') {\n        return {\n          channelEncoders,\n          createLegendItems,\n          field,\n          items: createLegendItems(firstEncoder.getDomainFromDataset(data)),\n          type: definition.type\n        };\n      }\n\n      return {\n        channelEncoders,\n        createLegendItems,\n        field,\n        type: definition.type\n      };\n    });\n  }\n\n  setDomainFromDataset(data) {\n    this.getChannelEncoders().forEach(channelEncoder => {\n      channelEncoder.setDomainFromDataset(data);\n    });\n    return this;\n  }\n\n  hasLegend() {\n    return Object.keys(this.legends).length > 0;\n  }\n\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/utils/mergeEncoding.js\nfunction mergeEncoding(defaultEncoding, encoding) {\n  return { ...defaultEncoding,\n    ...encoding\n  };\n}\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/encodable/esm/encoders/createEncoderFactory.js\n\n\n\nfunction createEncoderFactory(params) {\n  const {\n    channelTypes\n  } = params;\n  const completeEncoding = 'defaultEncoding' in params ? encoding => mergeEncoding(params.defaultEncoding, encoding) : params.completeEncoding;\n\n  const create = (encoding = {}) => new Encoder_Encoder({\n    channelTypes,\n    encoding: completeEncoding(encoding)\n  });\n\n  return {\n    channelTypes,\n    create,\n    createSelector: () => Object(es[\"createSelector\"])(encoding => encoding, create),\n    DEFAULT_ENCODING: completeEncoding({})\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2465\n")}}]);