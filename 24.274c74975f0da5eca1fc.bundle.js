(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{1288:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return reactify; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction reactify(renderFn, callbacks) {\n    class ReactifiedComponent extends react__WEBPACK_IMPORTED_MODULE_0___default.a.Component {\n        constructor(props) {\n            super(props);\n            this.setContainerRef = this.setContainerRef.bind(this);\n        }\n        componentDidMount() {\n            this.execute();\n        }\n        componentDidUpdate() {\n            this.execute();\n        }\n        componentWillUnmount() {\n            this.container = undefined;\n            if (callbacks === null || callbacks === void 0 ? void 0 : callbacks.componentWillUnmount) {\n                callbacks.componentWillUnmount.bind(this)();\n            }\n        }\n        setContainerRef(ref) {\n            this.container = ref;\n        }\n        execute() {\n            if (this.container) {\n                renderFn(this.container, this.props);\n            }\n        }\n        render() {\n            const { id, className } = this.props;\n            return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", { ref: this.setContainerRef, id: id, className: className });\n        }\n    }\n    const ReactifiedClass = ReactifiedComponent;\n    if (renderFn.displayName) {\n        ReactifiedClass.displayName = renderFn.displayName;\n    }\n    // eslint-disable-next-line react/forbid-foreign-prop-types\n    if (renderFn.propTypes) {\n        ReactifiedClass.propTypes = Object.assign(Object.assign({}, ReactifiedClass.propTypes), renderFn.propTypes);\n    }\n    if (renderFn.defaultProps) {\n        ReactifiedClass.defaultProps = renderFn.defaultProps;\n    }\n    return ReactifiedComponent;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI4OC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9zdXBlcnNldC11aS1jaGFydC9zcmMvY29tcG9uZW50cy9yZWFjdGlmeS50c3g/NTZmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vLyBUT0RPOiBOb3RlIHRoYXQgaWQgYW5kIGNsYXNzTmFtZSBjYW4gY29sbGlkZSBiZXR3ZWVuIFByb3BzIGFuZCBSZWFjdGlmeVByb3BzXG4vLyBsZWFkaW5nIHRvIChsaWtlbHkpIHVuZXhwZWN0ZWQgYmVoYXZpb3JzLiBXZSBzaG91bGQgZWl0aGVyIHJlcXVpcmUgUHJvcHMgdG8gbm90XG4vLyBjb250YWluIGFuIGlkL2NsYXNzTmFtZSwgb3Igbm90IGNvbWJpbmUgdGhlbSAodmlhIGludGVyc2VjdGlvbiksIGluc3RlYWQgcHJlZmVycmluZ1xuLy8gd3JhcHBpbmcgKGNvbXBvc2l0aW9uKS4gQXMgYW4gZXhhbXBsZTpcbi8vIGludGVyZmFjZSBNeVByb3BzIHtcbi8vICAgaWQ6IG51bWJlcjtcbi8vIH1cbi8vIGZ1bmN0aW9uIG15UmVuZGVyKGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQsIHByb3BzOiBSZWFkb25seTxNeVByb3BzPik6IHZvaWQge1xuLy8gICBwcm9wcy5pZCAvLyB1bnVzYWJsZTogaWQgaXMgc3RyaW5nICYgbnVtYmVyXG4vLyB9XG4vLyBuZXcgKHJlYWN0aWZ5KG15UmVuZGVyKSkoeyBpZDogNSB9KTsgLy8gZXJyb3I6IGlkIGhhcyB0byBiZSBzdHJpbmcgJiBudW1iZXJcblxuZXhwb3J0IHR5cGUgUmVhY3RpZnlQcm9wcyA9IHtcbiAgaWQ/OiBzdHJpbmc7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbn07XG5cbi8vIFRPRE86IGFkZCBtb3JlIFJlYWN0IGxpZmVjeWNsZSBjYWxsYmFja3MgYXMgbmVlZGVkXG5leHBvcnQgdHlwZSBMaWZlQ3ljbGVDYWxsYmFja3MgPSB7XG4gIGNvbXBvbmVudFdpbGxVbm1vdW50PzogKCkgPT4gdm9pZDtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVuZGVyRnVuY1R5cGU8UHJvcHM+IHtcbiAgKGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQsIHByb3BzOiBSZWFkb25seTxQcm9wcyAmIFJlYWN0aWZ5UHJvcHM+KTogdm9pZDtcbiAgZGlzcGxheU5hbWU/OiBzdHJpbmc7XG4gIGRlZmF1bHRQcm9wcz86IFBhcnRpYWw8UHJvcHMgJiBSZWFjdGlmeVByb3BzPjtcbiAgcHJvcFR5cGVzPzogUmVhY3QuV2Vha1ZhbGlkYXRpb25NYXA8UHJvcHMgJiBSZWFjdGlmeVByb3BzPjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVhY3RpZnk8UHJvcHMgZXh0ZW5kcyBvYmplY3Q+KFxuICByZW5kZXJGbjogUmVuZGVyRnVuY1R5cGU8UHJvcHM+LFxuICBjYWxsYmFja3M/OiBMaWZlQ3ljbGVDYWxsYmFja3MsXG4pOiBSZWFjdC5Db21wb25lbnRDbGFzczxQcm9wcyAmIFJlYWN0aWZ5UHJvcHM+IHtcbiAgY2xhc3MgUmVhY3RpZmllZENvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyAmIFJlYWN0aWZ5UHJvcHM+IHtcbiAgICBjb250YWluZXI/OiBIVE1MRGl2RWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcyAmIFJlYWN0aWZ5UHJvcHMpIHtcbiAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgIHRoaXMuc2V0Q29udGFpbmVyUmVmID0gdGhpcy5zZXRDb250YWluZXJSZWYuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuZXhlY3V0ZSgpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuZXhlY3V0ZSgpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5jb250YWluZXIgPSB1bmRlZmluZWQ7XG4gICAgICBpZiAoY2FsbGJhY2tzPy5jb21wb25lbnRXaWxsVW5tb3VudCkge1xuICAgICAgICBjYWxsYmFja3MuY29tcG9uZW50V2lsbFVubW91bnQuYmluZCh0aGlzKSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNldENvbnRhaW5lclJlZihyZWY6IEhUTUxEaXZFbGVtZW50KSB7XG4gICAgICB0aGlzLmNvbnRhaW5lciA9IHJlZjtcbiAgICB9XG5cbiAgICBleGVjdXRlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGFpbmVyKSB7XG4gICAgICAgIHJlbmRlckZuKHRoaXMuY29udGFpbmVyLCB0aGlzLnByb3BzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICBjb25zdCB7IGlkLCBjbGFzc05hbWUgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgIHJldHVybiA8ZGl2IHJlZj17dGhpcy5zZXRDb250YWluZXJSZWZ9IGlkPXtpZH0gY2xhc3NOYW1lPXtjbGFzc05hbWV9IC8+O1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IFJlYWN0aWZpZWRDbGFzczogUmVhY3QuQ29tcG9uZW50Q2xhc3M8UHJvcHMgJiBSZWFjdGlmeVByb3BzPiA9IFJlYWN0aWZpZWRDb21wb25lbnQ7XG5cbiAgaWYgKHJlbmRlckZuLmRpc3BsYXlOYW1lKSB7XG4gICAgUmVhY3RpZmllZENsYXNzLmRpc3BsYXlOYW1lID0gcmVuZGVyRm4uZGlzcGxheU5hbWU7XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2ZvcmJpZC1mb3JlaWduLXByb3AtdHlwZXNcbiAgaWYgKHJlbmRlckZuLnByb3BUeXBlcykge1xuICAgIFJlYWN0aWZpZWRDbGFzcy5wcm9wVHlwZXMgPSB7IC4uLlJlYWN0aWZpZWRDbGFzcy5wcm9wVHlwZXMsIC4uLnJlbmRlckZuLnByb3BUeXBlcyB9O1xuICB9XG4gIGlmIChyZW5kZXJGbi5kZWZhdWx0UHJvcHMpIHtcbiAgICBSZWFjdGlmaWVkQ2xhc3MuZGVmYXVsdFByb3BzID0gcmVuZGVyRm4uZGVmYXVsdFByb3BzO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0aWZpZWRDb21wb25lbnQ7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBK0JBO0FBSUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1288\n')},1325:function(module,exports,__webpack_require__){"use strict";eval("\nvar $ = __webpack_require__(12);\nvar isArray = __webpack_require__(186);\n\nvar nativeReverse = [].reverse;\nvar test = [1, 2];\n\n// `Array.prototype.reverse` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.reverse\n// fix for Safari 12.0 bug\n// https://bugs.webkit.org/show_bug.cgi?id=188794\n$({ target: 'Array', proto: true, forced: String(test) === String(test.reverse()) }, {\n  reverse: function reverse() {\n    // eslint-disable-next-line no-self-assign\n    if (isArray(this)) this.length = this.length;\n    return nativeReverse.call(this);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMyNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMvZXJpa19yaXR0ZXIvcmVwb3MvZ2l0aHViLmNvbS9hcGFjaGUtc3VwZXJzZXQvc3VwZXJzZXQtdWkvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZXZlcnNlLmpzPzFjMjYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xuXG52YXIgbmF0aXZlUmV2ZXJzZSA9IFtdLnJldmVyc2U7XG52YXIgdGVzdCA9IFsxLCAyXTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5yZXZlcnNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZXZlcnNlXG4vLyBmaXggZm9yIFNhZmFyaSAxMi4wIGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE4ODc5NFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU3RyaW5nKHRlc3QpID09PSBTdHJpbmcodGVzdC5yZXZlcnNlKCkpIH0sIHtcbiAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1hc3NpZ25cbiAgICBpZiAoaXNBcnJheSh0aGlzKSkgdGhpcy5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICByZXR1cm4gbmF0aXZlUmV2ZXJzZS5jYWxsKHRoaXMpO1xuICB9XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1325\n")},1676:function(module,exports,__webpack_require__){eval("var api = __webpack_require__(235);\n            var content = __webpack_require__(1677);\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY3Ni5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMvZXJpa19yaXR0ZXIvcmVwb3MvZ2l0aHViLmNvbS9hcGFjaGUtc3VwZXJzZXQvc3VwZXJzZXQtdWkvcGx1Z2lucy9sZWdhY3ktcGx1Z2luLWNoYXJ0LWNhbGVuZGFyL3NyYy92ZW5kb3IvY2FsLWhlYXRtYXAuY3NzPzU4NDAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cG9zdGNzcyEuL2NhbC1oZWF0bWFwLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxudmFyIGV4cG9ydGVkID0gY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHt9O1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlZDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1676\n")},1677:function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(236);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, "/* [LICENSE TBD] */\\n/* Cal-HeatMap CSS */\\n\\n.cal-heatmap-container {\\n  display: block;\\n}\\n\\n.cal-heatmap-container .graph-label {\\n  fill: #999;\\n  font-size: 10px;\\n}\\n\\n.cal-heatmap-container .graph,\\n.cal-heatmap-container .graph-legend rect {\\n  shape-rendering: crispedges;\\n}\\n\\n.cal-heatmap-container .graph-rect {\\n  fill: #ededed;\\n}\\n\\n.cal-heatmap-container .graph-subdomain-group rect:hover {\\n  stroke: #000;\\n  stroke-width: 1px;\\n}\\n\\n.cal-heatmap-container .subdomain-text {\\n  font-size: 8px;\\n  fill: #999;\\n  pointer-events: none;\\n}\\n\\n.cal-heatmap-container .hover_cursor:hover {\\n  cursor: pointer;\\n}\\n\\n.cal-heatmap-container .qi {\\n  background-color: #999;\\n  fill: #999;\\n}\\n\\n/*\\nRemove comment to apply this style to date with value equal to 0\\n.q0\\n{\\n  background-color: #fff;\\n  fill: #fff;\\n  stroke: #ededed\\n}\\n*/\\n\\n.cal-heatmap-container .q1 {\\n  background-color: #dae289;\\n  fill: #dae289;\\n}\\n\\n.cal-heatmap-container .q2 {\\n  background-color: #cedb9c;\\n  fill: #9cc069;\\n}\\n\\n.cal-heatmap-container .q3 {\\n  background-color: #b5cf6b;\\n  fill: #669d45;\\n}\\n\\n.cal-heatmap-container .q4 {\\n  background-color: #637939;\\n  fill: #637939;\\n}\\n\\n.cal-heatmap-container .q5 {\\n  background-color: #3b6427;\\n  fill: #3b6427;\\n}\\n\\n.cal-heatmap-container rect.highlight {\\n  stroke: #444;\\n  stroke-width: 1;\\n}\\n\\n.cal-heatmap-container text.highlight {\\n  fill: #444;\\n}\\n\\n.cal-heatmap-container rect.highlight-now {\\n  stroke: red;\\n}\\n\\n.cal-heatmap-container text.highlight-now {\\n  fill: red;\\n  font-weight: 800;\\n}\\n\\n.cal-heatmap-container .domain-background {\\n  fill: none;\\n  shape-rendering: crispedges;\\n}\\n\\n.ch-tooltip {\\n  padding: 10px;\\n  background: #222;\\n  color: #bbb;\\n  font-size: 12px;\\n  line-height: 1.4;\\n  width: 140px;\\n  position: absolute;\\n  z-index: 99999;\\n  text-align: center;\\n  border-radius: 2px;\\n  box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.2);\\n  display: none;\\n  box-sizing: border-box;\\n}\\n\\n.ch-tooltip::after {\\n  position: absolute;\\n  width: 0;\\n  height: 0;\\n  border-color: transparent;\\n  border-style: solid;\\n  content: \'\';\\n  padding: 0;\\n  display: block;\\n  bottom: -6px;\\n  left: 50%;\\n  margin-left: -6px;\\n  border-width: 6px 6px 0;\\n  border-top-color: #222;\\n}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY3Ny5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMvZXJpa19yaXR0ZXIvcmVwb3MvZ2l0aHViLmNvbS9hcGFjaGUtc3VwZXJzZXQvc3VwZXJzZXQtdWkvcGx1Z2lucy9sZWdhY3ktcGx1Z2luLWNoYXJ0LWNhbGVuZGFyL3NyYy92ZW5kb3IvY2FsLWhlYXRtYXAuY3NzPzRmM2IiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qIFtMSUNFTlNFIFRCRF0gKi9cXG4vKiBDYWwtSGVhdE1hcCBDU1MgKi9cXG5cXG4uY2FsLWhlYXRtYXAtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4uY2FsLWhlYXRtYXAtY29udGFpbmVyIC5ncmFwaC1sYWJlbCB7XFxuICBmaWxsOiAjOTk5O1xcbiAgZm9udC1zaXplOiAxMHB4O1xcbn1cXG5cXG4uY2FsLWhlYXRtYXAtY29udGFpbmVyIC5ncmFwaCxcXG4uY2FsLWhlYXRtYXAtY29udGFpbmVyIC5ncmFwaC1sZWdlbmQgcmVjdCB7XFxuICBzaGFwZS1yZW5kZXJpbmc6IGNyaXNwZWRnZXM7XFxufVxcblxcbi5jYWwtaGVhdG1hcC1jb250YWluZXIgLmdyYXBoLXJlY3Qge1xcbiAgZmlsbDogI2VkZWRlZDtcXG59XFxuXFxuLmNhbC1oZWF0bWFwLWNvbnRhaW5lciAuZ3JhcGgtc3ViZG9tYWluLWdyb3VwIHJlY3Q6aG92ZXIge1xcbiAgc3Ryb2tlOiAjMDAwO1xcbiAgc3Ryb2tlLXdpZHRoOiAxcHg7XFxufVxcblxcbi5jYWwtaGVhdG1hcC1jb250YWluZXIgLnN1YmRvbWFpbi10ZXh0IHtcXG4gIGZvbnQtc2l6ZTogOHB4O1xcbiAgZmlsbDogIzk5OTtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG5cXG4uY2FsLWhlYXRtYXAtY29udGFpbmVyIC5ob3Zlcl9jdXJzb3I6aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uY2FsLWhlYXRtYXAtY29udGFpbmVyIC5xaSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTk5O1xcbiAgZmlsbDogIzk5OTtcXG59XFxuXFxuLypcXG5SZW1vdmUgY29tbWVudCB0byBhcHBseSB0aGlzIHN0eWxlIHRvIGRhdGUgd2l0aCB2YWx1ZSBlcXVhbCB0byAwXFxuLnEwXFxue1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGZpbGw6ICNmZmY7XFxuICBzdHJva2U6ICNlZGVkZWRcXG59XFxuKi9cXG5cXG4uY2FsLWhlYXRtYXAtY29udGFpbmVyIC5xMSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGFlMjg5O1xcbiAgZmlsbDogI2RhZTI4OTtcXG59XFxuXFxuLmNhbC1oZWF0bWFwLWNvbnRhaW5lciAucTIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2NlZGI5YztcXG4gIGZpbGw6ICM5Y2MwNjk7XFxufVxcblxcbi5jYWwtaGVhdG1hcC1jb250YWluZXIgLnEzIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNiNWNmNmI7XFxuICBmaWxsOiAjNjY5ZDQ1O1xcbn1cXG5cXG4uY2FsLWhlYXRtYXAtY29udGFpbmVyIC5xNCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjM3OTM5O1xcbiAgZmlsbDogIzYzNzkzOTtcXG59XFxuXFxuLmNhbC1oZWF0bWFwLWNvbnRhaW5lciAucTUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzNiNjQyNztcXG4gIGZpbGw6ICMzYjY0Mjc7XFxufVxcblxcbi5jYWwtaGVhdG1hcC1jb250YWluZXIgcmVjdC5oaWdobGlnaHQge1xcbiAgc3Ryb2tlOiAjNDQ0O1xcbiAgc3Ryb2tlLXdpZHRoOiAxO1xcbn1cXG5cXG4uY2FsLWhlYXRtYXAtY29udGFpbmVyIHRleHQuaGlnaGxpZ2h0IHtcXG4gIGZpbGw6ICM0NDQ7XFxufVxcblxcbi5jYWwtaGVhdG1hcC1jb250YWluZXIgcmVjdC5oaWdobGlnaHQtbm93IHtcXG4gIHN0cm9rZTogcmVkO1xcbn1cXG5cXG4uY2FsLWhlYXRtYXAtY29udGFpbmVyIHRleHQuaGlnaGxpZ2h0LW5vdyB7XFxuICBmaWxsOiByZWQ7XFxuICBmb250LXdlaWdodDogODAwO1xcbn1cXG5cXG4uY2FsLWhlYXRtYXAtY29udGFpbmVyIC5kb21haW4tYmFja2dyb3VuZCB7XFxuICBmaWxsOiBub25lO1xcbiAgc2hhcGUtcmVuZGVyaW5nOiBjcmlzcGVkZ2VzO1xcbn1cXG5cXG4uY2gtdG9vbHRpcCB7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgYmFja2dyb3VuZDogIzIyMjtcXG4gIGNvbG9yOiAjYmJiO1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgbGluZS1oZWlnaHQ6IDEuNDtcXG4gIHdpZHRoOiAxNDBweDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHotaW5kZXg6IDk5OTk5O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYm94LXNoYWRvdzogMnB4IDJweCAycHggcmdiYSgwLCAwLCAwLCAwLjIpO1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi5jaC10b29sdGlwOjphZnRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogMDtcXG4gIGhlaWdodDogMDtcXG4gIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbiAgY29udGVudDogJyc7XFxuICBwYWRkaW5nOiAwO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBib3R0b206IC02cHg7XFxuICBsZWZ0OiA1MCU7XFxuICBtYXJnaW4tbGVmdDogLTZweDtcXG4gIGJvcmRlci13aWR0aDogNnB4IDZweCAwO1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogIzIyMjtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1677\n')},1678:function(module,exports,__webpack_require__){eval("var DESCRIPTORS = __webpack_require__(42);\nvar global = __webpack_require__(22);\nvar isForced = __webpack_require__(240);\nvar inheritIfRequired = __webpack_require__(414);\nvar defineProperty = __webpack_require__(46).f;\nvar getOwnPropertyNames = __webpack_require__(239).f;\nvar isRegExp = __webpack_require__(412);\nvar getFlags = __webpack_require__(411);\nvar stickyHelpers = __webpack_require__(651);\nvar redefine = __webpack_require__(78);\nvar fails = __webpack_require__(23);\nvar setInternalState = __webpack_require__(108).set;\nvar setSpecies = __webpack_require__(413);\nvar wellKnownSymbol = __webpack_require__(28);\n\nvar MATCH = wellKnownSymbol('match');\nvar NativeRegExp = global.RegExp;\nvar RegExpPrototype = NativeRegExp.prototype;\nvar re1 = /a/g;\nvar re2 = /a/g;\n\n// \"new\" should create a new object, old webkit bug\nvar CORRECT_NEW = new NativeRegExp(re1) !== re1;\n\nvar UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;\n\nvar FORCED = DESCRIPTORS && isForced('RegExp', (!CORRECT_NEW || UNSUPPORTED_Y || fails(function () {\n  re2[MATCH] = false;\n  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';\n})));\n\n// `RegExp` constructor\n// https://tc39.github.io/ecma262/#sec-regexp-constructor\nif (FORCED) {\n  var RegExpWrapper = function RegExp(pattern, flags) {\n    var thisIsRegExp = this instanceof RegExpWrapper;\n    var patternIsRegExp = isRegExp(pattern);\n    var flagsAreUndefined = flags === undefined;\n    var sticky;\n\n    if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined) {\n      return pattern;\n    }\n\n    if (CORRECT_NEW) {\n      if (patternIsRegExp && !flagsAreUndefined) pattern = pattern.source;\n    } else if (pattern instanceof RegExpWrapper) {\n      if (flagsAreUndefined) flags = getFlags.call(pattern);\n      pattern = pattern.source;\n    }\n\n    if (UNSUPPORTED_Y) {\n      sticky = !!flags && flags.indexOf('y') > -1;\n      if (sticky) flags = flags.replace(/y/g, '');\n    }\n\n    var result = inheritIfRequired(\n      CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern, flags),\n      thisIsRegExp ? this : RegExpPrototype,\n      RegExpWrapper\n    );\n\n    if (UNSUPPORTED_Y && sticky) setInternalState(result, { sticky: sticky });\n\n    return result;\n  };\n  var proxy = function (key) {\n    key in RegExpWrapper || defineProperty(RegExpWrapper, key, {\n      configurable: true,\n      get: function () { return NativeRegExp[key]; },\n      set: function (it) { NativeRegExp[key] = it; }\n    });\n  };\n  var keys = getOwnPropertyNames(NativeRegExp);\n  var index = 0;\n  while (keys.length > index) proxy(keys[index++]);\n  RegExpPrototype.constructor = RegExpWrapper;\n  RegExpWrapper.prototype = RegExpPrototype;\n  redefine(global, 'RegExp', RegExpWrapper);\n}\n\n// https://tc39.github.io/ecma262/#sec-get-regexp-@@species\nsetSpecies('RegExp');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY3OC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMvZXJpa19yaXR0ZXIvcmVwb3MvZ2l0aHViLmNvbS9hcGFjaGUtc3VwZXJzZXQvc3VwZXJzZXQtdWkvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuY29uc3RydWN0b3IuanM/YTlkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIGdldEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHNldEludGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5zZXQ7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG52YXIgTmF0aXZlUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBOYXRpdmVSZWdFeHAucHJvdG90eXBlO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcblxuLy8gXCJuZXdcIiBzaG91bGQgY3JlYXRlIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdcbnZhciBDT1JSRUNUX05FVyA9IG5ldyBOYXRpdmVSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuVU5TVVBQT1JURURfWTtcblxudmFyIEZPUkNFRCA9IERFU0NSSVBUT1JTICYmIGlzRm9yY2VkKCdSZWdFeHAnLCAoIUNPUlJFQ1RfTkVXIHx8IFVOU1VQUE9SVEVEX1kgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZTJbTUFUQ0hdID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiBOYXRpdmVSZWdFeHAocmUxKSAhPSByZTEgfHwgTmF0aXZlUmVnRXhwKHJlMikgPT0gcmUyIHx8IE5hdGl2ZVJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKTtcblxuLy8gYFJlZ0V4cGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC1jb25zdHJ1Y3RvclxuaWYgKEZPUkNFRCkge1xuICB2YXIgUmVnRXhwV3JhcHBlciA9IGZ1bmN0aW9uIFJlZ0V4cChwYXR0ZXJuLCBmbGFncykge1xuICAgIHZhciB0aGlzSXNSZWdFeHAgPSB0aGlzIGluc3RhbmNlb2YgUmVnRXhwV3JhcHBlcjtcbiAgICB2YXIgcGF0dGVybklzUmVnRXhwID0gaXNSZWdFeHAocGF0dGVybik7XG4gICAgdmFyIGZsYWdzQXJlVW5kZWZpbmVkID0gZmxhZ3MgPT09IHVuZGVmaW5lZDtcbiAgICB2YXIgc3RpY2t5O1xuXG4gICAgaWYgKCF0aGlzSXNSZWdFeHAgJiYgcGF0dGVybklzUmVnRXhwICYmIHBhdHRlcm4uY29uc3RydWN0b3IgPT09IFJlZ0V4cFdyYXBwZXIgJiYgZmxhZ3NBcmVVbmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuO1xuICAgIH1cblxuICAgIGlmIChDT1JSRUNUX05FVykge1xuICAgICAgaWYgKHBhdHRlcm5Jc1JlZ0V4cCAmJiAhZmxhZ3NBcmVVbmRlZmluZWQpIHBhdHRlcm4gPSBwYXR0ZXJuLnNvdXJjZTtcbiAgICB9IGVsc2UgaWYgKHBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHBXcmFwcGVyKSB7XG4gICAgICBpZiAoZmxhZ3NBcmVVbmRlZmluZWQpIGZsYWdzID0gZ2V0RmxhZ3MuY2FsbChwYXR0ZXJuKTtcbiAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnNvdXJjZTtcbiAgICB9XG5cbiAgICBpZiAoVU5TVVBQT1JURURfWSkge1xuICAgICAgc3RpY2t5ID0gISFmbGFncyAmJiBmbGFncy5pbmRleE9mKCd5JykgPiAtMTtcbiAgICAgIGlmIChzdGlja3kpIGZsYWdzID0gZmxhZ3MucmVwbGFjZSgveS9nLCAnJyk7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IGluaGVyaXRJZlJlcXVpcmVkKFxuICAgICAgQ09SUkVDVF9ORVcgPyBuZXcgTmF0aXZlUmVnRXhwKHBhdHRlcm4sIGZsYWdzKSA6IE5hdGl2ZVJlZ0V4cChwYXR0ZXJuLCBmbGFncyksXG4gICAgICB0aGlzSXNSZWdFeHAgPyB0aGlzIDogUmVnRXhwUHJvdG90eXBlLFxuICAgICAgUmVnRXhwV3JhcHBlclxuICAgICk7XG5cbiAgICBpZiAoVU5TVVBQT1JURURfWSAmJiBzdGlja3kpIHNldEludGVybmFsU3RhdGUocmVzdWx0LCB7IHN0aWNreTogc3RpY2t5IH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgdmFyIHByb3h5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIGtleSBpbiBSZWdFeHBXcmFwcGVyIHx8IGRlZmluZVByb3BlcnR5KFJlZ0V4cFdyYXBwZXIsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOYXRpdmVSZWdFeHBba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IE5hdGl2ZVJlZ0V4cFtrZXldID0gaXQ7IH1cbiAgICB9KTtcbiAgfTtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKE5hdGl2ZVJlZ0V4cCk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHdoaWxlIChrZXlzLmxlbmd0aCA+IGluZGV4KSBwcm94eShrZXlzW2luZGV4KytdKTtcbiAgUmVnRXhwUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmVnRXhwV3JhcHBlcjtcbiAgUmVnRXhwV3JhcHBlci5wcm90b3R5cGUgPSBSZWdFeHBQcm90b3R5cGU7XG4gIHJlZGVmaW5lKGdsb2JhbCwgJ1JlZ0V4cCcsIFJlZ0V4cFdyYXBwZXIpO1xufVxuXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXQtcmVnZXhwLUBAc3BlY2llc1xuc2V0U3BlY2llcygnUmVnRXhwJyk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1678\n")},1679:function(module,exports,__webpack_require__){eval("var api = __webpack_require__(235);\n            var content = __webpack_require__(1680);\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY3OS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMvZXJpa19yaXR0ZXIvcmVwb3MvZ2l0aHViLmNvbS9hcGFjaGUtc3VwZXJzZXQvc3VwZXJzZXQtdWkvcGx1Z2lucy9sZWdhY3ktcGx1Z2luLWNoYXJ0LWNhbGVuZGFyL3NyYy92ZW5kb3IvZDN0aXAuY3NzPzM4ODAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cG9zdGNzcyEuL2QzdGlwLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxudmFyIGV4cG9ydGVkID0gY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHt9O1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlZDsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1679\n")},1680:function(module,exports,__webpack_require__){eval("// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(236);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, \"/**\\n * Licensed to the Apache Software Foundation (ASF) under one\\n * or more contributor license agreements.  See the NOTICE file\\n * distributed with this work for additional information\\n * regarding copyright ownership.  The ASF licenses this file\\n * to you under the Apache License, Version 2.0 (the\\n * \\\"License\\\"); you may not use this file except in compliance\\n * with the License.  You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing,\\n * software distributed under the License is distributed on an\\n * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n * KIND, either express or implied.  See the License for the\\n * specific language governing permissions and limitations\\n * under the License.\\n */\\n/* from d3-tip */\\n.d3-tip {\\n  line-height: 1;\\n  padding: 12px;\\n  background: rgba(0, 0, 0, 0.8);\\n  color: #fff;\\n  border-radius: 2px;\\n  pointer-events: none;\\n  z-index: 1000;\\n}\\n\\n/* Creates a small triangle extender for the tooltip */\\n.d3-tip:after {\\n  box-sizing: border-box;\\n  display: inline;\\n  font-size: 10px;\\n  width: 100%;\\n  line-height: 1;\\n  color: rgba(0, 0, 0, 0.8);\\n  position: absolute;\\n  pointer-events: none;\\n}\\n\\n/* Northward tooltips */\\n.d3-tip.n:after {\\n  content: '\\\\25BC';\\n  margin: -1px 0 0 0;\\n  top: 100%;\\n  left: 0;\\n  text-align: center;\\n}\\n\\n/* Eastward tooltips */\\n.d3-tip.e:after {\\n  content: '\\\\25C0';\\n  margin: -4px 0 0 0;\\n  top: 50%;\\n  left: -8px;\\n}\\n\\n/* Southward tooltips */\\n.d3-tip.s:after {\\n  content: '\\\\25B2';\\n  margin: 0 0 1px 0;\\n  top: -8px;\\n  left: 0;\\n  text-align: center;\\n}\\n\\n/* Westward tooltips */\\n.d3-tip.w:after {\\n  content: '\\\\25B6';\\n  margin: -4px 0 0 -1px;\\n  top: 50%;\\n  left: 100%;\\n}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY4MC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMvZXJpa19yaXR0ZXIvcmVwb3MvZ2l0aHViLmNvbS9hcGFjaGUtc3VwZXJzZXQvc3VwZXJzZXQtdWkvcGx1Z2lucy9sZWdhY3ktcGx1Z2luLWNoYXJ0LWNhbGVuZGFyL3NyYy92ZW5kb3IvZDN0aXAuY3NzP2YxNWEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpO1xuZXhwb3J0cyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qKlxcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxcbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXFxuICogXFxcIkxpY2Vuc2VcXFwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcXG4gKlxcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXFxuICpcXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cXG4gKiBcXFwiQVMgSVNcXFwiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXFxuICogdW5kZXIgdGhlIExpY2Vuc2UuXFxuICovXFxuLyogZnJvbSBkMy10aXAgKi9cXG4uZDMtdGlwIHtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgcGFkZGluZzogMTJweDtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC44KTtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICB6LWluZGV4OiAxMDAwO1xcbn1cXG5cXG4vKiBDcmVhdGVzIGEgc21hbGwgdHJpYW5nbGUgZXh0ZW5kZXIgZm9yIHRoZSB0b29sdGlwICovXFxuLmQzLXRpcDphZnRlciB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgZGlzcGxheTogaW5saW5lO1xcbiAgZm9udC1zaXplOiAxMHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuOCk7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG59XFxuXFxuLyogTm9ydGh3YXJkIHRvb2x0aXBzICovXFxuLmQzLXRpcC5uOmFmdGVyIHtcXG4gIGNvbnRlbnQ6ICdcXFxcMjVCQyc7XFxuICBtYXJnaW46IC0xcHggMCAwIDA7XFxuICB0b3A6IDEwMCU7XFxuICBsZWZ0OiAwO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4vKiBFYXN0d2FyZCB0b29sdGlwcyAqL1xcbi5kMy10aXAuZTphZnRlciB7XFxuICBjb250ZW50OiAnXFxcXDI1QzAnO1xcbiAgbWFyZ2luOiAtNHB4IDAgMCAwO1xcbiAgdG9wOiA1MCU7XFxuICBsZWZ0OiAtOHB4O1xcbn1cXG5cXG4vKiBTb3V0aHdhcmQgdG9vbHRpcHMgKi9cXG4uZDMtdGlwLnM6YWZ0ZXIge1xcbiAgY29udGVudDogJ1xcXFwyNUIyJztcXG4gIG1hcmdpbjogMCAwIDFweCAwO1xcbiAgdG9wOiAtOHB4O1xcbiAgbGVmdDogMDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLyogV2VzdHdhcmQgdG9vbHRpcHMgKi9cXG4uZDMtdGlwLnc6YWZ0ZXIge1xcbiAgY29udGVudDogJ1xcXFwyNUI2JztcXG4gIG1hcmdpbjogLTRweCAwIDAgLTFweDtcXG4gIHRvcDogNTAlO1xcbiAgbGVmdDogMTAwJTtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1680\n")},2304:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(6);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n\n// EXTERNAL MODULE: ../superset-ui-chart/src/components/reactify.tsx\nvar reactify = __webpack_require__(1288);\n\n// EXTERNAL MODULE: ../superset-ui-style/src/index.ts\nvar src = __webpack_require__(149);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-array/src/extent.js\nvar extent = __webpack_require__(290);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-array/src/range.js\nvar range = __webpack_require__(283);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-selection/src/select.js\nvar src_select = __webpack_require__(420);\n\n// EXTERNAL MODULE: ../superset-ui-color/src/SequentialSchemeRegistrySingleton.ts\nvar SequentialSchemeRegistrySingleton = __webpack_require__(398);\n\n// EXTERNAL MODULE: ../superset-ui-number-format/src/NumberFormatterRegistrySingleton.ts + 2 modules\nvar NumberFormatterRegistrySingleton = __webpack_require__(103);\n\n// EXTERNAL MODULE: ../superset-ui-time-format/src/TimeFormatterRegistrySingleton.ts + 5 modules\nvar TimeFormatterRegistrySingleton = __webpack_require__(100);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/core-js/modules/es.array.reverse.js\nvar es_array_reverse = __webpack_require__(1325);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/core-js/modules/es.regexp.constructor.js\nvar es_regexp_constructor = __webpack_require__(1678);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/core-js/modules/es.regexp.to-string.js\nvar es_regexp_to_string = __webpack_require__(77);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/core-js/modules/es.string.replace.js\nvar es_string_replace = __webpack_require__(187);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/core-js/modules/es.string.split.js\nvar es_string_split = __webpack_require__(409);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/core-js/modules/es.string.trim.js\nvar es_string_trim = __webpack_require__(653);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/core-js/modules/web.dom-collections.iterator.js\nvar web_dom_collections_iterator = __webpack_require__(30);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-tip/index.js\nvar d3_tip = __webpack_require__(416);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/legacy-plugin-chart-calendar/src/vendor/d3tip.css\nvar d3tip = __webpack_require__(1679);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/legacy-plugin-chart-calendar/src/vendor/cal-heatmap.js\n// [LICENSE TBD]\n/* Copied and altered from http://cal-heatmap.com/ , alterations around:\n * - tuning tooltips\n * - supporting multi-colors scales\n * - legend format\n * - UTC handling\n */ /* eslint-disable */var d3= true?__webpack_require__(107):undefined,d3= true?__webpack_require__(107):undefined,CalHeatMap=function(){\'use strict\';var self=this;self.tip=Object(d3_tip["a" /* default */])().attr("class","d3-tip").direction("n").offset([-5,0]).html(d=>"\\n      ".concat(self.options.timeFormatter(d.t),": <strong>").concat(self.options.valueFormatter(d.v),"</strong>\\n    "));self.legendTip=Object(d3_tip["a" /* default */])().attr("class","d3-tip").direction("n").offset([-5,0]).html(d=>self.options.valueFormatter(d));this.allowedDataType=["json","csv","tsv","txt"];// Default settings\nthis.options={// selector string of the container to append the graph to\n// Accept any string value accepted by document.querySelector or CSS3\n// or an Element object\nitemSelector:"#cal-heatmap",// Whether to paint the calendar on init()\n// Used by testsuite to reduce testing time\npaintOnLoad:!0,// ================================================\n// DOMAIN\n// ================================================\n// Number of domain to display on the graph\nrange:12,// Size of each cell, in pixel\ncellSize:10,// Padding between each cell, in pixel\ncellPadding:2,// For rounded subdomain rectangles, in pixels\ncellRadius:0,domainGutter:2,domainMargin:[0,0,0,0],valueFormatter:d=>d,timeFormatter:d=>d,domain:"hour",subDomain:"min",// Number of columns to split the subDomains to\n// If not null, will takes precedence over rowLimit\ncolLimit:null,// Number of rows to split the subDomains to\n// Will be ignored if colLimit is not null\nrowLimit:null,// First day of the week is Monday\n// 0 to start the week on Sunday\nweekStartOnMonday:!0,// Start date of the graph\n// @default now\nstart:new Date,minDate:null,maxDate:null,// ================================================\n// DATA\n// ================================================\n// Data source\n// URL, where to fetch the original datas\ndata:"",// Data type\n// Default: json\ndataType:this.allowedDataType[0],// Payload sent when using POST http method\n// Leave to null (default) for GET request\n// Expect a string, formatted like "a=b;c=d"\ndataPostPayload:null,// Additional headers sent when requesting data\n// Expect an object formatted like:\n// { \'X-CSRF-TOKEN\': \'token\' }\ndataRequestHeaders:null,// Whether to consider missing date:value from the datasource\n// as equal to 0, or just leave them as missing\nconsiderMissingDataAsZero:!1,// Load remote data on calendar creation\n// When false, the calendar will be left empty\nloadOnInit:!0,// Calendar orientation\n// false: display domains side by side\n// true : display domains one under the other\nverticalOrientation:!1,// Domain dynamic width/height\n// The width on a domain depends on the number of\ndomainDynamicDimension:!0,// Domain Label properties\nlabel:{// valid: top, right, bottom, left\nposition:"bottom",// Valid: left, center, right\n// Also valid are the direct svg values: start, middle, end\nalign:"center",// By default, there is no margin/padding around the label\noffset:{x:0,y:0},rotate:null,// Used only on vertical orientation\nwidth:100,// Used only on horizontal orientation\nheight:null},// ================================================\n// LEGEND\n// ================================================\n// Threshold for the legend\nlegend:[10,20,30,40],// Whether to display the legend\ndisplayLegend:!0,legendCellSize:10,legendCellPadding:2,legendMargin:[0,0,0,0],// Legend vertical position\n// top: place legend above calendar\n// bottom: place legend below the calendar\nlegendVerticalPosition:"bottom",// Legend horizontal position\n// accepted values: left, center, right\nlegendHorizontalPosition:"left",// Legend rotation\n// accepted values: horizontal, vertical\nlegendOrientation:"horizontal",// Objects holding all the heatmap different colors\n// null to disable, and use the default css styles\n//\n// Examples:\n// legendColors: {\n//    min: "green",\n//    max: "red",\n//    empty: "#ffffff",\n//    base: "grey",\n//    overflow: "red",\n//    colorScaler: null,\n// }\nlegendColors:null,// ================================================\n// HIGHLIGHT\n// ================================================\n// List of dates to highlight\n// Valid values:\n// - []: don\'t highlight anything\n// - "now": highlight the current date\n// - an array of Date objects: highlight the specified dates\nhighlight:[],// ================================================\n// TEXT FORMATTING / i18n\n// ================================================\n// Name of the items to represent in the calendar\nitemName:["item","items"],// Formatting of the domain label\n// @default: null, will use the formatting according to domain type\n// Accept a string used as specifier by d3.time.format()\n// or a function\n//\n// Refer to https://github.com/mbostock/d3/wiki/Time-Formatting\n// for accepted date formatting used by d3.time.format()\ndomainLabelFormat:null,// Formatting of the title displayed when hovering a subDomain cell\nsubDomainTitleFormat:{empty:"{date}",filled:"{count} {name} {connector} {date}"},// Formatting of the {date} used in subDomainTitleFormat\n// @default: null, will use the formatting according to subDomain type\n// Accept a string used as specifier by d3.time.format()\n// or a function\n//\n// Refer to https://github.com/mbostock/d3/wiki/Time-Formatting\n// for accepted date formatting used by d3.time.format()\nsubDomainDateFormat:null,// Formatting of the text inside each subDomain cell\n// @default: null, no text\n// Accept a string used as specifier by d3.time.format()\n// or a function\n//\n// Refer to https://github.com/mbostock/d3/wiki/Time-Formatting\n// for accepted date formatting used by d3.time.format()\nsubDomainTextFormat:null,// Formatting of the title displayed when hovering a legend cell\nlegendTitleFormat:{lower:"less than {min} {name}",inner:"between {down} and {up} {name}",upper:"more than {max} {name}"},// Animation duration, in ms\nanimationDuration:500,nextSelector:!1,previousSelector:!1,itemNamespace:"cal-heatmap",tooltip:!1,// ================================================\n// EVENTS CALLBACK\n// ================================================\n// Callback when clicking on a time block\nonClick:null,// Callback after painting the empty calendar\n// Can be used to trigger an API call, once the calendar is ready to be filled\nafterLoad:null,// Callback after loading the next domain in the calendar\nafterLoadNextDomain:null,// Callback after loading the previous domain in the calendar\nafterLoadPreviousDomain:null,// Callback after finishing all actions on the calendar\nonComplete:null,// Callback after fetching the datas, but before applying them to the calendar\n// Used mainly to convert the datas if they\'re not formatted like expected\n// Takes the fetched "data" object as argument, must return a json object\n// formatted like {timestamp:count, timestamp2:count2},\nafterLoadData:function afterLoadData(data){return data},// Callback triggered after calling and completing update().\nafterUpdate:null,// Callback triggered after calling next().\n// The `status` argument is equal to true if there is no\n// more next domain to load\n//\n// This callback is also executed once, after calling previous(),\n// only when the max domain is reached\nonMaxDomainReached:null,// Callback triggered after calling previous().\n// The `status` argument is equal to true if there is no\n// more previous domain to load\n//\n// This callback is also executed once, after calling next(),\n// only when the min domain is reached\nonMinDomainReached:null};this._domainType={min:{name:"minute",level:10,maxItemNumber:60,defaultRowNumber:10,defaultColumnNumber:6,row:function row(d){return self.getSubDomainRowNumber(d)},column:function column(d){return self.getSubDomainColumnNumber(d)},position:{x:function x(d){return Math.floor(d.getMinutes()/self._domainType.min.row(d))},y:function y(d){return d.getMinutes()%self._domainType.min.row(d)}},format:{date:"%H:%M, %A %B %-e, %Y",legend:"",connector:"at"},extractUnit:function extractUnit(d){return new Date(d.getFullYear(),d.getMonth(),d.getDate(),d.getHours(),d.getMinutes()).getTime()}},hour:{name:"hour",level:20,maxItemNumber:function maxItemNumber(d){switch(self.options.domain){case"day":return 24;case"week":return 168;case"month":return 24*(self.options.domainDynamicDimension?self.getDayCountInMonth(d):31);}},defaultRowNumber:6,defaultColumnNumber:function defaultColumnNumber(d){switch(self.options.domain){case"day":return 4;case"week":return 28;case"month":return self.options.domainDynamicDimension?self.getDayCountInMonth(d):31;}},row:function row(d){return self.getSubDomainRowNumber(d)},column:function column(d){return self.getSubDomainColumnNumber(d)},position:{x:function x(d){if("month"===self.options.domain){if(0<self.options.colLimit||0<self.options.rowLimit){return Math.floor((d.getHours()+24*(d.getDate()-1))/self._domainType.hour.row(d))}return Math.floor(d.getHours()/self._domainType.hour.row(d))+4*(d.getDate()-1)}else if("week"===self.options.domain){if(0<self.options.colLimit||0<self.options.rowLimit){return Math.floor((d.getHours()+24*self.getWeekDay(d))/self._domainType.hour.row(d))}return Math.floor(d.getHours()/self._domainType.hour.row(d))+4*self.getWeekDay(d)}return Math.floor(d.getHours()/self._domainType.hour.row(d))},y:function y(d){var p=d.getHours();if(0<self.options.colLimit||0<self.options.rowLimit){switch(self.options.domain){case"month":p+=24*(d.getDate()-1);break;case"week":p+=24*self.getWeekDay(d);break;}}return Math.floor(p%self._domainType.hour.row(d))}},format:{date:"%Hh, %A %B %-e, %Y",legend:"%H:00",connector:"at"},extractUnit:function extractUnit(d){return new Date(d.getFullYear(),d.getMonth(),d.getDate(),d.getHours()).getTime()}},day:{name:"day",level:30,maxItemNumber:function maxItemNumber(d){switch(self.options.domain){case"week":return 7;case"month":return self.options.domainDynamicDimension?self.getDayCountInMonth(d):31;case"year":return self.options.domainDynamicDimension?self.getDayCountInYear(d):366;}},defaultColumnNumber:function defaultColumnNumber(d){d=new Date(d);switch(self.options.domain){case"week":return 1;case"month":return self.options.domainDynamicDimension&&!self.options.verticalOrientation?self.getWeekNumber(new Date(d.getFullYear(),d.getMonth()+1,0))-self.getWeekNumber(d)+1:6;case"year":return self.options.domainDynamicDimension?self.getWeekNumber(new Date(d.getFullYear(),11,31))-self.getWeekNumber(new Date(d.getFullYear(),0))+1:54;}},defaultRowNumber:7,row:function row(d){return self.getSubDomainRowNumber(d)},column:function column(d){return self.getSubDomainColumnNumber(d)},position:{x:function x(d){switch(self.options.domain){case"week":return Math.floor(self.getWeekDay(d)/self._domainType.day.row(d));case"month":if(0<self.options.colLimit||0<self.options.rowLimit){return Math.floor((d.getDate()-1)/self._domainType.day.row(d))}return self.getWeekNumber(d)-self.getWeekNumber(new Date(d.getFullYear(),d.getMonth()));case"year":if(0<self.options.colLimit||0<self.options.rowLimit){return Math.floor((self.getDayOfYear(d)-1)/self._domainType.day.row(d))}return self.getWeekNumber(d);}},y:function y(d){var p=self.getWeekDay(d);if(0<self.options.colLimit||0<self.options.rowLimit){switch(self.options.domain){case"year":p=self.getDayOfYear(d)-1;break;case"week":p=self.getWeekDay(d);break;case"month":p=d.getDate()-1;break;}}return Math.floor(p%self._domainType.day.row(d))}},format:{date:"%A %B %-e, %Y",legend:"%e %b",connector:"on"},extractUnit:function extractUnit(d){return new Date(d.getFullYear(),d.getMonth(),d.getDate()).getTime()}},week:{name:"week",level:40,maxItemNumber:54,defaultColumnNumber:function defaultColumnNumber(d){d=new Date(d);switch(self.options.domain){case"year":return self._domainType.week.maxItemNumber;case"month":return self.options.domainDynamicDimension?self.getWeekNumber(new Date(d.getFullYear(),d.getMonth()+1,0))-self.getWeekNumber(d):5;}},defaultRowNumber:1,row:function row(d){return self.getSubDomainRowNumber(d)},column:function column(d){return self.getSubDomainColumnNumber(d)},position:{x:function x(d){switch(self.options.domain){case"year":return Math.floor(self.getWeekNumber(d)/self._domainType.week.row(d));case"month":return Math.floor(self.getMonthWeekNumber(d)/self._domainType.week.row(d));}},y:function y(d){return self.getWeekNumber(d)%self._domainType.week.row(d)}},format:{date:"%B Week #%W",legend:"%B Week #%W",connector:"in"},extractUnit:function extractUnit(d){var dt=new Date(d.getFullYear(),d.getMonth(),d.getDate()),weekDay=dt.getDay()-(self.options.weekStartOnMonday?1:0);// According to ISO-8601, week number computation are based on week starting on Monday\nif(0>weekDay){weekDay=6}dt.setDate(dt.getDate()-weekDay);return dt.getTime()}},month:{name:"month",level:50,maxItemNumber:12,defaultColumnNumber:12,defaultRowNumber:1,row:function row(){return self.getSubDomainRowNumber()},column:function column(){return self.getSubDomainColumnNumber()},position:{x:function x(d){return Math.floor(d.getMonth()/self._domainType.month.row(d))},y:function y(d){return d.getMonth()%self._domainType.month.row(d)}},format:{date:"%B %Y",legend:"%B",connector:"in"},extractUnit:function extractUnit(d){return new Date(d.getFullYear(),d.getMonth()).getTime()}},year:{name:"year",level:60,row:function row(){return self.options.rowLimit||1},column:function column(){return self.options.colLimit||1},position:{x:function x(){return 1},y:function y(){return 1}},format:{date:"%Y",legend:"%Y",connector:"in"},extractUnit:function extractUnit(d){return new Date(d.getFullYear()).getTime()}}};for(var type in this._domainType){if(this._domainType.hasOwnProperty(type)){var d=this._domainType[type];this._domainType["x_"+type]={name:"x_"+type,level:d.type,maxItemNumber:d.maxItemNumber,defaultRowNumber:d.defaultRowNumber,defaultColumnNumber:d.defaultColumnNumber,row:d.column,column:d.row,position:{x:d.position.y,y:d.position.x},format:d.format,extractUnit:d.extractUnit}}}// Record the address of the last inserted domain when browsing\nthis.lastInsertedSvg=null;this._completed=!1;// Record all the valid domains\n// Each domain value is a timestamp in milliseconds\nthis._domains=d3.map();this.graphDim={width:0,height:0};this.legendDim={width:0,height:0};this.NAVIGATE_LEFT=1;this.NAVIGATE_RIGHT=2;// Various update mode when using the update() API\nthis.RESET_ALL_ON_UPDATE=0;this.RESET_SINGLE_ON_UPDATE=1;this.APPEND_ON_UPDATE=2;this.DEFAULT_LEGEND_MARGIN=10;this.root=null;this.tooltip=null;this._maxDomainReached=!1;this._minDomainReached=!1;this.domainPosition=new DomainPosition;this.Legend=null;this.legendScale=null;// List of domains that are skipped because of DST\n// All times belonging to these domains should be re-assigned to the previous domain\nthis.DSTDomain=[];/**\n   * Display the graph for the first time\n   * @return bool True if the calendar is created\n   */this._init=function(){self.getDomain(self.options.start).map(function(d){return d.getTime()}).map(function(d){self._domains.set(d,self.getSubDomain(d).map(function(d){return{t:self._domainType[self.options.subDomain].extractUnit(d),v:null}}))});self.root=d3.select(self.options.itemSelector).append("svg").attr("class","cal-heatmap-container");self.root.attr("x",0).attr("y",0).append("svg").attr("class","graph");self.Legend=new Legend(self);if(self.options.paintOnLoad){_initCalendar()}self.root.call(self.tip);self.root.call(self.legendTip);return!0};function _initCalendar(){self.verticalDomainLabel="top"===self.options.label.position||"bottom"===self.options.label.position;self.domainVerticalLabelHeight=null===self.options.label.height?Math.max(25,2*self.options.cellSize):self.options.label.height;self.domainHorizontalLabelWidth=0;if(""===self.options.domainLabelFormat&&null===self.options.label.height){self.domainVerticalLabelHeight=0}if(!self.verticalDomainLabel){self.domainVerticalLabelHeight=0;self.domainHorizontalLabelWidth=self.options.label.width}self.paint();// =========================================================================//\n// ATTACHING DOMAIN NAVIGATION EVENT                    //\n// =========================================================================//\nif(!1!==self.options.nextSelector){d3.select(self.options.nextSelector).on("click."+self.options.itemNamespace,function(){d3.event.preventDefault();return self.loadNextDomain(1)})}if(!1!==self.options.previousSelector){d3.select(self.options.previousSelector).on("click."+self.options.itemNamespace,function(){d3.event.preventDefault();return self.loadPreviousDomain(1)})}self.Legend.redraw(self.graphDim.width-self.options.domainGutter-self.options.cellPadding);self.afterLoad();var domains=self.getDomainKeys();// Fill the graph with some datas\nif(self.options.loadOnInit){self.getDatas(self.options.data,new Date(domains[0]),self.getSubDomain(domains[domains.length-1]).pop(),function(){self.fill();self.onComplete()})}else{self.onComplete()}self.checkIfMinDomainIsReached(domains[0]);self.checkIfMaxDomainIsReached(self.getNextDomain().getTime())}// Return the width of the domain block, without the domain gutter\n// @param int d Domain start timestamp\nfunction w(d,outer){var width=self.options.cellSize*self._domainType[self.options.subDomain].column(d)+self.options.cellPadding*self._domainType[self.options.subDomain].column(d);if(2===arguments.length&&!0===outer){return width+=self.domainHorizontalLabelWidth+self.options.domainGutter+self.options.domainMargin[1]+self.options.domainMargin[3]}return width}// Return the height of the domain block, without the domain gutter\nfunction h(d,outer){var height=self.options.cellSize*self._domainType[self.options.subDomain].row(d)+self.options.cellPadding*self._domainType[self.options.subDomain].row(d);if(2===arguments.length&&!0===outer){height+=self.options.domainGutter+self.domainVerticalLabelHeight+self.options.domainMargin[0]+self.options.domainMargin[2]}return height}/**\n   *\n   *\n   * @param int navigationDir\n   */this.paint=function(navigationDir){var options=self.options;if(0===arguments.length){navigationDir=!1}// Painting all the domains\nvar domainSvg=self.root.select(".graph").selectAll(".graph-domain").data(function(){var data=self.getDomainKeys();return navigationDir===self.NAVIGATE_LEFT?data.reverse():data},function(d){return d}),enteringDomainDim=0,exitingDomainDim=0,svg=domainSvg.enter().append("svg").attr("width",function(d){return w(d,!0)}).attr("height",function(d){return h(d,!0)}).attr("x",function(d){if(options.verticalOrientation){self.graphDim.width=Math.max(self.graphDim.width,w(d,!0));return 0}else{return getDomainPosition(d,self.graphDim,"width",w(d,!0))}}).attr("y",function(d){if(options.verticalOrientation){return getDomainPosition(d,self.graphDim,"height",h(d,!0))}else{self.graphDim.height=Math.max(self.graphDim.height,h(d,!0));return 0}}).attr("class",function(d){var classname="graph-domain",date=new Date(d);switch(options.domain){case"hour":classname+=" h_"+date.getHours();/* falls through */case"day":classname+=" d_"+date.getDate()+" dy_"+date.getDay();/* falls through */case"week":classname+=" w_"+self.getWeekNumber(date);/* falls through */case"month":classname+=" m_"+(date.getMonth()+1);/* falls through */case"year":classname+=" y_"+date.getFullYear();}return classname});self.lastInsertedSvg=svg;function getDomainPosition(domainIndex,graphDim,axis,domainDim){var tmp=0;switch(navigationDir){case!1:tmp=graphDim[axis];graphDim[axis]+=domainDim;self.domainPosition.setPosition(domainIndex,tmp);return tmp;case self.NAVIGATE_RIGHT:self.domainPosition.setPosition(domainIndex,graphDim[axis]);enteringDomainDim=domainDim;exitingDomainDim=self.domainPosition.getPositionFromIndex(1);self.domainPosition.shiftRightBy(exitingDomainDim);return graphDim[axis];case self.NAVIGATE_LEFT:tmp=-domainDim;enteringDomainDim=-tmp;exitingDomainDim=graphDim[axis]-self.domainPosition.getLast();self.domainPosition.setPosition(domainIndex,tmp);self.domainPosition.shiftLeftBy(enteringDomainDim);return tmp;}}svg.append("rect").attr("width",function(d){return w(d,!0)-options.domainGutter-options.cellPadding}).attr("height",function(d){return h(d,!0)-options.domainGutter-options.cellPadding}).attr("class","domain-background");// =========================================================================//\n// PAINTING SUBDOMAINS                            //\n// =========================================================================//\nvar subDomainSvgGroup=svg.append("svg").attr("x",function(){if("left"===options.label.position){return self.domainHorizontalLabelWidth+options.domainMargin[3]}else{return options.domainMargin[3]}}).attr("y",function(){if("top"===options.label.position){return self.domainVerticalLabelHeight+options.domainMargin[0]}else{return options.domainMargin[0]}}).attr("class","graph-subdomain-group"),rect=subDomainSvgGroup.selectAll("g").data(function(d){return self._domains.get(d)}).enter().append("g");rect.append("rect").attr("class",function(d){return"graph-rect"+self.getHighlightClassName(d.t)+(null!==options.onClick?" hover_cursor":"")}).attr("width",options.cellSize).attr("height",options.cellSize).attr("x",function(d){return self.positionSubDomainX(d.t)}).attr("y",function(d){return self.positionSubDomainY(d.t)}).on("click",function(d){if(null!==options.onClick){return self.onClick(new Date(d.t),d.v)}}).call(function(selection){if(0<options.cellRadius){selection.attr("rx",options.cellRadius).attr("ry",options.cellRadius)}if(null!==self.legendScale&&null!==options.legendColors&&options.legendColors.hasOwnProperty("base")){selection.attr("fill",options.legendColors.base)}if(options.tooltip){selection.on("mouseover",function(d){self.tip.show(d,this)}).on("mouseout",function(){self.tip.hide(d)})}});// Appending a title to each subdomain\nif(!options.tooltip){rect.append("title").text(function(d){return self.formatDate(new Date(d.t),options.subDomainDateFormat)})}// =========================================================================//\n// PAINTING LABEL                              //\n// =========================================================================//\nif(""!==options.domainLabelFormat){svg.append("text").attr("class","graph-label").attr("y",function(d){var y=options.domainMargin[0];switch(options.label.position){case"top":y+=self.domainVerticalLabelHeight/2;break;case"bottom":y+=h(d)+self.domainVerticalLabelHeight/2;}return y+options.label.offset.y*("right"===options.label.rotate&&"right"===options.label.position||"left"===options.label.rotate&&"left"===options.label.position?-1:1)}).attr("x",function(d){var x=options.domainMargin[3];switch(options.label.position){case"right":x+=w(d);break;case"bottom":case"top":x+=w(d)/2;}if("right"===options.label.align){return x+self.domainHorizontalLabelWidth-options.label.offset.x*("right"===options.label.rotate?-1:1)}return x+options.label.offset.x}).attr("text-anchor",function(){switch(options.label.align){case"start":case"left":return"start";case"end":case"right":return"end";default:return"middle";}}).attr("dominant-baseline",function(){return self.verticalDomainLabel?"middle":"top"}).text(function(d){return self.formatDate(new Date(d),options.domainLabelFormat)}).call(domainRotate)}function domainRotate(selection){switch(options.label.rotate){case"right":selection.attr("transform",function(d){var s="rotate(90), ";switch(options.label.position){case"right":s+="translate(-"+w(d)+" , -"+w(d)+")";break;case"left":s+="translate(0, -"+self.domainHorizontalLabelWidth+")";break;}return s});break;case"left":selection.attr("transform",function(d){var s="rotate(270), ";switch(options.label.position){case"right":s+="translate(-"+(w(d)+self.domainHorizontalLabelWidth)+" , "+w(d)+")";break;case"left":s+="translate(-"+self.domainHorizontalLabelWidth+" , "+self.domainHorizontalLabelWidth+")";break;}return s});break;}}// =========================================================================//\n// PAINTING DOMAIN SUBDOMAIN CONTENT                    //\n// =========================================================================//\nif(null!==options.subDomainTextFormat){rect.append("text").attr("class",function(d){return"subdomain-text"+self.getHighlightClassName(d.t)}).attr("x",function(d){return self.positionSubDomainX(d.t)+options.cellSize/2}).attr("y",function(d){return self.positionSubDomainY(d.t)+options.cellSize/2}).attr("text-anchor","middle").attr("dominant-baseline","central").text(function(d){return self.formatDate(new Date(d.t),options.subDomainTextFormat)})}// =========================================================================//\n// ANIMATION                                //\n// =========================================================================//\nif(!1!==navigationDir){domainSvg.transition().duration(options.animationDuration).attr("x",function(d){return options.verticalOrientation?0:self.domainPosition.getPosition(d)}).attr("y",function(d){return options.verticalOrientation?self.domainPosition.getPosition(d):0})}var tempWidth=self.graphDim.width,tempHeight=self.graphDim.height;if(options.verticalOrientation){self.graphDim.height+=enteringDomainDim-exitingDomainDim}else{self.graphDim.width+=enteringDomainDim-exitingDomainDim}// At the time of exit, domainsWidth and domainsHeight already automatically shifted\ndomainSvg.exit().transition().duration(options.animationDuration).attr("x",function(d){if(options.verticalOrientation){return 0}else{switch(navigationDir){case self.NAVIGATE_LEFT:return Math.min(self.graphDim.width,tempWidth);case self.NAVIGATE_RIGHT:return-w(d,!0);}}}).attr("y",function(d){if(options.verticalOrientation){switch(navigationDir){case self.NAVIGATE_LEFT:return Math.min(self.graphDim.height,tempHeight);case self.NAVIGATE_RIGHT:return-h(d,!0);}}else{return 0}}).remove();// Resize the root container\nself.resize()}};CalHeatMap.prototype={/**\n   * Validate and merge user settings with default settings\n   *\n   * @param  {object} settings User settings\n   * @return {bool} False if settings contains error\n   */ /* jshint maxstatements:false */init:function init(settings){\'use strict\';var parent=this,options=parent.options=mergeRecursive(parent.options,settings);// Fatal errors\n// Stop script execution on error\n(/**\n     * Ensure that the domain and subdomain are valid\n     *\n     * @throw {Error} when domain or subdomain are not valid\n     * @return {bool} True if domain and subdomain are valid and compatible\n     */function(){if(!parent._domainType.hasOwnProperty(options.domain)||"min"===options.domain||"x_"===options.domain.substring(0,2)){throw new Error("The domain \'"+options.domain+"\' is not valid")}if(!parent._domainType.hasOwnProperty(options.subDomain)||"year"===options.subDomain){throw new Error("The subDomain \'"+options.subDomain+"\' is not valid")}if(parent._domainType[options.domain].level<=parent._domainType[options.subDomain].level){throw new Error("\'"+options.subDomain+"\' is not a valid subDomain to \'"+options.domain+"\'")}return!0}/**\n     * Fine-tune the label alignement depending on its position\n     *\n     * @return void\n     */)();validateSelector(options.itemSelector,!1,"itemSelector");if(-1===parent.allowedDataType.indexOf(options.dataType)){throw new Error("The data type \'"+options.dataType+"\' is not valid data type")}if(null===d3.select(options.itemSelector)[0][0]){throw new Error("The node \'"+options.itemSelector+"\' specified in itemSelector does not exists")}try{validateSelector(options.nextSelector,!0,"nextSelector");validateSelector(options.previousSelector,!0,"previousSelector")}catch(error){console.log(error.message);return!1}// If other settings contains error, will fallback to default\nif(!settings.hasOwnProperty("subDomain")){this.options.subDomain=getOptimalSubDomain(settings.domain)}if("string"!=typeof options.itemNamespace||""===options.itemNamespace){console.log("itemNamespace can not be empty, falling back to cal-heatmap");options.itemNamespace="cal-heatmap"}// Don\'t touch these settings\nvar s=["data","onComplete","onClick","afterLoad","afterLoadData","afterLoadPreviousDomain","afterLoadNextDomain","afterUpdate"];for(var k in s){if(settings.hasOwnProperty(s[k])){options[s[k]]=settings[s[k]]}}options.subDomainDateFormat="string"==typeof options.subDomainDateFormat||"function"==typeof options.subDomainDateFormat?options.subDomainDateFormat:this._domainType[options.subDomain].format.date;options.domainLabelFormat="string"==typeof options.domainLabelFormat||"function"==typeof options.domainLabelFormat?options.domainLabelFormat:this._domainType[options.domain].format.legend;options.subDomainTextFormat="string"==typeof options.subDomainTextFormat&&""!==options.subDomainTextFormat||"function"==typeof options.subDomainTextFormat?options.subDomainTextFormat:null;options.domainMargin=expandMarginSetting(options.domainMargin);options.legendMargin=expandMarginSetting(options.legendMargin);options.highlight=parent.expandDateSetting(options.highlight);options.itemName=/**\n     * Convert a string to an array like [singular-form, plural-form]\n     *\n     * @param  {string|array} value Date to convert\n     * @return {array}       An array like [singular-form, plural-form]\n     */function(value){if("string"==typeof value){return[value,value+(""!==value?"s":"")]}if(Array.isArray(value)){if(1===value.length){return[value[0],value[0]+"s"]}else if(2<value.length){return value.slice(0,2)}return value}return["item","items"]}(options.itemName);options.colLimit=function(value){return 0<value?value:null}(options.colLimit);options.rowLimit=function(value){if(0<value&&0<options.colLimit){console.log("colLimit and rowLimit are mutually exclusive, rowLimit will be ignored");return null}return 0<value?value:null}(options.rowLimit);if(!settings.hasOwnProperty("legendMargin")){autoAddLegendMargin()}(function(){// Auto-align label, depending on it\'s position\nif(!settings.hasOwnProperty("label")||settings.hasOwnProperty("label")&&!settings.label.hasOwnProperty("align")){switch(options.label.position){case"left":options.label.align="right";break;case"right":options.label.align="left";break;default:options.label.align="center";}if("left"===options.label.rotate){options.label.align="right"}else if("right"===options.label.rotate){options.label.align="left"}}if(!settings.hasOwnProperty("label")||settings.hasOwnProperty("label")&&!settings.label.hasOwnProperty("offset")){if("left"===options.label.position||"right"===options.label.position){options.label.offset={x:10,y:15}}}}/**\n     * If not specified, add some margin around the legend depending on its position\n     *\n     * @return void\n     */)();/**\n     * Validate that a queryString is valid\n     *\n     * @param  {Element|string|bool} selector   The queryString to test\n     * @param  {bool}  canBeFalse  Whether false is an accepted and valid value\n     * @param  {string} name    Name of the tested selector\n     * @throws {Error}        If the selector is not valid\n     * @return {bool}        True if the selector is a valid queryString\n     */function validateSelector(selector,canBeFalse,name){if((canBeFalse&&!1===selector||selector instanceof Element||"string"==typeof selector)&&""!==selector){return!0}throw new Error("The "+name+" is not valid")}/**\n     * Return the optimal subDomain for the specified domain\n     *\n     * @param  {string} domain a domain name\n     * @return {string}        the subDomain name\n     */function getOptimalSubDomain(domain){switch(domain){case"year":return"month";case"month":return"day";case"week":return"day";case"day":return"hour";default:return"min";}}function autoAddLegendMargin(){switch(options.legendVerticalPosition){case"top":options.legendMargin[2]=parent.DEFAULT_LEGEND_MARGIN;break;case"bottom":options.legendMargin[0]=parent.DEFAULT_LEGEND_MARGIN;break;case"middle":case"center":options.legendMargin["right"===options.legendHorizontalPosition?3:1]=parent.DEFAULT_LEGEND_MARGIN;}}/**\n     * Expand a number of an array of numbers to an usable 4 values array\n     *\n     * @param  {integer|array} value\n     * @return {array}        array\n     */function expandMarginSetting(value){if("number"==typeof value){value=[value]}if(!Array.isArray(value)){console.log("Margin only takes an integer or an array of integers");value=[0]}switch(value.length){case 1:return[value[0],value[0],value[0],value[0]];case 2:return[value[0],value[1],value[0],value[1]];case 3:return[value[0],value[1],value[2],value[1]];case 4:return value;default:return value.slice(0,4);}}return this._init()},/**\n   * Convert a keyword or an array of keyword/date to an array of date objects\n   *\n   * @param  {string|array|Date} value Data to convert\n   * @return {array}       An array of Dates\n   */expandDateSetting:function expandDateSetting(value){\'use strict\';if(!Array.isArray(value)){value=[value]}return value.map(function(data){if("now"===data){return new Date}if(data instanceof Date){return data}return!1}).filter(function(d){return!1!==d})},/**\n   * Fill the calendar by coloring the cells\n   *\n   * @param array svg An array of html node to apply the transformation to (optional)\n   *                  It\'s used to limit the painting to only a subset of the calendar\n   * @return void\n   */fill:function fill(svg){\'use strict\';var parent=this,options=parent.options;if(0===arguments.length){svg=parent.root.selectAll(".graph-domain")}var rect=svg.selectAll("svg").selectAll("g").data(function(d){return parent._domains.get(d)});/**\n     * Colorize the cell via a style attribute if enabled\n     */rect.transition().duration(options.animationDuration).select("rect").attr("class",function(d){var htmlClass=parent.getHighlightClassName(d.t).trim().split(" "),pastDate=parent.dateIsLessThan(d.t,new Date),sameDate=parent.dateIsEqual(d.t,new Date);if(null===parent.legendScale||null===d.v&&options.hasOwnProperty("considerMissingDataAsZero")&&!options.considerMissingDataAsZero&&!options.legendColors.hasOwnProperty("base")){htmlClass.push("graph-rect")}if(sameDate){htmlClass.push("now")}else if(!pastDate){htmlClass.push("future")}if(null!==d.v){htmlClass.push(parent.Legend.getClass(d.v,null===parent.legendScale))}else if(options.considerMissingDataAsZero&&pastDate){htmlClass.push(parent.Legend.getClass(0,null===parent.legendScale))}if(null!==options.onClick){htmlClass.push("hover_cursor")}return htmlClass.join(" ")}).call(function(element){if(null===parent.legendScale){return!1}element.attr("fill",function(d){if(null===d.v&&options.hasOwnProperty("considerMissingDataAsZero")&&!options.considerMissingDataAsZero){if(options.legendColors.hasOwnProperty("base")){return options.legendColors.base}}if(null!==options.legendColors&&options.legendColors.hasOwnProperty("empty")&&(0===d.v||null===d.v&&options.hasOwnProperty("considerMissingDataAsZero")&&options.considerMissingDataAsZero)){return options.legendColors.empty}if(0>d.v&&0<options.legend[0]&&null!==options.legendColors&&options.legendColors.hasOwnProperty("overflow")){return options.legendColors.overflow}return parent.legendScale(Math.min(d.v,options.legend[options.legend.length-1]))})});rect.transition().duration(options.animationDuration).select("title").text(function(d){return parent.getSubDomainTitle(d)});/**\n     * Change the subDomainText class if necessary\n     * Also change the text, e.g when text is representing the value\n     * instead of the date\n     */rect.transition().duration(options.animationDuration).select("text").attr("class",function(d){return"subdomain-text"+parent.getHighlightClassName(d.t)}).call(function(element){if("function"==typeof options.subDomainTextFormat){element.text(function(d){return options.subDomainTextFormat(d.t,d.v)})}})},/**\n   * Sprintf like function.\n   * Replaces placeholders {0} in string with values from provided object.\n   *\n   * @param string formatted String containing placeholders.\n   * @param object args Object with properties to replace placeholders in string.\n   *\n   * @return String\n   */formatStringWithObject:function formatStringWithObject(formatted,args){\'use strict\';for(var prop in args){if(args.hasOwnProperty(prop)){var regexp=new RegExp("\\\\{"+prop+"\\\\}","gi");formatted=formatted.replace(regexp,args[prop])}}return formatted},// =========================================================================//\n// EVENTS CALLBACK                              //\n// =========================================================================//\n/**\n   * Helper method for triggering event callback\n   *\n   * @param  string  eventName       Name of the event to trigger\n   * @param  array  successArgs     List of argument to pass to the callback\n   * @param  boolean  skip      Whether to skip the event triggering\n   * @return mixed  True when the triggering was skipped, false on error, else the callback function\n   */triggerEvent:function triggerEvent(eventName,successArgs,skip){\'use strict\';if(3===arguments.length&&skip||null===this.options[eventName]){return!0}if("function"==typeof this.options[eventName]){if("function"==typeof successArgs){successArgs=successArgs()}return this.options[eventName].apply(this,successArgs)}else{console.log("Provided callback for "+eventName+" is not a function.");return!1}},/**\n   * Event triggered on a mouse click on a subDomain cell\n   *\n   * @param  Date    d    Date of the subdomain block\n   * @param  int    itemNb  Number of items in that date\n   */onClick:function onClick(d,itemNb){\'use strict\';return this.triggerEvent("onClick",[d,itemNb])},/**\n   * Event triggered after drawing the calendar, byt before filling it with data\n   */afterLoad:function afterLoad(){\'use strict\';return this.triggerEvent("afterLoad")},/**\n   * Event triggered after completing drawing and filling the calendar\n   */onComplete:function onComplete(){\'use strict\';var response=this.triggerEvent("onComplete",[],this._completed);this._completed=!0;return response},/**\n   * Event triggered after shifting the calendar one domain back\n   *\n   * @param  Date    start  Domain start date\n   * @param  Date    end    Domain end date\n   */afterLoadPreviousDomain:function afterLoadPreviousDomain(start){\'use strict\';var parent=this;return this.triggerEvent("afterLoadPreviousDomain",function(){var subDomain=parent.getSubDomain(start);return[subDomain.shift(),subDomain.pop()]})},/**\n   * Event triggered after shifting the calendar one domain above\n   *\n   * @param  Date    start  Domain start date\n   * @param  Date    end    Domain end date\n   */afterLoadNextDomain:function afterLoadNextDomain(start){\'use strict\';var parent=this;return this.triggerEvent("afterLoadNextDomain",function(){var subDomain=parent.getSubDomain(start);return[subDomain.shift(),subDomain.pop()]})},/**\n   * Event triggered after loading the leftmost domain allowed by minDate\n   *\n   * @param  boolean  reached True if the leftmost domain was reached\n   */onMinDomainReached:function onMinDomainReached(reached){\'use strict\';this._minDomainReached=reached;return this.triggerEvent("onMinDomainReached",[reached])},/**\n   * Event triggered after loading the rightmost domain allowed by maxDate\n   *\n   * @param  boolean  reached True if the rightmost domain was reached\n   */onMaxDomainReached:function onMaxDomainReached(reached){\'use strict\';this._maxDomainReached=reached;return this.triggerEvent("onMaxDomainReached",[reached])},checkIfMinDomainIsReached:function checkIfMinDomainIsReached(date,upperBound){\'use strict\';if(this.minDomainIsReached(date)){this.onMinDomainReached(!0)}if(2===arguments.length){if(this._maxDomainReached&&!this.maxDomainIsReached(upperBound)){this.onMaxDomainReached(!1)}}},checkIfMaxDomainIsReached:function checkIfMaxDomainIsReached(date,lowerBound){\'use strict\';if(this.maxDomainIsReached(date)){this.onMaxDomainReached(!0)}if(2===arguments.length){if(this._minDomainReached&&!this.minDomainIsReached(lowerBound)){this.onMinDomainReached(!1)}}},afterUpdate:function afterUpdate(){\'use strict\';return this.triggerEvent("afterUpdate")},// =========================================================================//\n// FORMATTER                                //\n// =========================================================================//\nformatNumber:d3.format(",g"),formatDate:function formatDate(d,format){\'use strict\';if(2>arguments.length){format="title"}if("function"==typeof format){return format(d)}else{var f=d3.time.format(format);return f(d)}},getSubDomainTitle:function getSubDomainTitle(d){\'use strict\';if(null===d.v&&!this.options.considerMissingDataAsZero){return this.formatStringWithObject(this.options.subDomainTitleFormat.empty,{date:this.formatDate(new Date(d.t),this.options.subDomainDateFormat)})}else{var value=d.v;// Consider null as 0\nif(null===value&&this.options.considerMissingDataAsZero){value=0}return this.formatStringWithObject(this.options.subDomainTitleFormat.filled,{count:this.formatNumber(value),name:this.options.itemName[1!==value?1:0],connector:this._domainType[this.options.subDomain].format.connector,date:this.formatDate(new Date(d.t),this.options.subDomainDateFormat)})}},// =========================================================================//\n// DOMAIN NAVIGATION                            //\n// =========================================================================//\n/**\n   * Shift the calendar one domain forward\n   *\n   * The new domain is loaded only if it\'s not beyond maxDate\n   *\n   * @param int n Number of domains to load\n   * @return bool True if the next domain was loaded, else false\n   */loadNextDomain:function loadNextDomain(n){\'use strict\';if(this._maxDomainReached||0===n){return!1}var bound=this.loadNewDomains(this.NAVIGATE_RIGHT,this.getDomain(this.getNextDomain(),n));this.afterLoadNextDomain(bound.end);this.checkIfMaxDomainIsReached(this.getNextDomain().getTime(),bound.start);return!0},/**\n   * Shift the calendar one domain backward\n   *\n   * The previous domain is loaded only if it\'s not beyond the minDate\n   *\n   * @param int n Number of domains to load\n   * @return bool True if the previous domain was loaded, else false\n   */loadPreviousDomain:function loadPreviousDomain(n){\'use strict\';if(this._minDomainReached||0===n){return!1}var bound=this.loadNewDomains(this.NAVIGATE_LEFT,this.getDomain(this.getDomainKeys()[0],-n).reverse());this.afterLoadPreviousDomain(bound.start);this.checkIfMinDomainIsReached(bound.start,bound.end);return!0},loadNewDomains:function loadNewDomains(direction,newDomains){\'use strict\';var parent=this,backward=direction===this.NAVIGATE_LEFT,i=-1,total=newDomains.length,domains=this.getDomainKeys();function buildSubDomain(d){return{t:parent._domainType[parent.options.subDomain].extractUnit(d),v:null}}// Remove out of bound domains from list of new domains to prepend\nwhile(++i<total){if(backward&&this.minDomainIsReached(newDomains[i])){newDomains=newDomains.slice(0,i+1);break}if(!backward&&this.maxDomainIsReached(newDomains[i])){newDomains=newDomains.slice(0,i);break}}newDomains=newDomains.slice(-this.options.range);for(i=0,total=newDomains.length;i<total;i++){this._domains.set(newDomains[i].getTime(),this.getSubDomain(newDomains[i]).map(buildSubDomain));this._domains.remove(backward?domains.pop():domains.shift())}domains=this.getDomainKeys();if(backward){newDomains=newDomains.reverse()}this.paint(direction);this.getDatas(this.options.data,newDomains[0],this.getSubDomain(newDomains[newDomains.length-1]).pop(),function(){parent.fill(parent.lastInsertedSvg)});return{start:newDomains[backward?0:1],end:domains[domains.length-1]}},/**\n   * Return whether a date is inside the scope determined by maxDate\n   *\n   * @param int datetimestamp The timestamp in ms to test\n   * @return bool True if the specified date correspond to the calendar upper bound\n   */maxDomainIsReached:function maxDomainIsReached(datetimestamp){\'use strict\';return null!==this.options.maxDate&&this.options.maxDate.getTime()<datetimestamp},/**\n   * Return whether a date is inside the scope determined by minDate\n   *\n   * @param int datetimestamp The timestamp in ms to test\n   * @return bool True if the specified date correspond to the calendar lower bound\n   */minDomainIsReached:function minDomainIsReached(datetimestamp){\'use strict\';return null!==this.options.minDate&&this.options.minDate.getTime()>=datetimestamp},/**\n   * Return the list of the calendar\'s domain timestamp\n   *\n   * @return Array a sorted array of timestamp\n   */getDomainKeys:function getDomainKeys(){\'use strict\';return this._domains.keys().map(function(d){return parseInt(d,10)}).sort(function(a,b){return a-b})},// =========================================================================//\n// POSITIONNING                                //\n// =========================================================================//\npositionSubDomainX:function positionSubDomainX(d){\'use strict\';var index=this._domainType[this.options.subDomain].position.x(new Date(d));return index*this.options.cellSize+index*this.options.cellPadding},positionSubDomainY:function positionSubDomainY(d){\'use strict\';var index=this._domainType[this.options.subDomain].position.y(new Date(d));return index*this.options.cellSize+index*this.options.cellPadding},getSubDomainColumnNumber:function getSubDomainColumnNumber(d){\'use strict\';if(0<this.options.rowLimit){var i=this._domainType[this.options.subDomain].maxItemNumber;if("function"==typeof i){i=i(d)}return Math.ceil(i/this.options.rowLimit)}var j=this._domainType[this.options.subDomain].defaultColumnNumber;if("function"==typeof j){j=j(d)}return this.options.colLimit||j},getSubDomainRowNumber:function getSubDomainRowNumber(d){\'use strict\';if(0<this.options.colLimit){var i=this._domainType[this.options.subDomain].maxItemNumber;if("function"==typeof i){i=i(d)}return Math.ceil(i/this.options.colLimit)}var j=this._domainType[this.options.subDomain].defaultRowNumber;if("function"==typeof j){j=j(d)}return this.options.rowLimit||j},/**\n   * Return a classname if the specified date should be highlighted\n   *\n   * @param  timestamp date Date of the current subDomain\n   * @return String the highlight class\n   */getHighlightClassName:function getHighlightClassName(d){\'use strict\';d=new Date(d);if(0<this.options.highlight.length){for(var i in this.options.highlight){if(this.dateIsEqual(this.options.highlight[i],d)){return this.isNow(this.options.highlight[i])?" highlight-now":" highlight"}}}return""},/**\n   * Return whether the specified date is now,\n   * according to the type of subdomain\n   *\n   * @param  Date d The date to compare\n   * @return bool True if the date correspond to a subdomain cell\n   */isNow:function isNow(d){\'use strict\';return this.dateIsEqual(d,new Date)},/**\n   * Return whether 2 dates are equals\n   * This function is subdomain-aware,\n   * and dates comparison are dependent of the subdomain\n   *\n   * @param  Date dateA First date to compare\n   * @param  Date dateB Secon date to compare\n   * @return bool true if the 2 dates are equals\n   */ /* jshint maxcomplexity: false */dateIsEqual:function dateIsEqual(dateA,dateB){\'use strict\';if(!(dateA instanceof Date)){dateA=new Date(dateA)}if(!(dateB instanceof Date)){dateB=new Date(dateB)}switch(this.options.subDomain){case"x_min":case"min":return dateA.getFullYear()===dateB.getFullYear()&&dateA.getMonth()===dateB.getMonth()&&dateA.getDate()===dateB.getDate()&&dateA.getHours()===dateB.getHours()&&dateA.getMinutes()===dateB.getMinutes();case"x_hour":case"hour":return dateA.getFullYear()===dateB.getFullYear()&&dateA.getMonth()===dateB.getMonth()&&dateA.getDate()===dateB.getDate()&&dateA.getHours()===dateB.getHours();case"x_day":case"day":return dateA.getFullYear()===dateB.getFullYear()&&dateA.getMonth()===dateB.getMonth()&&dateA.getDate()===dateB.getDate();case"x_week":case"week":return dateA.getFullYear()===dateB.getFullYear()&&this.getWeekNumber(dateA)===this.getWeekNumber(dateB);case"x_month":case"month":return dateA.getFullYear()===dateB.getFullYear()&&dateA.getMonth()===dateB.getMonth();default:return!1;}},/**\n   * Returns wether or not dateA is less than or equal to dateB. This function is subdomain aware.\n   * Performs automatic conversion of values.\n   * @param dateA may be a number or a Date\n   * @param dateB may be a number or a Date\n   * @returns {boolean}\n   */dateIsLessThan:function dateIsLessThan(dateA,dateB){\'use strict\';if(!(dateA instanceof Date)){dateA=new Date(dateA)}if(!(dateB instanceof Date)){dateB=new Date(dateB)}function normalizedMillis(date,subdomain){switch(subdomain){case"x_min":case"min":return new Date(date.getFullYear(),date.getMonth(),date.getDate(),date.getHours(),date.getMinutes()).getTime();case"x_hour":case"hour":return new Date(date.getFullYear(),date.getMonth(),date.getDate(),date.getHours()).getTime();case"x_day":case"day":return new Date(date.getFullYear(),date.getMonth(),date.getDate()).getTime();case"x_week":case"week":case"x_month":case"month":return new Date(date.getFullYear(),date.getMonth()).getTime();default:return date.getTime();}}return normalizedMillis(dateA,this.options.subDomain)<normalizedMillis(dateB,this.options.subDomain)},// =========================================================================//\n// DATE COMPUTATION                              //\n// =========================================================================//\n/**\n   * Return the day of the year for the date\n   * @param  Date\n   * @return  int Day of the year [1,366]\n   */getDayOfYear:d3.time.format("%j"),/**\n   * Return the week number of the year\n   * Monday as the first day of the week\n   * @return int  Week number [0-53]\n   */getWeekNumber:function getWeekNumber(d){\'use strict\';var f=!0===this.options.weekStartOnMonday?d3.time.format("%W"):d3.time.format("%U");return f(d)},/**\n   * Return the week number, relative to its month\n   *\n   * @param  int|Date d Date or timestamp in milliseconds\n   * @return int Week number, relative to the month [0-5]\n   */getMonthWeekNumber:function getMonthWeekNumber(d){\'use strict\';if("number"==typeof d){d=new Date(d)}var monthFirstWeekNumber=this.getWeekNumber(new Date(d.getFullYear(),d.getMonth()));return this.getWeekNumber(d)-monthFirstWeekNumber-1},/**\n   * Return the number of weeks in the dates\' year\n   *\n   * @param  int|Date d Date or timestamp in milliseconds\n   * @return int Number of weeks in the date\'s year\n   */getWeekNumberInYear:function getWeekNumberInYear(d){\'use strict\';if("number"==typeof d){d=new Date(d)}},/**\n   * Return the number of days in the date\'s month\n   *\n   * @param  int|Date d Date or timestamp in milliseconds\n   * @return int Number of days in the date\'s month\n   */getDayCountInMonth:function getDayCountInMonth(d){\'use strict\';return this.getEndOfMonth(d).getDate()},/**\n   * Return the number of days in the date\'s year\n   *\n   * @param  int|Date d Date or timestamp in milliseconds\n   * @return int Number of days in the date\'s year\n   */getDayCountInYear:function getDayCountInYear(d){\'use strict\';if("number"==typeof d){d=new Date(d)}return 1===new Date(d.getFullYear(),1,29).getMonth()?366:365},/**\n   * Get the weekday from a date\n   *\n   * Return the week day number (0-6) of a date,\n   * depending on whether the week start on monday or sunday\n   *\n   * @param  Date d\n   * @return int The week day number (0-6)\n   */getWeekDay:function getWeekDay(d){\'use strict\';if(!1===this.options.weekStartOnMonday){return d.getDay()}return 0===d.getDay()?6:d.getDay()-1},/**\n   * Get the last day of the month\n   * @param  Date|int  d  Date or timestamp in milliseconds\n   * @return Date      Last day of the month\n   */getEndOfMonth:function getEndOfMonth(d){\'use strict\';if("number"==typeof d){d=new Date(d)}return new Date(d.getFullYear(),d.getMonth()+1,0)},/**\n   *\n   * @param  Date date\n   * @param  int count\n   * @param  string step\n   * @return Date\n   */jumpDate:function jumpDate(date,count,step){\'use strict\';var d=new Date(date);switch(step){case"hour":d.setHours(d.getHours()+count);break;case"day":d.setHours(d.getHours()+24*count);break;case"week":d.setHours(d.getHours()+7*(24*count));break;case"month":d.setMonth(d.getMonth()+count);break;case"year":d.setFullYear(d.getFullYear()+count);}return new Date(d)},// =========================================================================//\n// DOMAIN COMPUTATION                            //\n// =========================================================================//\n/**\n   * Return all the minutes between 2 dates\n   *\n   * @param  Date  d  date  A date\n   * @param  int|date  range  Number of minutes in the range, or a stop date\n   * @return array  An array of minutes\n   */getMinuteDomain:function getMinuteDomain(d,range){\'use strict\';var start=new Date(d.getFullYear(),d.getMonth(),d.getDate(),d.getHours()),stop=null;if(range instanceof Date){stop=new Date(range.getFullYear(),range.getMonth(),range.getDate(),range.getHours())}else{stop=new Date(+start+60*(1e3*range))}return d3.time.minutes(Math.min(start,stop),Math.max(start,stop))},/**\n   * Return all the hours between 2 dates\n   *\n   * @param  Date  d  A date\n   * @param  int|date  range  Number of hours in the range, or a stop date\n   * @return array  An array of hours\n   */getHourDomain:function getHourDomain(d,range){\'use strict\';var start=new Date(d.getFullYear(),d.getMonth(),d.getDate(),d.getHours()),stop=null;if(range instanceof Date){stop=new Date(range.getFullYear(),range.getMonth(),range.getDate(),range.getHours())}else{stop=new Date(start);stop.setHours(stop.getHours()+range)}var domains=d3.time.hours(Math.min(start,stop),Math.max(start,stop)),i=0,total=domains.length;// Passing from DST to standard time\n// If there are 25 hours, let\'s compress the duplicate hours\nfor(i=0;i<total;i++){if(0<i&&domains[i].getHours()===domains[i-1].getHours()){this.DSTDomain.push(domains[i].getTime());domains.splice(i,1);break}}// d3.time.hours is returning more hours than needed when changing\n// from DST to standard time, because there is really 2 hours between\n// 1am and 2am!\nif("number"==typeof range&&domains.length>Math.abs(range)){domains.splice(domains.length-1,1)}return domains},/**\n   * Return all the days between 2 dates\n   *\n   * @param  Date    d    A date\n   * @param  int|date  range  Number of days in the range, or a stop date\n   * @return array  An array of weeks\n   */getDayDomain:function getDayDomain(d,range){\'use strict\';var start=new Date(d.getFullYear(),d.getMonth(),d.getDate()),stop=null;if(range instanceof Date){stop=new Date(range.getFullYear(),range.getMonth(),range.getDate())}else{stop=new Date(start);stop=new Date(stop.setDate(stop.getDate()+parseInt(range,10)))}return d3.time.days(Math.min(start,stop),Math.max(start,stop))},/**\n   * Return all the weeks between 2 dates\n   *\n   * @param  Date  d  A date\n   * @param  int|date  range  Number of minutes in the range, or a stop date\n   * @return array  An array of weeks\n   */getWeekDomain:function getWeekDomain(d,range){\'use strict\';var weekStart;if(!1===this.options.weekStartOnMonday){weekStart=new Date(d.getFullYear(),d.getMonth(),d.getDate()-d.getDay())}else{if(1===d.getDay()){weekStart=new Date(d.getFullYear(),d.getMonth(),d.getDate())}else if(0===d.getDay()){weekStart=new Date(d.getFullYear(),d.getMonth(),d.getDate());weekStart.setDate(weekStart.getDate()-6)}else{weekStart=new Date(d.getFullYear(),d.getMonth(),d.getDate()-d.getDay()+1)}}var endDate=new Date(weekStart),stop=range;if("object"!=typeof range){stop=new Date(endDate.setDate(endDate.getDate()+7*range))}return!0===this.options.weekStartOnMonday?d3.time.mondays(Math.min(weekStart,stop),Math.max(weekStart,stop)):d3.time.sundays(Math.min(weekStart,stop),Math.max(weekStart,stop))},/**\n   * Return all the months between 2 dates\n   *\n   * @param  Date    d    A date\n   * @param  int|date  range  Number of months in the range, or a stop date\n   * @return array  An array of months\n   */getMonthDomain:function getMonthDomain(d,range){\'use strict\';var start=new Date(d.getFullYear(),d.getMonth()),stop=null;if(range instanceof Date){stop=new Date(range.getFullYear(),range.getMonth())}else{stop=new Date(start);stop=stop.setMonth(stop.getMonth()+range)}return d3.time.months(Math.min(start,stop),Math.max(start,stop))},/**\n   * Return all the years between 2 dates\n   *\n   * @param  Date  d  date  A date\n   * @param  int|date  range  Number of minutes in the range, or a stop date\n   * @return array  An array of hours\n   */getYearDomain:function getYearDomain(d,range){\'use strict\';var start=new Date(d.getFullYear(),0),stop=null;if(range instanceof Date){stop=new Date(range.getFullYear(),0)}else{stop=new Date(d.getFullYear()+range,0)}return d3.time.years(Math.min(start,stop),Math.max(start,stop))},/**\n   * Get an array of domain start dates\n   *\n   * @param  int|Date date A random date included in the wanted domain\n   * @param  int|Date range Number of dates to get, or a stop date\n   * @return Array of dates\n   */getDomain:function getDomain(date,range){\'use strict\';if("number"==typeof date){date=new Date(date)}if(2>arguments.length){range=this.options.range}switch(this.options.domain){case"hour":var domains=this.getHourDomain(date,range);// Case where an hour is missing, when passing from standard time to DST\n// Missing hour is perfectly acceptabl in subDomain, but not in domains\nif("number"==typeof range&&domains.length<range){if(0<range){domains.push(this.getHourDomain(domains[domains.length-1],2)[1])}else{domains.shift(this.getHourDomain(domains[0],-2)[0])}}return domains;case"day":return this.getDayDomain(date,range);case"week":return this.getWeekDomain(date,range);case"month":return this.getMonthDomain(date,range);case"year":return this.getYearDomain(date,range);}},/* jshint maxcomplexity: false */getSubDomain:function getSubDomain(date){\'use strict\';if("number"==typeof date){date=new Date(date)}var parent=this,computeDaySubDomainSize=function(date,domain){switch(domain){case"year":return parent.getDayCountInYear(date);case"month":return parent.getDayCountInMonth(date);case"week":return 7;}},computeMinSubDomainSize=function(date,domain){switch(domain){case"hour":return 60;case"day":return 1440;case"week":return 10080;}},computeHourSubDomainSize=function(date,domain){switch(domain){case"day":return 24;case"week":return 168;case"month":return 24*parent.getDayCountInMonth(date);}},computeWeekSubDomainSize=function(date,domain){if("month"===domain){var endOfMonth=new Date(date.getFullYear(),date.getMonth()+1,0),endWeekNb=parent.getWeekNumber(endOfMonth),startWeekNb=parent.getWeekNumber(new Date(date.getFullYear(),date.getMonth()));if(startWeekNb>endWeekNb){startWeekNb=0;endWeekNb++}return endWeekNb-startWeekNb+1}else if("year"===domain){return parent.getWeekNumber(new Date(date.getFullYear(),11,31))}};/**\n     * @return int\n     */switch(this.options.subDomain){case"x_min":case"min":return this.getMinuteDomain(date,computeMinSubDomainSize(date,this.options.domain));case"x_hour":case"hour":return this.getHourDomain(date,computeHourSubDomainSize(date,this.options.domain));case"x_day":case"day":return this.getDayDomain(date,computeDaySubDomainSize(date,this.options.domain));case"x_week":case"week":return this.getWeekDomain(date,computeWeekSubDomainSize(date,this.options.domain));case"x_month":case"month":return this.getMonthDomain(date,12);}},/**\n   * Get the n-th next domain after the calendar newest (rightmost) domain\n   * @param  int n\n   * @return Date The start date of the wanted domain\n   */getNextDomain:function getNextDomain(n){\'use strict\';if(0===arguments.length){n=1}return this.getDomain(this.jumpDate(this.getDomainKeys().pop(),n,this.options.domain),1)[0]},/**\n   * Get the n-th domain before the calendar oldest (leftmost) domain\n   * @param  int n\n   * @return Date The start date of the wanted domain\n   */getPreviousDomain:function getPreviousDomain(n){\'use strict\';if(0===arguments.length){n=1}return this.getDomain(this.jumpDate(this.getDomainKeys().shift(),-n,this.options.domain),1)[0]},// =========================================================================//\n// DATAS                                  //\n// =========================================================================//\n/**\n   * Fetch and interpret data from the datasource\n   *\n   * @param string|object source\n   * @param Date startDate\n   * @param Date endDate\n   * @param function callback\n   * @param function|boolean afterLoad function used to convert the data into a json object. Use true to use the afterLoad callback\n   * @param updateMode\n   *\n   * @return mixed\n   * - True if there are no data to load\n   * - False if data are loaded asynchronously\n   */getDatas:function getDatas(source,startDate,endDate,callback,afterLoad,updateMode){\'use strict\';var self=this;if(5>arguments.length){afterLoad=!0}if(6>arguments.length){updateMode=this.APPEND_ON_UPDATE}var _callback=function(error,data){if(!1!==afterLoad){if("function"==typeof afterLoad){data=afterLoad(data)}else if("function"==typeof self.options.afterLoadData){data=self.options.afterLoadData(data)}else{console.log("Provided callback for afterLoadData is not a function.")}}else if("csv"===self.options.dataType||"tsv"===self.options.dataType){data=this.interpretCSV(data)}self.parseDatas(data,updateMode,startDate,endDate);if("function"==typeof callback){callback()}};switch(typeof source){case"string":if(""===source){_callback(null,{});return!0}else{var url=this.parseURI(source,startDate,endDate),requestType="GET";if(null!==self.options.dataPostPayload){requestType="POST"}var payload=null;if(null!==self.options.dataPostPayload){payload=this.parseURI(self.options.dataPostPayload,startDate,endDate)}var xhr=null;switch(this.options.dataType){case"json":xhr=d3.json(url);break;case"csv":xhr=d3.csv(url);break;case"tsv":xhr=d3.tsv(url);break;case"txt":xhr=d3.text(url,"text/plain");break;}// jshint maxdepth:5\nif(null!==self.options.dataRequestHeaders){for(var header in self.options.dataRequestHeaders){if(self.options.dataRequestHeaders.hasOwnProperty(header)){xhr.header(header,self.options.dataRequestHeaders[header])}}}xhr.send(requestType,payload,_callback)}return!1;case"object":if(source===Object(source)){_callback(null,source);return!1}/* falls through */default:_callback(null,{});return!0;}},/**\n   * Populate the calendar internal data\n   *\n   * @param object data\n   * @param constant updateMode\n   * @param Date startDate\n   * @param Date endDate\n   *\n   * @return void\n   */parseDatas:function parseDatas(data,updateMode,startDate,endDate){\'use strict\';if(updateMode===this.RESET_ALL_ON_UPDATE){this._domains.forEach(function(key,value){value.forEach(function(element,index,array){array[index].v=null})})}var temp={},extractTime=function(d){return d.t};/*jshint forin:false */for(var d in data){var date=new Date(1e3*d),domainUnit=this.getDomain(date)[0].getTime();// The current data belongs to a domain that was compressed\n// Compress the data for the two duplicate hours into the same hour\nif(0<=this.DSTDomain.indexOf(domainUnit)){// Re-assign all data to the first or the second duplicate hours\n// depending on which is visible\nif(this._domains.has(domainUnit-3600000)){domainUnit-=3600000}}// Skip if data is not relevant to current domain\nif(isNaN(d)||!data.hasOwnProperty(d)||!this._domains.has(domainUnit)||!(domainUnit>=+startDate&&domainUnit<+endDate)){continue}var subDomainsData=this._domains.get(domainUnit);if(!temp.hasOwnProperty(domainUnit)){temp[domainUnit]=subDomainsData.map(extractTime)}var index=temp[domainUnit].indexOf(this._domainType[this.options.subDomain].extractUnit(date));if(updateMode===this.RESET_SINGLE_ON_UPDATE){subDomainsData[index].v=data[d]}else{if(!isNaN(subDomainsData[index].v)){subDomainsData[index].v+=data[d]}else{subDomainsData[index].v=data[d]}}}},parseURI:function parseURI(str,startDate,endDate){\'use strict\';// Use a timestamp in seconds\nstr=str.replace(/\\{\\{t:start\\}\\}/g,startDate.getTime()/1e3);str=str.replace(/\\{\\{t:end\\}\\}/g,endDate.getTime()/1e3);// Use a string date, following the ISO-8601\nstr=str.replace(/\\{\\{d:start\\}\\}/g,startDate.toISOString());str=str.replace(/\\{\\{d:end\\}\\}/g,endDate.toISOString());return str},interpretCSV:function interpretCSV(data){\'use strict\';var d={},keys=Object.keys(data[0]),i,total;for(i=0,total=data.length;i<total;i++){d[data[i][keys[0]]]=+data[i][keys[1]]}return d},/**\n   * Handle the calendar layout and dimension\n   *\n   * Expand and shrink the container depending on its children dimension\n   * Also rearrange the children position depending on their dimension,\n   * and the legend position\n   *\n   * @return void\n   */resize:function resize(){\'use strict\';var parent=this,options=parent.options,legendWidth=options.displayLegend?parent.Legend.getDim("width")+options.legendMargin[1]+options.legendMargin[3]:0,legendHeight=options.displayLegend?parent.Legend.getDim("height")+options.legendMargin[0]+options.legendMargin[2]:0,graphWidth=parent.graphDim.width-options.domainGutter-options.cellPadding,graphHeight=parent.graphDim.height-options.domainGutter-options.cellPadding;this.root.transition().duration(options.animationDuration).attr("width",function(){if("middle"===options.legendVerticalPosition||"center"===options.legendVerticalPosition){return graphWidth+legendWidth}return Math.max(graphWidth,legendWidth)}).attr("height",function(){if("middle"===options.legendVerticalPosition||"center"===options.legendVerticalPosition){return Math.max(graphHeight,legendHeight)}return graphHeight+legendHeight});this.root.select(".graph").transition().duration(options.animationDuration).attr("y",function(){if("top"===options.legendVerticalPosition){return legendHeight}return 0}).attr("x",function(){if(("middle"===options.legendVerticalPosition||"center"===options.legendVerticalPosition)&&"left"===options.legendHorizontalPosition){return legendWidth}return 0})},// =========================================================================//\n// PUBLIC API                                //\n// =========================================================================//\n/**\n   * Shift the calendar forward\n   */next:function next(n){\'use strict\';if(0===arguments.length){n=1}return this.loadNextDomain(n)},/**\n   * Shift the calendar backward\n   */previous:function previous(n){\'use strict\';if(0===arguments.length){n=1}return this.loadPreviousDomain(n)},/**\n   * Jump directly to a specific date\n   *\n   * JumpTo will scroll the calendar until the wanted domain with the specified\n   * date is visible. Unless you set reset to true, the wanted domain\n   * will not necessarily be the first (leftmost) domain of the calendar.\n   *\n   * @param Date date Jump to the domain containing that date\n   * @param bool reset Whether the wanted domain should be the first domain of the calendar\n   * @param bool True of the calendar was scrolled\n   */jumpTo:function jumpTo(date,reset){\'use strict\';if(2>arguments.length){reset=!1}var domains=this.getDomainKeys(),firstDomain=domains[0],lastDomain=domains[domains.length-1];if(date<firstDomain){return this.loadPreviousDomain(this.getDomain(firstDomain,date).length)}else{if(reset){return this.loadNextDomain(this.getDomain(firstDomain,date).length)}if(date>lastDomain){return this.loadNextDomain(this.getDomain(lastDomain,date).length)}}return!1},/**\n   * Navigate back to the start date\n   *\n   * @since  3.3.8\n   * @return void\n   */rewind:function rewind(){\'use strict\';this.jumpTo(this.options.start,!0)},/**\n   * Update the calendar with new data\n   *\n   * @param  object|string    dataSource    The calendar\'s datasource, same type as this.options.data\n   * @param  boolean|function    afterLoad    Whether to execute afterLoad() on the data. Pass directly a function\n   * if you don\'t want to use the afterLoad() callback\n   */update:function update(dataSource,afterLoad,updateMode){\'use strict\';if(0===arguments.length){dataSource=this.options.data}if(2>arguments.length){afterLoad=!0}if(3>arguments.length){updateMode=this.RESET_ALL_ON_UPDATE}var domains=this.getDomainKeys(),self=this;this.getDatas(dataSource,new Date(domains[0]),this.getSubDomain(domains[domains.length-1]).pop(),function(){self.fill();self.afterUpdate()},afterLoad,updateMode)},/**\n   * Set the legend\n   *\n   * @param array legend an array of integer, representing the different threshold value\n   * @param array colorRange an array of 2 hex colors, for the minimum and maximum colors\n   */setLegend:function setLegend(){\'use strict\';var oldLegend=this.options.legend.slice(0);if(1<=arguments.length&&Array.isArray(arguments[0])){this.options.legend=arguments[0]}if(2<=arguments.length){if(Array.isArray(arguments[1])&&2<=arguments[1].length){this.options.legendColors=[arguments[1][0],arguments[1][1]]}else{this.options.legendColors=arguments[1]}}if(0<arguments.length&&!arrayEquals(oldLegend,this.options.legend)||2<=arguments.length){this.Legend.buildColors();this.fill()}this.Legend.redraw(this.graphDim.width-this.options.domainGutter-this.options.cellPadding)},/**\n   * Remove the legend\n   *\n   * @return bool False if there is no legend to remove\n   */removeLegend:function removeLegend(){\'use strict\';if(!this.options.displayLegend){return!1}this.options.displayLegend=!1;this.Legend.remove();return!0},/**\n   * Display the legend\n   *\n   * @return bool False if the legend was already displayed\n   */showLegend:function showLegend(){\'use strict\';if(this.options.displayLegend){return!1}this.options.displayLegend=!0;this.Legend.redraw(this.graphDim.width-this.options.domainGutter-this.options.cellPadding);return!0},/**\n   * Highlight dates\n   *\n   * Add a highlight class to a set of dates\n   *\n   * @since  3.3.5\n   * @param  array Array of dates to highlight\n   * @return bool True if dates were highlighted\n   */highlight:function highlight(args){\'use strict\';if(0<(this.options.highlight=this.expandDateSetting(args)).length){this.fill();return!0}return!1},/**\n   * Destroy the calendar\n   *\n   * Usage: cal = cal.destroy();\n   *\n   * @since  3.3.6\n   * @param function A callback function to trigger after destroying the calendar\n   * @return null\n   */destroy:function destroy(callback){\'use strict\';this.root.transition().duration(this.options.animationDuration).attr("width",0).attr("height",0).remove().each("end",function(){if("function"==typeof callback){callback()}else if("undefined"!=typeof callback){console.log("Provided callback for destroy() is not a function.")}});return null},getSVG:function getSVG(){\'use strict\';for(var styles={".cal-heatmap-container":{},".graph":{},".graph-rect":{},"rect.highlight":{},"rect.now":{},"rect.highlight-now":{},"text.highlight":{},"text.now":{},"text.highlight-now":{},".domain-background":{},".graph-label":{},".subdomain-text":{},".q0":{},".qi":{}},j=1,total=this.options.legend.length+1;j<=total;j++){styles[".q"+j]={}}var root=this.root,whitelistStyles=[// SVG specific properties\n"stroke","stroke-width","stroke-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-miterlimit","fill","fill-opacity","fill-rule","marker","marker-start","marker-mid","marker-end","alignement-baseline","baseline-shift","dominant-baseline","glyph-orientation-horizontal","glyph-orientation-vertical","kerning","text-anchor","shape-rendering",// Text Specific properties\n"text-transform","font-family","font","font-size","font-weight"],filterStyles=function(attribute,property,value){if(-1!==whitelistStyles.indexOf(property)){styles[attribute][property]=value}},getElement=function(e){return root.select(e)[0][0]};/* jshint forin:false */for(var element in styles){if(!styles.hasOwnProperty(element)){continue}var dom=getElement(element);if(null===dom){continue}// The DOM Level 2 CSS way\n/* jshint maxdepth: false */if("getComputedStyle"in window){var cs=getComputedStyle(dom,null);if(0!==cs.length){for(var i=0;i<cs.length;i++){filterStyles(element,cs.item(i),cs.getPropertyValue(cs.item(i)))}// Opera workaround. Opera doesn"t support `item`/`length`\n// on CSSStyleDeclaration.\n}else{for(var k in cs){if(cs.hasOwnProperty(k)){filterStyles(element,k,cs[k])}}}// The IE way\n}else if("currentStyle"in dom){var css=dom.currentStyle;for(var p in css){filterStyles(element,p,css[p])}}}var string="<svg xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\"><style type=\\"text/css\\"><![CDATA[ ";for(var style in styles){string+=style+" {\\n";for(var l in styles[style]){string+="\\t"+l+":"+styles[style][l]+";\\n"}string+="}\\n"}string+="]]></style>";string+=new XMLSerializer().serializeToString(this.root[0][0]);string+="</svg>";return string}};// =========================================================================//\n// DOMAIN POSITION COMPUTATION                        //\n// =========================================================================//\n/**\n * Compute the position of a domain, relative to the calendar\n */var DomainPosition=function(){\'use strict\';this.positions=d3.map()};DomainPosition.prototype.getPosition=function(d){\'use strict\';return this.positions.get(d)};DomainPosition.prototype.getPositionFromIndex=function(i){\'use strict\';var domains=this.getKeys();return this.positions.get(domains[i])};DomainPosition.prototype.getLast=function(){\'use strict\';var domains=this.getKeys();return this.positions.get(domains[domains.length-1])};DomainPosition.prototype.setPosition=function(d,dim){\'use strict\';this.positions.set(d,dim)};DomainPosition.prototype.shiftRightBy=function(exitingDomainDim){\'use strict\';this.positions.forEach(function(key,value){this.set(key,value-exitingDomainDim)});var domains=this.getKeys();this.positions.remove(domains[0])};DomainPosition.prototype.shiftLeftBy=function(enteringDomainDim){\'use strict\';this.positions.forEach(function(key,value){this.set(key,value+enteringDomainDim)});var domains=this.getKeys();this.positions.remove(domains[domains.length-1])};DomainPosition.prototype.getKeys=function(){\'use strict\';return this.positions.keys().sort(function(a,b){return parseInt(a,10)-parseInt(b,10)})};// =========================================================================//\n// LEGEND                                  //\n// =========================================================================//\nvar Legend=function(calendar){\'use strict\';this.calendar=calendar;this.computeDim();if(null!==calendar.options.legendColors){this.buildColors()}};Legend.prototype.computeDim=function(){\'use strict\';var options=this.calendar.options;// Shorter accessor for variable name mangling when minifying\nthis.dim={width:options.legendCellSize*(options.legend.length+1)+options.legendCellPadding*options.legend.length,height:options.legendCellSize}};Legend.prototype.remove=function(){\'use strict\';this.calendar.root.select(".graph-legend").remove();this.calendar.resize()};Legend.prototype.redraw=function(width){\'use strict\';if(!this.calendar.options.displayLegend){return!1}var parent=this,calendar=this.calendar,legend=calendar.root,legendItem,options=calendar.options;// Shorter accessor for variable name mangling when minifying\nthis.computeDim();var _legend=options.legend.slice(0);_legend.push(_legend[_legend.length-1]+1);var legendElement=calendar.root.select(".graph-legend");if(null!==legendElement[0][0]){legend=legendElement;legendItem=legend.select("g").selectAll("rect").data(_legend)}else{// Creating the new legend DOM if it doesn\'t already exist\nlegend="top"===options.legendVerticalPosition?legend.insert("svg",".graph"):legend.append("svg");legend.attr("x",getLegendXPosition()).attr("y",getLegendYPosition());legendItem=legend.attr("class","graph-legend").attr("height",parent.getDim("height")).attr("width",parent.getDim("width")).append("g").selectAll().data(_legend)}legendItem.enter().append("rect").call(legendCellLayout).attr("class",function(d){return calendar.Legend.getClass(d,null===calendar.legendScale)}).attr("fill-opacity",0).call(function(selection){if(null!==calendar.legendScale&&null!==options.legendColors&&options.legendColors.hasOwnProperty("base")){selection.attr("fill",options.legendColors.base)}}).append("title");legendItem.exit().transition().duration(options.animationDuration).attr("fill-opacity",0).remove();legendItem.transition().delay(function(d,i){return options.animationDuration*i/10}).call(legendCellLayout).attr("fill-opacity",1).call(function(element){element.attr("fill",function(d,i){if(null===calendar.legendScale){return""}if(0===i){return calendar.legendScale(d-1)}return calendar.legendScale(options.legend[i-1])});element.attr("class",function(d){return calendar.Legend.getClass(d,null===calendar.legendScale)})});function legendCellLayout(selection){selection.attr("width",options.legendCellSize).attr("height",options.legendCellSize).attr("rx",options.legendCellRadius).attr("ry",options.legendCellRadius).attr("x",function(d,i){return i*(options.legendCellSize+options.legendCellPadding)})}legendItem.select("title").text(function(d,i){if(0===i){return calendar.formatStringWithObject(options.legendTitleFormat.lower,{min:options.legend[i],name:options.itemName[1]})}else if(i===_legend.length-1){return calendar.formatStringWithObject(options.legendTitleFormat.upper,{max:options.legend[i-1],name:options.itemName[1]})}else{return calendar.formatStringWithObject(options.legendTitleFormat.inner,{down:options.legend[i-1],up:options.legend[i],name:options.itemName[1]})}});legendItem.on("mouseover",function(d){calendar.legendTip.show(d,this)}).on("mouseout",function(){calendar.legendTip.hide()});legend.transition().duration(options.animationDuration).attr("x",getLegendXPosition()).attr("y",getLegendYPosition()).attr("width",parent.getDim("width")).attr("height",parent.getDim("height"));legend.select("g").transition().duration(options.animationDuration).attr("transform",function(){if("vertical"===options.legendOrientation){return"rotate(90 "+options.legendCellSize/2+" "+options.legendCellSize/2+")"}return""});function getLegendXPosition(){switch(options.legendHorizontalPosition){case"right":if("center"===options.legendVerticalPosition||"middle"===options.legendVerticalPosition){return width+options.legendMargin[3]}return width-parent.getDim("width")-options.legendMargin[1];case"middle":case"center":return Math.round(width/2-parent.getDim("width")/2);default:return options.legendMargin[3];}}function getLegendYPosition(){if("bottom"===options.legendVerticalPosition){return calendar.graphDim.height+options.legendMargin[0]-options.domainGutter-options.cellPadding}return options.legendMargin[0]}calendar.resize()};/**\n * Return the dimension of the legend\n *\n * Takes into account rotation\n *\n * @param  string axis Width or height\n * @return int height or width in pixels\n */Legend.prototype.getDim=function(axis){\'use strict\';var isHorizontal="horizontal"===this.calendar.options.legendOrientation;switch(axis){case"width":return this.dim[isHorizontal?"width":"height"];case"height":return this.dim[isHorizontal?"height":"width"];}};Legend.prototype.buildColors=function(){\'use strict\';var options=this.calendar.options;// Shorter accessor for variable name mangling when minifying\nif(null===options.legendColors){this.calendar.legendScale=null;return!1}var _colorRange=[];if(Array.isArray(options.legendColors)){_colorRange=options.legendColors}else if(options.legendColors.hasOwnProperty("min")&&options.legendColors.hasOwnProperty("max")){_colorRange=[options.legendColors.min,options.legendColors.max]}else{options.legendColors=null;return!1}var _legend=options.legend.slice(0);if(0<_legend[0]){_legend.unshift(0)}else if(0>=_legend[0]){// Let\'s guess the leftmost value, it we have to add one\n_legend.unshift(_legend[0]-(_legend[_legend.length-1]-_legend[0])/_legend.length)}var colorScale;if(options.legendColors.hasOwnProperty("colorScale")){colorScale=options.legendColors.colorScale}else{colorScale=d3.scale.linear().range(_colorRange).interpolate(d3.interpolateHcl).domain([d3.min(_legend),d3.max(_legend)])}var legendColors=_legend.map(function(element){return colorScale(element)});this.calendar.legendScale=d3.scale.threshold().domain(options.legend).range(legendColors);return!0};/**\n * Return the classname on the legend for the specified value\n *\n * @param integer n Value associated to a date\n * @param bool withCssClass Whether to display the css class used to style the cell.\n *                          Disabling will allow styling directly via html fill attribute\n *\n * @return string Classname according to the legend\n */Legend.prototype.getClass=function(n,withCssClass){\'use strict\';if(null===n||isNaN(n)){return""}for(var index=[this.calendar.options.legend.length+1],i=0,total=this.calendar.options.legend.length-1;i<=total;i++){if(0<this.calendar.options.legend[0]&&0>n){index=["1","i"];break}if(n<=this.calendar.options.legend[i]){index=[i+1];break}}if(0===n){index.push(0)}index.unshift("");return(index.join(" r")+(withCssClass?index.join(" q"):"")).trim()};/**\n * #source http://stackoverflow.com/a/383245/805649\n */function mergeRecursive(obj1,obj2){\'use strict\';/*jshint forin:false */for(var p in obj2){try{// Property in destination object set; update its value.\nif(obj2[p].constructor===Object){obj1[p]=mergeRecursive(obj1[p],obj2[p])}else{obj1[p]=obj2[p]}}catch(e){// Property in destination object not set; create it and set its value.\nobj1[p]=obj2[p]}}return obj1}/**\n * Check if 2 arrays are equals\n *\n * @link http://stackoverflow.com/a/14853974/805649\n * @param  array array the array to compare to\n * @return bool true of the 2 arrays are equals\n */function arrayEquals(arrayA,arrayB){\'use strict\';// if the other array is a falsy value, return\nif(!arrayB||!arrayA){return!1}// compare lengths - can save a lot of time\nif(arrayA.length!==arrayB.length){return!1}for(var i=0;i<arrayA.length;i++){// Check if we have nested arrays\nif(arrayA[i]instanceof Array&&arrayB[i]instanceof Array){// recurse into the nested arrays\nif(!arrayEquals(arrayA[i],arrayB[i])){return!1}}else if(arrayA[i]!==arrayB[i]){// Warning - two different object instances will never be equal: {x:20} != {x:20}\nreturn!1}}return!0}/* harmony default export */ var cal_heatmap = (CalHeatMap);\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/legacy-plugin-chart-calendar/src/vendor/cal-heatmap.css\nvar vendor_cal_heatmap = __webpack_require__(1676);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/legacy-plugin-chart-calendar/src/Calendar.js\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * "License"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */function convertUTC(dttm){return new Date(dttm.getUTCFullYear(),dttm.getUTCMonth(),dttm.getUTCDate(),dttm.getUTCHours(),dttm.getUTCMinutes(),dttm.getUTCSeconds())}const convertUTCTS=uts=>convertUTC(new Date(uts)).getTime(),propTypes={data:prop_types_default.a.shape({// Object hashed by metric name,\n// then hashed by timestamp (in seconds, not milliseconds) as float\n// the innermost value is count\n// e.g. { count_distinct_something: { 1535034236.0: 3 } }\ndata:prop_types_default.a.object,domain:prop_types_default.a.string,range:prop_types_default.a.number,// timestamp in milliseconds\nstart:prop_types_default.a.number,subdomain:prop_types_default.a.string}),height:prop_types_default.a.number,// eslint-disable-next-line react/sort-prop-types\ncellPadding:prop_types_default.a.number,// eslint-disable-next-line react/sort-prop-types\ncellRadius:prop_types_default.a.number,// eslint-disable-next-line react/sort-prop-types\ncellSize:prop_types_default.a.number,linearColorScheme:prop_types_default.a.string,showLegend:prop_types_default.a.bool,showMetricName:prop_types_default.a.bool,showValues:prop_types_default.a.bool,steps:prop_types_default.a.number,timeFormat:prop_types_default.a.string,valueFormat:prop_types_default.a.string,verboseMap:prop_types_default.a.object};function Calendar(element,props){const{data,height,cellPadding=3,cellRadius=0,cellSize=10,domainGranularity,linearColorScheme,showLegend,showMetricName,showValues,steps,subdomainGranularity,timeFormat,valueFormat,verboseMap}=props,valueFormatter=Object(NumberFormatterRegistrySingleton["c" /* getNumberFormatter */])(valueFormat),timeFormatter=Object(TimeFormatterRegistrySingleton["d" /* getTimeFormatter */])(timeFormat),container=Object(src_select["a" /* default */])(element).classed("superset-legacy-chart-calendar",!0).style("height",height);container.selectAll("*").remove();const div=container.append("div"),subDomainTextFormat=showValues?(date,value)=>valueFormatter(value):null,metricsData={};Object.keys(data.data).forEach(metric=>{metricsData[metric]={};Object.keys(data.data[metric]).forEach(ts=>{metricsData[metric][convertUTCTS(1e3*ts)/1e3]=data.data[metric][ts]})});Object.keys(metricsData).forEach(metric=>{const calContainer=div.append("div");if(showMetricName){calContainer.text("Metric: ".concat(verboseMap[metric]||metric))}const timestamps=metricsData[metric],extents=Object(extent["a" /* default */])(Object.keys(timestamps),key=>timestamps[key]),step=(extents[1]-extents[0])/(steps-1),colorScale=Object(SequentialSchemeRegistrySingleton["a" /* default */])().get(linearColorScheme).createLinearScale(extents),legend=Object(range["a" /* default */])(steps).map(i=>extents[0]+step*i),legendColors=legend.map(x=>colorScale(x)),cal=new cal_heatmap;cal.init({start:convertUTCTS(data.start),data:timestamps,itemSelector:calContainer.node(),legendVerticalPosition:"top",cellSize,cellPadding,cellRadius,legendCellSize:cellSize,legendCellPadding:2,legendCellRadius:cellRadius,tooltip:!0,domain:domainGranularity,subDomain:subdomainGranularity,range:data.range,browsing:!0,legend,legendColors:{colorScale,min:legendColors[0],max:legendColors[legendColors.length-1],empty:"white"},displayLegend:showLegend,itemName:"",valueFormatter,timeFormatter,subDomainTextFormat})})}Calendar.displayName="Calendar";Calendar.propTypes=propTypes;/* harmony default export */ var src_Calendar = (Calendar);\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/legacy-plugin-chart-calendar/src/ReactCalendar.jsx\nfunction _templateObject(){const data=_taggedTemplateLiteral(["\\n  .superset-legacy-chart-calendar {\\n    padding: 10px;\\n    position: static !important;\\n    overflow: auto !important;\\n  }\\n\\n  .superset-legacy-chart-calendar .ch-tooltip {\\n    margin-left: 20px;\\n    margin-top: 5px;\\n  }\\n"]);_templateObject=function(){return data};return data}function _taggedTemplateLiteral(strings,raw){if(!raw){raw=strings.slice(0)}return Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}function _objectWithoutProperties(source,excluded){if(null==source)return{};var target=_objectWithoutPropertiesLoose(source,excluded),key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(0<=excluded.indexOf(key))continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var target={},sourceKeys=Object.keys(source),key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(0<=excluded.indexOf(key))continue;target[key]=source[key]}return target}/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * "License"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */const ReactComponent=Object(reactify["a" /* default */])(src_Calendar),Calender=(_ref)=>{let{className}=_ref,otherProps=_objectWithoutProperties(_ref,["className"]);return/*#__PURE__*/react_default.a.createElement("div",{className:className},/*#__PURE__*/react_default.a.createElement(ReactComponent,otherProps))};Calender.displayName="Calender";Calender.defaultProps={otherProps:{}};Calender.propTypes={className:prop_types_default.a.string.isRequired,otherProps:prop_types_default.a.objectOf(prop_types_default.a.any)};/* harmony default export */ var ReactCalendar = __webpack_exports__["default"] = (Object(src["a" /* default */])(Calender)(_templateObject()));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2304\n')}}]);