(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{2245:function(module,exports,__webpack_require__){eval("var api = __webpack_require__(350);\n            var content = __webpack_require__(2246);\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI0NS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMvZXJpa19yaXR0ZXIvcmVwb3MvZ2l0aHViLmNvbS9hcGFjaGUtc3VwZXJzZXQvc3VwZXJzZXQtdWkvcGx1Z2lucy9sZWdhY3ktcGx1Z2luLWNoYXJ0LWNhbGVuZGFyL3NyYy92ZW5kb3IvY2FsLWhlYXRtYXAuY3NzPzhmMjgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vcGFja2FnZXMvc3VwZXJzZXQtdWktZGVtby9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL3BhY2thZ2VzL3N1cGVyc2V0LXVpLWRlbW8vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi0xIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3Bvc3Rjc3MhLi9jYWwtaGVhdG1hcC5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2245\n")},2246:function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(351);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, "/* [LICENSE TBD] */\\n/* Cal-HeatMap CSS */\\n\\n.cal-heatmap-container {\\n  display: block;\\n}\\n\\n.cal-heatmap-container .graph-label {\\n  fill: #999;\\n  font-size: 10px;\\n}\\n\\n.cal-heatmap-container .graph,\\n.cal-heatmap-container .graph-legend rect {\\n  shape-rendering: crispedges;\\n}\\n\\n.cal-heatmap-container .graph-rect {\\n  fill: #ededed;\\n}\\n\\n.cal-heatmap-container .graph-subdomain-group rect:hover {\\n  stroke: #000;\\n  stroke-width: 1px;\\n}\\n\\n.cal-heatmap-container .subdomain-text {\\n  font-size: 8px;\\n  fill: #999;\\n  pointer-events: none;\\n}\\n\\n.cal-heatmap-container .hover_cursor:hover {\\n  cursor: pointer;\\n}\\n\\n.cal-heatmap-container .qi {\\n  background-color: #999;\\n  fill: #999;\\n}\\n\\n/*\\nRemove comment to apply this style to date with value equal to 0\\n.q0\\n{\\n  background-color: #fff;\\n  fill: #fff;\\n  stroke: #ededed\\n}\\n*/\\n\\n.cal-heatmap-container .q1 {\\n  background-color: #dae289;\\n  fill: #dae289;\\n}\\n\\n.cal-heatmap-container .q2 {\\n  background-color: #cedb9c;\\n  fill: #9cc069;\\n}\\n\\n.cal-heatmap-container .q3 {\\n  background-color: #b5cf6b;\\n  fill: #669d45;\\n}\\n\\n.cal-heatmap-container .q4 {\\n  background-color: #637939;\\n  fill: #637939;\\n}\\n\\n.cal-heatmap-container .q5 {\\n  background-color: #3b6427;\\n  fill: #3b6427;\\n}\\n\\n.cal-heatmap-container rect.highlight {\\n  stroke: #444;\\n  stroke-width: 1;\\n}\\n\\n.cal-heatmap-container text.highlight {\\n  fill: #444;\\n}\\n\\n.cal-heatmap-container rect.highlight-now {\\n  stroke: red;\\n}\\n\\n.cal-heatmap-container text.highlight-now {\\n  fill: red;\\n  font-weight: 800;\\n}\\n\\n.cal-heatmap-container .domain-background {\\n  fill: none;\\n  shape-rendering: crispedges;\\n}\\n\\n.ch-tooltip {\\n  padding: 10px;\\n  background: #222;\\n  color: #bbb;\\n  font-size: 12px;\\n  line-height: 1.4;\\n  width: 140px;\\n  position: absolute;\\n  z-index: 99999;\\n  text-align: center;\\n  border-radius: 2px;\\n  box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.2);\\n  display: none;\\n  box-sizing: border-box;\\n}\\n\\n.ch-tooltip::after {\\n  position: absolute;\\n  width: 0;\\n  height: 0;\\n  border-color: transparent;\\n  border-style: solid;\\n  content: \'\';\\n  padding: 0;\\n  display: block;\\n  bottom: -6px;\\n  left: 50%;\\n  margin-left: -6px;\\n  border-width: 6px 6px 0;\\n  border-top-color: #222;\\n}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI0Ni5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMvZXJpa19yaXR0ZXIvcmVwb3MvZ2l0aHViLmNvbS9hcGFjaGUtc3VwZXJzZXQvc3VwZXJzZXQtdWkvcGx1Z2lucy9sZWdhY3ktcGx1Z2luLWNoYXJ0LWNhbGVuZGFyL3NyYy92ZW5kb3IvY2FsLWhlYXRtYXAuY3NzP2UxMjEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9wYWNrYWdlcy9zdXBlcnNldC11aS1kZW1vL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyogW0xJQ0VOU0UgVEJEXSAqL1xcbi8qIENhbC1IZWF0TWFwIENTUyAqL1xcblxcbi5jYWwtaGVhdG1hcC1jb250YWluZXIge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi5jYWwtaGVhdG1hcC1jb250YWluZXIgLmdyYXBoLWxhYmVsIHtcXG4gIGZpbGw6ICM5OTk7XFxuICBmb250LXNpemU6IDEwcHg7XFxufVxcblxcbi5jYWwtaGVhdG1hcC1jb250YWluZXIgLmdyYXBoLFxcbi5jYWwtaGVhdG1hcC1jb250YWluZXIgLmdyYXBoLWxlZ2VuZCByZWN0IHtcXG4gIHNoYXBlLXJlbmRlcmluZzogY3Jpc3BlZGdlcztcXG59XFxuXFxuLmNhbC1oZWF0bWFwLWNvbnRhaW5lciAuZ3JhcGgtcmVjdCB7XFxuICBmaWxsOiAjZWRlZGVkO1xcbn1cXG5cXG4uY2FsLWhlYXRtYXAtY29udGFpbmVyIC5ncmFwaC1zdWJkb21haW4tZ3JvdXAgcmVjdDpob3ZlciB7XFxuICBzdHJva2U6ICMwMDA7XFxuICBzdHJva2Utd2lkdGg6IDFweDtcXG59XFxuXFxuLmNhbC1oZWF0bWFwLWNvbnRhaW5lciAuc3ViZG9tYWluLXRleHQge1xcbiAgZm9udC1zaXplOiA4cHg7XFxuICBmaWxsOiAjOTk5O1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcblxcbi5jYWwtaGVhdG1hcC1jb250YWluZXIgLmhvdmVyX2N1cnNvcjpob3ZlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5jYWwtaGVhdG1hcC1jb250YWluZXIgLnFpIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM5OTk7XFxuICBmaWxsOiAjOTk5O1xcbn1cXG5cXG4vKlxcblJlbW92ZSBjb21tZW50IHRvIGFwcGx5IHRoaXMgc3R5bGUgdG8gZGF0ZSB3aXRoIHZhbHVlIGVxdWFsIHRvIDBcXG4ucTBcXG57XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgZmlsbDogI2ZmZjtcXG4gIHN0cm9rZTogI2VkZWRlZFxcbn1cXG4qL1xcblxcbi5jYWwtaGVhdG1hcC1jb250YWluZXIgLnExIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkYWUyODk7XFxuICBmaWxsOiAjZGFlMjg5O1xcbn1cXG5cXG4uY2FsLWhlYXRtYXAtY29udGFpbmVyIC5xMiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2VkYjljO1xcbiAgZmlsbDogIzljYzA2OTtcXG59XFxuXFxuLmNhbC1oZWF0bWFwLWNvbnRhaW5lciAucTMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2I1Y2Y2YjtcXG4gIGZpbGw6ICM2NjlkNDU7XFxufVxcblxcbi5jYWwtaGVhdG1hcC1jb250YWluZXIgLnE0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM2Mzc5Mzk7XFxuICBmaWxsOiAjNjM3OTM5O1xcbn1cXG5cXG4uY2FsLWhlYXRtYXAtY29udGFpbmVyIC5xNSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2I2NDI3O1xcbiAgZmlsbDogIzNiNjQyNztcXG59XFxuXFxuLmNhbC1oZWF0bWFwLWNvbnRhaW5lciByZWN0LmhpZ2hsaWdodCB7XFxuICBzdHJva2U6ICM0NDQ7XFxuICBzdHJva2Utd2lkdGg6IDE7XFxufVxcblxcbi5jYWwtaGVhdG1hcC1jb250YWluZXIgdGV4dC5oaWdobGlnaHQge1xcbiAgZmlsbDogIzQ0NDtcXG59XFxuXFxuLmNhbC1oZWF0bWFwLWNvbnRhaW5lciByZWN0LmhpZ2hsaWdodC1ub3cge1xcbiAgc3Ryb2tlOiByZWQ7XFxufVxcblxcbi5jYWwtaGVhdG1hcC1jb250YWluZXIgdGV4dC5oaWdobGlnaHQtbm93IHtcXG4gIGZpbGw6IHJlZDtcXG4gIGZvbnQtd2VpZ2h0OiA4MDA7XFxufVxcblxcbi5jYWwtaGVhdG1hcC1jb250YWluZXIgLmRvbWFpbi1iYWNrZ3JvdW5kIHtcXG4gIGZpbGw6IG5vbmU7XFxuICBzaGFwZS1yZW5kZXJpbmc6IGNyaXNwZWRnZXM7XFxufVxcblxcbi5jaC10b29sdGlwIHtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBiYWNrZ3JvdW5kOiAjMjIyO1xcbiAgY29sb3I6ICNiYmI7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBsaW5lLWhlaWdodDogMS40O1xcbiAgd2lkdGg6IDE0MHB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgei1pbmRleDogOTk5OTk7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxuICBib3gtc2hhZG93OiAycHggMnB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMik7XFxuICBkaXNwbGF5OiBub25lO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLmNoLXRvb2x0aXA6OmFmdGVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAwO1xcbiAgaGVpZ2h0OiAwO1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICBjb250ZW50OiAnJztcXG4gIHBhZGRpbmc6IDA7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGJvdHRvbTogLTZweDtcXG4gIGxlZnQ6IDUwJTtcXG4gIG1hcmdpbi1sZWZ0OiAtNnB4O1xcbiAgYm9yZGVyLXdpZHRoOiA2cHggNnB4IDA7XFxuICBib3JkZXItdG9wLWNvbG9yOiAjMjIyO1xcbn1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2246\n')},2247:function(module,exports,__webpack_require__){eval("var api = __webpack_require__(350);\n            var content = __webpack_require__(2248);\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI0Ny5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMvZXJpa19yaXR0ZXIvcmVwb3MvZ2l0aHViLmNvbS9hcGFjaGUtc3VwZXJzZXQvc3VwZXJzZXQtdWkvcGx1Z2lucy9sZWdhY3ktcGx1Z2luLWNoYXJ0LWNhbGVuZGFyL3NyYy92ZW5kb3IvZDN0aXAuY3NzPzY0Y2MiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vcGFja2FnZXMvc3VwZXJzZXQtdWktZGVtby9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL3BhY2thZ2VzL3N1cGVyc2V0LXVpLWRlbW8vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi0xIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3Bvc3Rjc3MhLi9kM3RpcC5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2247\n")},2248:function(module,exports,__webpack_require__){eval("// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(351);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, \"/**\\n * Licensed to the Apache Software Foundation (ASF) under one\\n * or more contributor license agreements.  See the NOTICE file\\n * distributed with this work for additional information\\n * regarding copyright ownership.  The ASF licenses this file\\n * to you under the Apache License, Version 2.0 (the\\n * \\\"License\\\"); you may not use this file except in compliance\\n * with the License.  You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing,\\n * software distributed under the License is distributed on an\\n * \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n * KIND, either express or implied.  See the License for the\\n * specific language governing permissions and limitations\\n * under the License.\\n */\\n/* from d3-tip */\\n.d3-tip {\\n  line-height: 1;\\n  padding: 12px;\\n  background: rgba(0, 0, 0, 0.8);\\n  color: #fff;\\n  border-radius: 2px;\\n  pointer-events: none;\\n  z-index: 1000;\\n}\\n\\n/* Creates a small triangle extender for the tooltip */\\n.d3-tip:after {\\n  box-sizing: border-box;\\n  display: inline;\\n  font-size: 10px;\\n  width: 100%;\\n  line-height: 1;\\n  color: rgba(0, 0, 0, 0.8);\\n  position: absolute;\\n  pointer-events: none;\\n}\\n\\n/* Northward tooltips */\\n.d3-tip.n:after {\\n  content: '\\\\25BC';\\n  margin: -1px 0 0 0;\\n  top: 100%;\\n  left: 0;\\n  text-align: center;\\n}\\n\\n/* Eastward tooltips */\\n.d3-tip.e:after {\\n  content: '\\\\25C0';\\n  margin: -4px 0 0 0;\\n  top: 50%;\\n  left: -8px;\\n}\\n\\n/* Southward tooltips */\\n.d3-tip.s:after {\\n  content: '\\\\25B2';\\n  margin: 0 0 1px 0;\\n  top: -8px;\\n  left: 0;\\n  text-align: center;\\n}\\n\\n/* Westward tooltips */\\n.d3-tip.w:after {\\n  content: '\\\\25B6';\\n  margin: -4px 0 0 -1px;\\n  top: 50%;\\n  left: 100%;\\n}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI0OC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMvZXJpa19yaXR0ZXIvcmVwb3MvZ2l0aHViLmNvbS9hcGFjaGUtc3VwZXJzZXQvc3VwZXJzZXQtdWkvcGx1Z2lucy9sZWdhY3ktcGx1Z2luLWNoYXJ0LWNhbGVuZGFyL3NyYy92ZW5kb3IvZDN0aXAuY3NzPzU3ZDEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9wYWNrYWdlcy9zdXBlcnNldC11aS1kZW1vL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyoqXFxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXFxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcXG4gKiBcXFwiTGljZW5zZVxcXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXFxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxcbiAqXFxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcXG4gKlxcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxcbiAqIFxcXCJBUyBJU1xcXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cXG4gKi9cXG4vKiBmcm9tIGQzLXRpcCAqL1xcbi5kMy10aXAge1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxuICBwYWRkaW5nOiAxMnB4O1xcbiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjgpO1xcbiAgY29sb3I6ICNmZmY7XFxuICBib3JkZXItcmFkaXVzOiAycHg7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gIHotaW5kZXg6IDEwMDA7XFxufVxcblxcbi8qIENyZWF0ZXMgYSBzbWFsbCB0cmlhbmdsZSBleHRlbmRlciBmb3IgdGhlIHRvb2x0aXAgKi9cXG4uZDMtdGlwOmFmdGVyIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBkaXNwbGF5OiBpbmxpbmU7XFxuICBmb250LXNpemU6IDEwcHg7XFxuICB3aWR0aDogMTAwJTtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44KTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG5cXG4vKiBOb3J0aHdhcmQgdG9vbHRpcHMgKi9cXG4uZDMtdGlwLm46YWZ0ZXIge1xcbiAgY29udGVudDogJ1xcXFwyNUJDJztcXG4gIG1hcmdpbjogLTFweCAwIDAgMDtcXG4gIHRvcDogMTAwJTtcXG4gIGxlZnQ6IDA7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi8qIEVhc3R3YXJkIHRvb2x0aXBzICovXFxuLmQzLXRpcC5lOmFmdGVyIHtcXG4gIGNvbnRlbnQ6ICdcXFxcMjVDMCc7XFxuICBtYXJnaW46IC00cHggMCAwIDA7XFxuICB0b3A6IDUwJTtcXG4gIGxlZnQ6IC04cHg7XFxufVxcblxcbi8qIFNvdXRod2FyZCB0b29sdGlwcyAqL1xcbi5kMy10aXAuczphZnRlciB7XFxuICBjb250ZW50OiAnXFxcXDI1QjInO1xcbiAgbWFyZ2luOiAwIDAgMXB4IDA7XFxuICB0b3A6IC04cHg7XFxuICBsZWZ0OiAwO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4vKiBXZXN0d2FyZCB0b29sdGlwcyAqL1xcbi5kMy10aXAudzphZnRlciB7XFxuICBjb250ZW50OiAnXFxcXDI1QjYnO1xcbiAgbWFyZ2luOiAtNHB4IDAgMCAtMXB4O1xcbiAgdG9wOiA1MCU7XFxuICBsZWZ0OiAxMDAlO1xcbn1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2248\n")},2516:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(56);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n\n// EXTERNAL MODULE: ../superset-ui-core/src/chart/components/reactify.tsx\nvar reactify = __webpack_require__(1014);\n\n// EXTERNAL MODULE: ../superset-ui-core/src/style/index.ts\nvar style = __webpack_require__(434);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/legacy-plugin-chart-calendar/node_modules/d3-array/src/extent.js\n/* harmony default export */ var extent = (function(values, valueof) {\n  let min;\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  }\n  return [min, max];\n});\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/legacy-plugin-chart-calendar/node_modules/d3-array/src/range.js\n/* harmony default export */ var range = (function(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n});\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-selection/src/select.js\nvar src_select = __webpack_require__(854);\n\n// EXTERNAL MODULE: ../superset-ui-core/src/number-format/NumberFormatterRegistrySingleton.ts\nvar NumberFormatterRegistrySingleton = __webpack_require__(148);\n\n// EXTERNAL MODULE: ../superset-ui-core/src/time-format/TimeFormatterRegistrySingleton.ts + 5 modules\nvar TimeFormatterRegistrySingleton = __webpack_require__(132);\n\n// EXTERNAL MODULE: ../superset-ui-core/src/color/SequentialSchemeRegistrySingleton.ts\nvar SequentialSchemeRegistrySingleton = __webpack_require__(574);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/core-js/modules/es.string.replace.js\nvar es_string_replace = __webpack_require__(291);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/core-js/modules/web.dom-collections.iterator.js\nvar web_dom_collections_iterator = __webpack_require__(52);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/node_modules/d3-tip/index.js\nvar d3_tip = __webpack_require__(850);\n\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/legacy-plugin-chart-calendar/src/vendor/d3tip.css\nvar d3tip = __webpack_require__(2247);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/legacy-plugin-chart-calendar/src/vendor/cal-heatmap.js\n// [LICENSE TBD]\n/* Copied and altered from http://cal-heatmap.com/ , alterations around:\n * - tuning tooltips\n * - supporting multi-colors scales\n * - legend format\n * - UTC handling\n */ /* eslint-disable */var d3= true?__webpack_require__(153):undefined,d3= true?__webpack_require__(153):undefined,CalHeatMap=function(){\'use strict\';var self=this;self.tip=Object(d3_tip["a" /* default */])().attr("class","d3-tip").direction("n").offset([-5,0]).html(d=>`\n      ${self.options.timeFormatter(d.t)}: <strong>${self.options.valueFormatter(d.v)}</strong>\n    `);self.legendTip=Object(d3_tip["a" /* default */])().attr("class","d3-tip").direction("n").offset([-5,0]).html(d=>self.options.valueFormatter(d));this.allowedDataType=["json","csv","tsv","txt"];// Default settings\nthis.options={// selector string of the container to append the graph to\n// Accept any string value accepted by document.querySelector or CSS3\n// or an Element object\nitemSelector:"#cal-heatmap",// Whether to paint the calendar on init()\n// Used by testsuite to reduce testing time\npaintOnLoad:!0,// ================================================\n// DOMAIN\n// ================================================\n// Number of domain to display on the graph\nrange:12,// Size of each cell, in pixel\ncellSize:10,// Padding between each cell, in pixel\ncellPadding:2,// For rounded subdomain rectangles, in pixels\ncellRadius:0,domainGutter:2,domainMargin:[0,0,0,0],valueFormatter:d=>d,timeFormatter:d=>d,domain:"hour",subDomain:"min",// Number of columns to split the subDomains to\n// If not null, will takes precedence over rowLimit\ncolLimit:null,// Number of rows to split the subDomains to\n// Will be ignored if colLimit is not null\nrowLimit:null,// First day of the week is Monday\n// 0 to start the week on Sunday\nweekStartOnMonday:!0,// Start date of the graph\n// @default now\nstart:new Date,minDate:null,maxDate:null,// ================================================\n// DATA\n// ================================================\n// Data source\n// URL, where to fetch the original datas\ndata:"",// Data type\n// Default: json\ndataType:this.allowedDataType[0],// Payload sent when using POST http method\n// Leave to null (default) for GET request\n// Expect a string, formatted like "a=b;c=d"\ndataPostPayload:null,// Additional headers sent when requesting data\n// Expect an object formatted like:\n// { \'X-CSRF-TOKEN\': \'token\' }\ndataRequestHeaders:null,// Whether to consider missing date:value from the datasource\n// as equal to 0, or just leave them as missing\nconsiderMissingDataAsZero:!1,// Load remote data on calendar creation\n// When false, the calendar will be left empty\nloadOnInit:!0,// Calendar orientation\n// false: display domains side by side\n// true : display domains one under the other\nverticalOrientation:!1,// Domain dynamic width/height\n// The width on a domain depends on the number of\ndomainDynamicDimension:!0,// Domain Label properties\nlabel:{// valid: top, right, bottom, left\nposition:"bottom",// Valid: left, center, right\n// Also valid are the direct svg values: start, middle, end\nalign:"center",// By default, there is no margin/padding around the label\noffset:{x:0,y:0},rotate:null,// Used only on vertical orientation\nwidth:100,// Used only on horizontal orientation\nheight:null},// ================================================\n// LEGEND\n// ================================================\n// Threshold for the legend\nlegend:[10,20,30,40],// Whether to display the legend\ndisplayLegend:!0,legendCellSize:10,legendCellPadding:2,legendMargin:[0,0,0,0],// Legend vertical position\n// top: place legend above calendar\n// bottom: place legend below the calendar\nlegendVerticalPosition:"bottom",// Legend horizontal position\n// accepted values: left, center, right\nlegendHorizontalPosition:"left",// Legend rotation\n// accepted values: horizontal, vertical\nlegendOrientation:"horizontal",// Objects holding all the heatmap different colors\n// null to disable, and use the default css styles\n//\n// Examples:\n// legendColors: {\n//    min: "green",\n//    max: "red",\n//    empty: "#ffffff",\n//    base: "grey",\n//    overflow: "red",\n//    colorScaler: null,\n// }\nlegendColors:null,// ================================================\n// HIGHLIGHT\n// ================================================\n// List of dates to highlight\n// Valid values:\n// - []: don\'t highlight anything\n// - "now": highlight the current date\n// - an array of Date objects: highlight the specified dates\nhighlight:[],// ================================================\n// TEXT FORMATTING / i18n\n// ================================================\n// Name of the items to represent in the calendar\nitemName:["item","items"],// Formatting of the domain label\n// @default: null, will use the formatting according to domain type\n// Accept a string used as specifier by d3.time.format()\n// or a function\n//\n// Refer to https://github.com/mbostock/d3/wiki/Time-Formatting\n// for accepted date formatting used by d3.time.format()\ndomainLabelFormat:null,// Formatting of the title displayed when hovering a subDomain cell\nsubDomainTitleFormat:{empty:"{date}",filled:"{count} {name} {connector} {date}"},// Formatting of the {date} used in subDomainTitleFormat\n// @default: null, will use the formatting according to subDomain type\n// Accept a string used as specifier by d3.time.format()\n// or a function\n//\n// Refer to https://github.com/mbostock/d3/wiki/Time-Formatting\n// for accepted date formatting used by d3.time.format()\nsubDomainDateFormat:null,// Formatting of the text inside each subDomain cell\n// @default: null, no text\n// Accept a string used as specifier by d3.time.format()\n// or a function\n//\n// Refer to https://github.com/mbostock/d3/wiki/Time-Formatting\n// for accepted date formatting used by d3.time.format()\nsubDomainTextFormat:null,// Formatting of the title displayed when hovering a legend cell\nlegendTitleFormat:{lower:"less than {min} {name}",inner:"between {down} and {up} {name}",upper:"more than {max} {name}"},// Animation duration, in ms\nanimationDuration:500,nextSelector:!1,previousSelector:!1,itemNamespace:"cal-heatmap",tooltip:!1,// ================================================\n// EVENTS CALLBACK\n// ================================================\n// Callback when clicking on a time block\nonClick:null,// Callback after painting the empty calendar\n// Can be used to trigger an API call, once the calendar is ready to be filled\nafterLoad:null,// Callback after loading the next domain in the calendar\nafterLoadNextDomain:null,// Callback after loading the previous domain in the calendar\nafterLoadPreviousDomain:null,// Callback after finishing all actions on the calendar\nonComplete:null,// Callback after fetching the datas, but before applying them to the calendar\n// Used mainly to convert the datas if they\'re not formatted like expected\n// Takes the fetched "data" object as argument, must return a json object\n// formatted like {timestamp:count, timestamp2:count2},\nafterLoadData:function(data){return data},// Callback triggered after calling and completing update().\nafterUpdate:null,// Callback triggered after calling next().\n// The `status` argument is equal to true if there is no\n// more next domain to load\n//\n// This callback is also executed once, after calling previous(),\n// only when the max domain is reached\nonMaxDomainReached:null,// Callback triggered after calling previous().\n// The `status` argument is equal to true if there is no\n// more previous domain to load\n//\n// This callback is also executed once, after calling next(),\n// only when the min domain is reached\nonMinDomainReached:null};this._domainType={min:{name:"minute",level:10,maxItemNumber:60,defaultRowNumber:10,defaultColumnNumber:6,row:function(d){return self.getSubDomainRowNumber(d)},column:function(d){return self.getSubDomainColumnNumber(d)},position:{x:function(d){return Math.floor(d.getMinutes()/self._domainType.min.row(d))},y:function(d){return d.getMinutes()%self._domainType.min.row(d)}},format:{date:"%H:%M, %A %B %-e, %Y",legend:"",connector:"at"},extractUnit:function(d){return new Date(d.getFullYear(),d.getMonth(),d.getDate(),d.getHours(),d.getMinutes()).getTime()}},hour:{name:"hour",level:20,maxItemNumber:function(d){switch(self.options.domain){case"day":return 24;case"week":return 168;case"month":return 24*(self.options.domainDynamicDimension?self.getDayCountInMonth(d):31);}},defaultRowNumber:6,defaultColumnNumber:function(d){switch(self.options.domain){case"day":return 4;case"week":return 28;case"month":return self.options.domainDynamicDimension?self.getDayCountInMonth(d):31;}},row:function(d){return self.getSubDomainRowNumber(d)},column:function(d){return self.getSubDomainColumnNumber(d)},position:{x:function(d){if("month"===self.options.domain){if(0<self.options.colLimit||0<self.options.rowLimit){return Math.floor((d.getHours()+24*(d.getDate()-1))/self._domainType.hour.row(d))}return Math.floor(d.getHours()/self._domainType.hour.row(d))+4*(d.getDate()-1)}else if("week"===self.options.domain){if(0<self.options.colLimit||0<self.options.rowLimit){return Math.floor((d.getHours()+24*self.getWeekDay(d))/self._domainType.hour.row(d))}return Math.floor(d.getHours()/self._domainType.hour.row(d))+4*self.getWeekDay(d)}return Math.floor(d.getHours()/self._domainType.hour.row(d))},y:function(d){var p=d.getHours();if(0<self.options.colLimit||0<self.options.rowLimit){switch(self.options.domain){case"month":p+=24*(d.getDate()-1);break;case"week":p+=24*self.getWeekDay(d);break;}}return Math.floor(p%self._domainType.hour.row(d))}},format:{date:"%Hh, %A %B %-e, %Y",legend:"%H:00",connector:"at"},extractUnit:function(d){return new Date(d.getFullYear(),d.getMonth(),d.getDate(),d.getHours()).getTime()}},day:{name:"day",level:30,maxItemNumber:function(d){switch(self.options.domain){case"week":return 7;case"month":return self.options.domainDynamicDimension?self.getDayCountInMonth(d):31;case"year":return self.options.domainDynamicDimension?self.getDayCountInYear(d):366;}},defaultColumnNumber:function(d){d=new Date(d);switch(self.options.domain){case"week":return 1;case"month":return self.options.domainDynamicDimension&&!self.options.verticalOrientation?self.getWeekNumber(new Date(d.getFullYear(),d.getMonth()+1,0))-self.getWeekNumber(d)+1:6;case"year":return self.options.domainDynamicDimension?self.getWeekNumber(new Date(d.getFullYear(),11,31))-self.getWeekNumber(new Date(d.getFullYear(),0))+1:54;}},defaultRowNumber:7,row:function(d){return self.getSubDomainRowNumber(d)},column:function(d){return self.getSubDomainColumnNumber(d)},position:{x:function(d){switch(self.options.domain){case"week":return Math.floor(self.getWeekDay(d)/self._domainType.day.row(d));case"month":if(0<self.options.colLimit||0<self.options.rowLimit){return Math.floor((d.getDate()-1)/self._domainType.day.row(d))}return self.getWeekNumber(d)-self.getWeekNumber(new Date(d.getFullYear(),d.getMonth()));case"year":if(0<self.options.colLimit||0<self.options.rowLimit){return Math.floor((self.getDayOfYear(d)-1)/self._domainType.day.row(d))}return self.getWeekNumber(d);}},y:function(d){var p=self.getWeekDay(d);if(0<self.options.colLimit||0<self.options.rowLimit){switch(self.options.domain){case"year":p=self.getDayOfYear(d)-1;break;case"week":p=self.getWeekDay(d);break;case"month":p=d.getDate()-1;break;}}return Math.floor(p%self._domainType.day.row(d))}},format:{date:"%A %B %-e, %Y",legend:"%e %b",connector:"on"},extractUnit:function(d){return new Date(d.getFullYear(),d.getMonth(),d.getDate()).getTime()}},week:{name:"week",level:40,maxItemNumber:54,defaultColumnNumber:function(d){d=new Date(d);switch(self.options.domain){case"year":return self._domainType.week.maxItemNumber;case"month":return self.options.domainDynamicDimension?self.getWeekNumber(new Date(d.getFullYear(),d.getMonth()+1,0))-self.getWeekNumber(d):5;}},defaultRowNumber:1,row:function(d){return self.getSubDomainRowNumber(d)},column:function(d){return self.getSubDomainColumnNumber(d)},position:{x:function(d){switch(self.options.domain){case"year":return Math.floor(self.getWeekNumber(d)/self._domainType.week.row(d));case"month":return Math.floor(self.getMonthWeekNumber(d)/self._domainType.week.row(d));}},y:function(d){return self.getWeekNumber(d)%self._domainType.week.row(d)}},format:{date:"%B Week #%W",legend:"%B Week #%W",connector:"in"},extractUnit:function(d){var dt=new Date(d.getFullYear(),d.getMonth(),d.getDate()),weekDay=dt.getDay()-(self.options.weekStartOnMonday?1:0);// According to ISO-8601, week number computation are based on week starting on Monday\nif(0>weekDay){weekDay=6}dt.setDate(dt.getDate()-weekDay);return dt.getTime()}},month:{name:"month",level:50,maxItemNumber:12,defaultColumnNumber:12,defaultRowNumber:1,row:function(){return self.getSubDomainRowNumber()},column:function(){return self.getSubDomainColumnNumber()},position:{x:function(d){return Math.floor(d.getMonth()/self._domainType.month.row(d))},y:function(d){return d.getMonth()%self._domainType.month.row(d)}},format:{date:"%B %Y",legend:"%B",connector:"in"},extractUnit:function(d){return new Date(d.getFullYear(),d.getMonth()).getTime()}},year:{name:"year",level:60,row:function(){return self.options.rowLimit||1},column:function(){return self.options.colLimit||1},position:{x:function(){return 1},y:function(){return 1}},format:{date:"%Y",legend:"%Y",connector:"in"},extractUnit:function(d){return new Date(d.getFullYear()).getTime()}}};for(var type in this._domainType){if(this._domainType.hasOwnProperty(type)){var d=this._domainType[type];this._domainType["x_"+type]={name:"x_"+type,level:d.type,maxItemNumber:d.maxItemNumber,defaultRowNumber:d.defaultRowNumber,defaultColumnNumber:d.defaultColumnNumber,row:d.column,column:d.row,position:{x:d.position.y,y:d.position.x},format:d.format,extractUnit:d.extractUnit}}}// Record the address of the last inserted domain when browsing\nthis.lastInsertedSvg=null;this._completed=!1;// Record all the valid domains\n// Each domain value is a timestamp in milliseconds\nthis._domains=d3.map();this.graphDim={width:0,height:0};this.legendDim={width:0,height:0};this.NAVIGATE_LEFT=1;this.NAVIGATE_RIGHT=2;// Various update mode when using the update() API\nthis.RESET_ALL_ON_UPDATE=0;this.RESET_SINGLE_ON_UPDATE=1;this.APPEND_ON_UPDATE=2;this.DEFAULT_LEGEND_MARGIN=10;this.root=null;this.tooltip=null;this._maxDomainReached=!1;this._minDomainReached=!1;this.domainPosition=new DomainPosition;this.Legend=null;this.legendScale=null;// List of domains that are skipped because of DST\n// All times belonging to these domains should be re-assigned to the previous domain\nthis.DSTDomain=[];/**\n   * Display the graph for the first time\n   * @return bool True if the calendar is created\n   */this._init=function(){self.getDomain(self.options.start).map(function(d){return d.getTime()}).map(function(d){self._domains.set(d,self.getSubDomain(d).map(function(d){return{t:self._domainType[self.options.subDomain].extractUnit(d),v:null}}))});self.root=d3.select(self.options.itemSelector).append("svg").attr("class","cal-heatmap-container");self.root.attr("x",0).attr("y",0).append("svg").attr("class","graph");self.Legend=new Legend(self);if(self.options.paintOnLoad){_initCalendar()}self.root.call(self.tip);self.root.call(self.legendTip);return!0};function _initCalendar(){self.verticalDomainLabel="top"===self.options.label.position||"bottom"===self.options.label.position;self.domainVerticalLabelHeight=null===self.options.label.height?Math.max(25,2*self.options.cellSize):self.options.label.height;self.domainHorizontalLabelWidth=0;if(""===self.options.domainLabelFormat&&null===self.options.label.height){self.domainVerticalLabelHeight=0}if(!self.verticalDomainLabel){self.domainVerticalLabelHeight=0;self.domainHorizontalLabelWidth=self.options.label.width}self.paint();// =========================================================================//\n// ATTACHING DOMAIN NAVIGATION EVENT                    //\n// =========================================================================//\nif(!1!==self.options.nextSelector){d3.select(self.options.nextSelector).on("click."+self.options.itemNamespace,function(){d3.event.preventDefault();return self.loadNextDomain(1)})}if(!1!==self.options.previousSelector){d3.select(self.options.previousSelector).on("click."+self.options.itemNamespace,function(){d3.event.preventDefault();return self.loadPreviousDomain(1)})}self.Legend.redraw(self.graphDim.width-self.options.domainGutter-self.options.cellPadding);self.afterLoad();var domains=self.getDomainKeys();// Fill the graph with some datas\nif(self.options.loadOnInit){self.getDatas(self.options.data,new Date(domains[0]),self.getSubDomain(domains[domains.length-1]).pop(),function(){self.fill();self.onComplete()})}else{self.onComplete()}self.checkIfMinDomainIsReached(domains[0]);self.checkIfMaxDomainIsReached(self.getNextDomain().getTime())}// Return the width of the domain block, without the domain gutter\n// @param int d Domain start timestamp\nfunction w(d,outer){var width=self.options.cellSize*self._domainType[self.options.subDomain].column(d)+self.options.cellPadding*self._domainType[self.options.subDomain].column(d);if(2===arguments.length&&!0===outer){return width+=self.domainHorizontalLabelWidth+self.options.domainGutter+self.options.domainMargin[1]+self.options.domainMargin[3]}return width}// Return the height of the domain block, without the domain gutter\nfunction h(d,outer){var height=self.options.cellSize*self._domainType[self.options.subDomain].row(d)+self.options.cellPadding*self._domainType[self.options.subDomain].row(d);if(2===arguments.length&&!0===outer){height+=self.options.domainGutter+self.domainVerticalLabelHeight+self.options.domainMargin[0]+self.options.domainMargin[2]}return height}/**\n   *\n   *\n   * @param int navigationDir\n   */this.paint=function(navigationDir){var options=self.options;if(0===arguments.length){navigationDir=!1}// Painting all the domains\nvar domainSvg=self.root.select(".graph").selectAll(".graph-domain").data(function(){var data=self.getDomainKeys();return navigationDir===self.NAVIGATE_LEFT?data.reverse():data},function(d){return d}),enteringDomainDim=0,exitingDomainDim=0,svg=domainSvg.enter().append("svg").attr("width",function(d){return w(d,!0)}).attr("height",function(d){return h(d,!0)}).attr("x",function(d){if(options.verticalOrientation){self.graphDim.width=Math.max(self.graphDim.width,w(d,!0));return 0}else{return getDomainPosition(d,self.graphDim,"width",w(d,!0))}}).attr("y",function(d){if(options.verticalOrientation){return getDomainPosition(d,self.graphDim,"height",h(d,!0))}else{self.graphDim.height=Math.max(self.graphDim.height,h(d,!0));return 0}}).attr("class",function(d){var classname="graph-domain",date=new Date(d);switch(options.domain){case"hour":classname+=" h_"+date.getHours();/* falls through */case"day":classname+=" d_"+date.getDate()+" dy_"+date.getDay();/* falls through */case"week":classname+=" w_"+self.getWeekNumber(date);/* falls through */case"month":classname+=" m_"+(date.getMonth()+1);/* falls through */case"year":classname+=" y_"+date.getFullYear();}return classname});self.lastInsertedSvg=svg;function getDomainPosition(domainIndex,graphDim,axis,domainDim){var tmp=0;switch(navigationDir){case!1:tmp=graphDim[axis];graphDim[axis]+=domainDim;self.domainPosition.setPosition(domainIndex,tmp);return tmp;case self.NAVIGATE_RIGHT:self.domainPosition.setPosition(domainIndex,graphDim[axis]);enteringDomainDim=domainDim;exitingDomainDim=self.domainPosition.getPositionFromIndex(1);self.domainPosition.shiftRightBy(exitingDomainDim);return graphDim[axis];case self.NAVIGATE_LEFT:tmp=-domainDim;enteringDomainDim=-tmp;exitingDomainDim=graphDim[axis]-self.domainPosition.getLast();self.domainPosition.setPosition(domainIndex,tmp);self.domainPosition.shiftLeftBy(enteringDomainDim);return tmp;}}svg.append("rect").attr("width",function(d){return w(d,!0)-options.domainGutter-options.cellPadding}).attr("height",function(d){return h(d,!0)-options.domainGutter-options.cellPadding}).attr("class","domain-background");// =========================================================================//\n// PAINTING SUBDOMAINS                            //\n// =========================================================================//\nvar subDomainSvgGroup=svg.append("svg").attr("x",function(){if("left"===options.label.position){return self.domainHorizontalLabelWidth+options.domainMargin[3]}else{return options.domainMargin[3]}}).attr("y",function(){if("top"===options.label.position){return self.domainVerticalLabelHeight+options.domainMargin[0]}else{return options.domainMargin[0]}}).attr("class","graph-subdomain-group"),rect=subDomainSvgGroup.selectAll("g").data(function(d){return self._domains.get(d)}).enter().append("g");rect.append("rect").attr("class",function(d){return"graph-rect"+self.getHighlightClassName(d.t)+(null!==options.onClick?" hover_cursor":"")}).attr("width",options.cellSize).attr("height",options.cellSize).attr("x",function(d){return self.positionSubDomainX(d.t)}).attr("y",function(d){return self.positionSubDomainY(d.t)}).on("click",function(d){if(null!==options.onClick){return self.onClick(new Date(d.t),d.v)}}).call(function(selection){if(0<options.cellRadius){selection.attr("rx",options.cellRadius).attr("ry",options.cellRadius)}if(null!==self.legendScale&&null!==options.legendColors&&options.legendColors.hasOwnProperty("base")){selection.attr("fill",options.legendColors.base)}if(options.tooltip){selection.on("mouseover",function(d){self.tip.show(d,this)}).on("mouseout",function(){self.tip.hide(d)})}});// Appending a title to each subdomain\nif(!options.tooltip){rect.append("title").text(function(d){return self.formatDate(new Date(d.t),options.subDomainDateFormat)})}// =========================================================================//\n// PAINTING LABEL                              //\n// =========================================================================//\nif(""!==options.domainLabelFormat){svg.append("text").attr("class","graph-label").attr("y",function(d){var y=options.domainMargin[0];switch(options.label.position){case"top":y+=self.domainVerticalLabelHeight/2;break;case"bottom":y+=h(d)+self.domainVerticalLabelHeight/2;}return y+options.label.offset.y*("right"===options.label.rotate&&"right"===options.label.position||"left"===options.label.rotate&&"left"===options.label.position?-1:1)}).attr("x",function(d){var x=options.domainMargin[3];switch(options.label.position){case"right":x+=w(d);break;case"bottom":case"top":x+=w(d)/2;}if("right"===options.label.align){return x+self.domainHorizontalLabelWidth-options.label.offset.x*("right"===options.label.rotate?-1:1)}return x+options.label.offset.x}).attr("text-anchor",function(){switch(options.label.align){case"start":case"left":return"start";case"end":case"right":return"end";default:return"middle";}}).attr("dominant-baseline",function(){return self.verticalDomainLabel?"middle":"top"}).text(function(d){return self.formatDate(new Date(d),options.domainLabelFormat)}).call(domainRotate)}function domainRotate(selection){switch(options.label.rotate){case"right":selection.attr("transform",function(d){var s="rotate(90), ";switch(options.label.position){case"right":s+="translate(-"+w(d)+" , -"+w(d)+")";break;case"left":s+="translate(0, -"+self.domainHorizontalLabelWidth+")";break;}return s});break;case"left":selection.attr("transform",function(d){var s="rotate(270), ";switch(options.label.position){case"right":s+="translate(-"+(w(d)+self.domainHorizontalLabelWidth)+" , "+w(d)+")";break;case"left":s+="translate(-"+self.domainHorizontalLabelWidth+" , "+self.domainHorizontalLabelWidth+")";break;}return s});break;}}// =========================================================================//\n// PAINTING DOMAIN SUBDOMAIN CONTENT                    //\n// =========================================================================//\nif(null!==options.subDomainTextFormat){rect.append("text").attr("class",function(d){return"subdomain-text"+self.getHighlightClassName(d.t)}).attr("x",function(d){return self.positionSubDomainX(d.t)+options.cellSize/2}).attr("y",function(d){return self.positionSubDomainY(d.t)+options.cellSize/2}).attr("text-anchor","middle").attr("dominant-baseline","central").text(function(d){return self.formatDate(new Date(d.t),options.subDomainTextFormat)})}// =========================================================================//\n// ANIMATION                                //\n// =========================================================================//\nif(!1!==navigationDir){domainSvg.transition().duration(options.animationDuration).attr("x",function(d){return options.verticalOrientation?0:self.domainPosition.getPosition(d)}).attr("y",function(d){return options.verticalOrientation?self.domainPosition.getPosition(d):0})}var tempWidth=self.graphDim.width,tempHeight=self.graphDim.height;if(options.verticalOrientation){self.graphDim.height+=enteringDomainDim-exitingDomainDim}else{self.graphDim.width+=enteringDomainDim-exitingDomainDim}// At the time of exit, domainsWidth and domainsHeight already automatically shifted\ndomainSvg.exit().transition().duration(options.animationDuration).attr("x",function(d){if(options.verticalOrientation){return 0}else{switch(navigationDir){case self.NAVIGATE_LEFT:return Math.min(self.graphDim.width,tempWidth);case self.NAVIGATE_RIGHT:return-w(d,!0);}}}).attr("y",function(d){if(options.verticalOrientation){switch(navigationDir){case self.NAVIGATE_LEFT:return Math.min(self.graphDim.height,tempHeight);case self.NAVIGATE_RIGHT:return-h(d,!0);}}else{return 0}}).remove();// Resize the root container\nself.resize()}};CalHeatMap.prototype={/**\n   * Validate and merge user settings with default settings\n   *\n   * @param  {object} settings User settings\n   * @return {bool} False if settings contains error\n   */ /* jshint maxstatements:false */init:function(settings){\'use strict\';var parent=this,options=parent.options=mergeRecursive(parent.options,settings);// Fatal errors\n// Stop script execution on error\n(/**\n     * Ensure that the domain and subdomain are valid\n     *\n     * @throw {Error} when domain or subdomain are not valid\n     * @return {bool} True if domain and subdomain are valid and compatible\n     */function(){if(!parent._domainType.hasOwnProperty(options.domain)||"min"===options.domain||"x_"===options.domain.substring(0,2)){throw new Error("The domain \'"+options.domain+"\' is not valid")}if(!parent._domainType.hasOwnProperty(options.subDomain)||"year"===options.subDomain){throw new Error("The subDomain \'"+options.subDomain+"\' is not valid")}if(parent._domainType[options.domain].level<=parent._domainType[options.subDomain].level){throw new Error("\'"+options.subDomain+"\' is not a valid subDomain to \'"+options.domain+"\'")}return!0}/**\n     * Fine-tune the label alignement depending on its position\n     *\n     * @return void\n     */)();validateSelector(options.itemSelector,!1,"itemSelector");if(-1===parent.allowedDataType.indexOf(options.dataType)){throw new Error("The data type \'"+options.dataType+"\' is not valid data type")}if(null===d3.select(options.itemSelector)[0][0]){throw new Error("The node \'"+options.itemSelector+"\' specified in itemSelector does not exists")}try{validateSelector(options.nextSelector,!0,"nextSelector");validateSelector(options.previousSelector,!0,"previousSelector")}catch(error){console.log(error.message);return!1}// If other settings contains error, will fallback to default\nif(!settings.hasOwnProperty("subDomain")){this.options.subDomain=getOptimalSubDomain(settings.domain)}if("string"!=typeof options.itemNamespace||""===options.itemNamespace){console.log("itemNamespace can not be empty, falling back to cal-heatmap");options.itemNamespace="cal-heatmap"}// Don\'t touch these settings\nvar s=["data","onComplete","onClick","afterLoad","afterLoadData","afterLoadPreviousDomain","afterLoadNextDomain","afterUpdate"];for(var k in s){if(settings.hasOwnProperty(s[k])){options[s[k]]=settings[s[k]]}}options.subDomainDateFormat="string"==typeof options.subDomainDateFormat||"function"==typeof options.subDomainDateFormat?options.subDomainDateFormat:this._domainType[options.subDomain].format.date;options.domainLabelFormat="string"==typeof options.domainLabelFormat||"function"==typeof options.domainLabelFormat?options.domainLabelFormat:this._domainType[options.domain].format.legend;options.subDomainTextFormat="string"==typeof options.subDomainTextFormat&&""!==options.subDomainTextFormat||"function"==typeof options.subDomainTextFormat?options.subDomainTextFormat:null;options.domainMargin=expandMarginSetting(options.domainMargin);options.legendMargin=expandMarginSetting(options.legendMargin);options.highlight=parent.expandDateSetting(options.highlight);options.itemName=/**\n     * Convert a string to an array like [singular-form, plural-form]\n     *\n     * @param  {string|array} value Date to convert\n     * @return {array}       An array like [singular-form, plural-form]\n     */function(value){if("string"==typeof value){return[value,value+(""!==value?"s":"")]}if(Array.isArray(value)){if(1===value.length){return[value[0],value[0]+"s"]}else if(2<value.length){return value.slice(0,2)}return value}return["item","items"]}(options.itemName);options.colLimit=function(value){return 0<value?value:null}(options.colLimit);options.rowLimit=function(value){if(0<value&&0<options.colLimit){console.log("colLimit and rowLimit are mutually exclusive, rowLimit will be ignored");return null}return 0<value?value:null}(options.rowLimit);if(!settings.hasOwnProperty("legendMargin")){autoAddLegendMargin()}(function(){// Auto-align label, depending on it\'s position\nif(!settings.hasOwnProperty("label")||settings.hasOwnProperty("label")&&!settings.label.hasOwnProperty("align")){switch(options.label.position){case"left":options.label.align="right";break;case"right":options.label.align="left";break;default:options.label.align="center";}if("left"===options.label.rotate){options.label.align="right"}else if("right"===options.label.rotate){options.label.align="left"}}if(!settings.hasOwnProperty("label")||settings.hasOwnProperty("label")&&!settings.label.hasOwnProperty("offset")){if("left"===options.label.position||"right"===options.label.position){options.label.offset={x:10,y:15}}}}/**\n     * If not specified, add some margin around the legend depending on its position\n     *\n     * @return void\n     */)();/**\n     * Validate that a queryString is valid\n     *\n     * @param  {Element|string|bool} selector   The queryString to test\n     * @param  {bool}  canBeFalse  Whether false is an accepted and valid value\n     * @param  {string} name    Name of the tested selector\n     * @throws {Error}        If the selector is not valid\n     * @return {bool}        True if the selector is a valid queryString\n     */function validateSelector(selector,canBeFalse,name){if((canBeFalse&&!1===selector||selector instanceof Element||"string"==typeof selector)&&""!==selector){return!0}throw new Error("The "+name+" is not valid")}/**\n     * Return the optimal subDomain for the specified domain\n     *\n     * @param  {string} domain a domain name\n     * @return {string}        the subDomain name\n     */function getOptimalSubDomain(domain){switch(domain){case"year":return"month";case"month":return"day";case"week":return"day";case"day":return"hour";default:return"min";}}function autoAddLegendMargin(){switch(options.legendVerticalPosition){case"top":options.legendMargin[2]=parent.DEFAULT_LEGEND_MARGIN;break;case"bottom":options.legendMargin[0]=parent.DEFAULT_LEGEND_MARGIN;break;case"middle":case"center":options.legendMargin["right"===options.legendHorizontalPosition?3:1]=parent.DEFAULT_LEGEND_MARGIN;}}/**\n     * Expand a number of an array of numbers to an usable 4 values array\n     *\n     * @param  {integer|array} value\n     * @return {array}        array\n     */function expandMarginSetting(value){if("number"==typeof value){value=[value]}if(!Array.isArray(value)){console.log("Margin only takes an integer or an array of integers");value=[0]}switch(value.length){case 1:return[value[0],value[0],value[0],value[0]];case 2:return[value[0],value[1],value[0],value[1]];case 3:return[value[0],value[1],value[2],value[1]];case 4:return value;default:return value.slice(0,4);}}return this._init()},/**\n   * Convert a keyword or an array of keyword/date to an array of date objects\n   *\n   * @param  {string|array|Date} value Data to convert\n   * @return {array}       An array of Dates\n   */expandDateSetting:function(value){\'use strict\';if(!Array.isArray(value)){value=[value]}return value.map(function(data){if("now"===data){return new Date}if(data instanceof Date){return data}return!1}).filter(function(d){return!1!==d})},/**\n   * Fill the calendar by coloring the cells\n   *\n   * @param array svg An array of html node to apply the transformation to (optional)\n   *                  It\'s used to limit the painting to only a subset of the calendar\n   * @return void\n   */fill:function(svg){\'use strict\';var parent=this,options=parent.options;if(0===arguments.length){svg=parent.root.selectAll(".graph-domain")}var rect=svg.selectAll("svg").selectAll("g").data(function(d){return parent._domains.get(d)});/**\n     * Colorize the cell via a style attribute if enabled\n     */rect.transition().duration(options.animationDuration).select("rect").attr("class",function(d){var htmlClass=parent.getHighlightClassName(d.t).trim().split(" "),pastDate=parent.dateIsLessThan(d.t,new Date),sameDate=parent.dateIsEqual(d.t,new Date);if(null===parent.legendScale||null===d.v&&options.hasOwnProperty("considerMissingDataAsZero")&&!options.considerMissingDataAsZero&&!options.legendColors.hasOwnProperty("base")){htmlClass.push("graph-rect")}if(sameDate){htmlClass.push("now")}else if(!pastDate){htmlClass.push("future")}if(null!==d.v){htmlClass.push(parent.Legend.getClass(d.v,null===parent.legendScale))}else if(options.considerMissingDataAsZero&&pastDate){htmlClass.push(parent.Legend.getClass(0,null===parent.legendScale))}if(null!==options.onClick){htmlClass.push("hover_cursor")}return htmlClass.join(" ")}).call(function(element){if(null===parent.legendScale){return!1}element.attr("fill",function(d){if(null===d.v&&options.hasOwnProperty("considerMissingDataAsZero")&&!options.considerMissingDataAsZero){if(options.legendColors.hasOwnProperty("base")){return options.legendColors.base}}if(null!==options.legendColors&&options.legendColors.hasOwnProperty("empty")&&(0===d.v||null===d.v&&options.hasOwnProperty("considerMissingDataAsZero")&&options.considerMissingDataAsZero)){return options.legendColors.empty}if(0>d.v&&0<options.legend[0]&&null!==options.legendColors&&options.legendColors.hasOwnProperty("overflow")){return options.legendColors.overflow}return parent.legendScale(Math.min(d.v,options.legend[options.legend.length-1]))})});rect.transition().duration(options.animationDuration).select("title").text(function(d){return parent.getSubDomainTitle(d)});/**\n     * Change the subDomainText class if necessary\n     * Also change the text, e.g when text is representing the value\n     * instead of the date\n     */rect.transition().duration(options.animationDuration).select("text").attr("class",function(d){return"subdomain-text"+parent.getHighlightClassName(d.t)}).call(function(element){if("function"==typeof options.subDomainTextFormat){element.text(function(d){return options.subDomainTextFormat(d.t,d.v)})}})},/**\n   * Sprintf like function.\n   * Replaces placeholders {0} in string with values from provided object.\n   *\n   * @param string formatted String containing placeholders.\n   * @param object args Object with properties to replace placeholders in string.\n   *\n   * @return String\n   */formatStringWithObject:function(formatted,args){\'use strict\';for(var prop in args){if(args.hasOwnProperty(prop)){var regexp=new RegExp("\\\\{"+prop+"\\\\}","gi");formatted=formatted.replace(regexp,args[prop])}}return formatted},// =========================================================================//\n// EVENTS CALLBACK                              //\n// =========================================================================//\n/**\n   * Helper method for triggering event callback\n   *\n   * @param  string  eventName       Name of the event to trigger\n   * @param  array  successArgs     List of argument to pass to the callback\n   * @param  boolean  skip      Whether to skip the event triggering\n   * @return mixed  True when the triggering was skipped, false on error, else the callback function\n   */triggerEvent:function(eventName,successArgs,skip){\'use strict\';if(3===arguments.length&&skip||null===this.options[eventName]){return!0}if("function"==typeof this.options[eventName]){if("function"==typeof successArgs){successArgs=successArgs()}return this.options[eventName].apply(this,successArgs)}else{console.log("Provided callback for "+eventName+" is not a function.");return!1}},/**\n   * Event triggered on a mouse click on a subDomain cell\n   *\n   * @param  Date    d    Date of the subdomain block\n   * @param  int    itemNb  Number of items in that date\n   */onClick:function(d,itemNb){\'use strict\';return this.triggerEvent("onClick",[d,itemNb])},/**\n   * Event triggered after drawing the calendar, byt before filling it with data\n   */afterLoad:function(){\'use strict\';return this.triggerEvent("afterLoad")},/**\n   * Event triggered after completing drawing and filling the calendar\n   */onComplete:function(){\'use strict\';var response=this.triggerEvent("onComplete",[],this._completed);this._completed=!0;return response},/**\n   * Event triggered after shifting the calendar one domain back\n   *\n   * @param  Date    start  Domain start date\n   * @param  Date    end    Domain end date\n   */afterLoadPreviousDomain:function(start){\'use strict\';var parent=this;return this.triggerEvent("afterLoadPreviousDomain",function(){var subDomain=parent.getSubDomain(start);return[subDomain.shift(),subDomain.pop()]})},/**\n   * Event triggered after shifting the calendar one domain above\n   *\n   * @param  Date    start  Domain start date\n   * @param  Date    end    Domain end date\n   */afterLoadNextDomain:function(start){\'use strict\';var parent=this;return this.triggerEvent("afterLoadNextDomain",function(){var subDomain=parent.getSubDomain(start);return[subDomain.shift(),subDomain.pop()]})},/**\n   * Event triggered after loading the leftmost domain allowed by minDate\n   *\n   * @param  boolean  reached True if the leftmost domain was reached\n   */onMinDomainReached:function(reached){\'use strict\';this._minDomainReached=reached;return this.triggerEvent("onMinDomainReached",[reached])},/**\n   * Event triggered after loading the rightmost domain allowed by maxDate\n   *\n   * @param  boolean  reached True if the rightmost domain was reached\n   */onMaxDomainReached:function(reached){\'use strict\';this._maxDomainReached=reached;return this.triggerEvent("onMaxDomainReached",[reached])},checkIfMinDomainIsReached:function(date,upperBound){\'use strict\';if(this.minDomainIsReached(date)){this.onMinDomainReached(!0)}if(2===arguments.length){if(this._maxDomainReached&&!this.maxDomainIsReached(upperBound)){this.onMaxDomainReached(!1)}}},checkIfMaxDomainIsReached:function(date,lowerBound){\'use strict\';if(this.maxDomainIsReached(date)){this.onMaxDomainReached(!0)}if(2===arguments.length){if(this._minDomainReached&&!this.minDomainIsReached(lowerBound)){this.onMinDomainReached(!1)}}},afterUpdate:function(){\'use strict\';return this.triggerEvent("afterUpdate")},// =========================================================================//\n// FORMATTER                                //\n// =========================================================================//\nformatNumber:d3.format(",g"),formatDate:function(d,format){\'use strict\';if(2>arguments.length){format="title"}if("function"==typeof format){return format(d)}else{var f=d3.time.format(format);return f(d)}},getSubDomainTitle:function(d){\'use strict\';if(null===d.v&&!this.options.considerMissingDataAsZero){return this.formatStringWithObject(this.options.subDomainTitleFormat.empty,{date:this.formatDate(new Date(d.t),this.options.subDomainDateFormat)})}else{var value=d.v;// Consider null as 0\nif(null===value&&this.options.considerMissingDataAsZero){value=0}return this.formatStringWithObject(this.options.subDomainTitleFormat.filled,{count:this.formatNumber(value),name:this.options.itemName[1!==value?1:0],connector:this._domainType[this.options.subDomain].format.connector,date:this.formatDate(new Date(d.t),this.options.subDomainDateFormat)})}},// =========================================================================//\n// DOMAIN NAVIGATION                            //\n// =========================================================================//\n/**\n   * Shift the calendar one domain forward\n   *\n   * The new domain is loaded only if it\'s not beyond maxDate\n   *\n   * @param int n Number of domains to load\n   * @return bool True if the next domain was loaded, else false\n   */loadNextDomain:function(n){\'use strict\';if(this._maxDomainReached||0===n){return!1}var bound=this.loadNewDomains(this.NAVIGATE_RIGHT,this.getDomain(this.getNextDomain(),n));this.afterLoadNextDomain(bound.end);this.checkIfMaxDomainIsReached(this.getNextDomain().getTime(),bound.start);return!0},/**\n   * Shift the calendar one domain backward\n   *\n   * The previous domain is loaded only if it\'s not beyond the minDate\n   *\n   * @param int n Number of domains to load\n   * @return bool True if the previous domain was loaded, else false\n   */loadPreviousDomain:function(n){\'use strict\';if(this._minDomainReached||0===n){return!1}var bound=this.loadNewDomains(this.NAVIGATE_LEFT,this.getDomain(this.getDomainKeys()[0],-n).reverse());this.afterLoadPreviousDomain(bound.start);this.checkIfMinDomainIsReached(bound.start,bound.end);return!0},loadNewDomains:function(direction,newDomains){\'use strict\';var parent=this,backward=direction===this.NAVIGATE_LEFT,i=-1,total=newDomains.length,domains=this.getDomainKeys();function buildSubDomain(d){return{t:parent._domainType[parent.options.subDomain].extractUnit(d),v:null}}// Remove out of bound domains from list of new domains to prepend\nwhile(++i<total){if(backward&&this.minDomainIsReached(newDomains[i])){newDomains=newDomains.slice(0,i+1);break}if(!backward&&this.maxDomainIsReached(newDomains[i])){newDomains=newDomains.slice(0,i);break}}newDomains=newDomains.slice(-this.options.range);for(i=0,total=newDomains.length;i<total;i+=1){this._domains.set(newDomains[i].getTime(),this.getSubDomain(newDomains[i]).map(buildSubDomain));this._domains.remove(backward?domains.pop():domains.shift())}domains=this.getDomainKeys();if(backward){newDomains=newDomains.reverse()}this.paint(direction);this.getDatas(this.options.data,newDomains[0],this.getSubDomain(newDomains[newDomains.length-1]).pop(),function(){parent.fill(parent.lastInsertedSvg)});return{start:newDomains[backward?0:1],end:domains[domains.length-1]}},/**\n   * Return whether a date is inside the scope determined by maxDate\n   *\n   * @param int datetimestamp The timestamp in ms to test\n   * @return bool True if the specified date correspond to the calendar upper bound\n   */maxDomainIsReached:function(datetimestamp){\'use strict\';return null!==this.options.maxDate&&this.options.maxDate.getTime()<datetimestamp},/**\n   * Return whether a date is inside the scope determined by minDate\n   *\n   * @param int datetimestamp The timestamp in ms to test\n   * @return bool True if the specified date correspond to the calendar lower bound\n   */minDomainIsReached:function(datetimestamp){\'use strict\';return null!==this.options.minDate&&this.options.minDate.getTime()>=datetimestamp},/**\n   * Return the list of the calendar\'s domain timestamp\n   *\n   * @return Array a sorted array of timestamp\n   */getDomainKeys:function(){\'use strict\';return this._domains.keys().map(function(d){return parseInt(d,10)}).sort(function(a,b){return a-b})},// =========================================================================//\n// POSITIONNING                                //\n// =========================================================================//\npositionSubDomainX:function(d){\'use strict\';var index=this._domainType[this.options.subDomain].position.x(new Date(d));return index*this.options.cellSize+index*this.options.cellPadding},positionSubDomainY:function(d){\'use strict\';var index=this._domainType[this.options.subDomain].position.y(new Date(d));return index*this.options.cellSize+index*this.options.cellPadding},getSubDomainColumnNumber:function(d){\'use strict\';if(0<this.options.rowLimit){var i=this._domainType[this.options.subDomain].maxItemNumber;if("function"==typeof i){i=i(d)}return Math.ceil(i/this.options.rowLimit)}var j=this._domainType[this.options.subDomain].defaultColumnNumber;if("function"==typeof j){j=j(d)}return this.options.colLimit||j},getSubDomainRowNumber:function(d){\'use strict\';if(0<this.options.colLimit){var i=this._domainType[this.options.subDomain].maxItemNumber;if("function"==typeof i){i=i(d)}return Math.ceil(i/this.options.colLimit)}var j=this._domainType[this.options.subDomain].defaultRowNumber;if("function"==typeof j){j=j(d)}return this.options.rowLimit||j},/**\n   * Return a classname if the specified date should be highlighted\n   *\n   * @param  timestamp date Date of the current subDomain\n   * @return String the highlight class\n   */getHighlightClassName:function(d){\'use strict\';d=new Date(d);if(0<this.options.highlight.length){for(var i in this.options.highlight){if(this.dateIsEqual(this.options.highlight[i],d)){return this.isNow(this.options.highlight[i])?" highlight-now":" highlight"}}}return""},/**\n   * Return whether the specified date is now,\n   * according to the type of subdomain\n   *\n   * @param  Date d The date to compare\n   * @return bool True if the date correspond to a subdomain cell\n   */isNow:function(d){\'use strict\';return this.dateIsEqual(d,new Date)},/**\n   * Return whether 2 dates are equals\n   * This function is subdomain-aware,\n   * and dates comparison are dependent of the subdomain\n   *\n   * @param  Date dateA First date to compare\n   * @param  Date dateB Secon date to compare\n   * @return bool true if the 2 dates are equals\n   */ /* jshint maxcomplexity: false */dateIsEqual:function(dateA,dateB){\'use strict\';if(!(dateA instanceof Date)){dateA=new Date(dateA)}if(!(dateB instanceof Date)){dateB=new Date(dateB)}switch(this.options.subDomain){case"x_min":case"min":return dateA.getFullYear()===dateB.getFullYear()&&dateA.getMonth()===dateB.getMonth()&&dateA.getDate()===dateB.getDate()&&dateA.getHours()===dateB.getHours()&&dateA.getMinutes()===dateB.getMinutes();case"x_hour":case"hour":return dateA.getFullYear()===dateB.getFullYear()&&dateA.getMonth()===dateB.getMonth()&&dateA.getDate()===dateB.getDate()&&dateA.getHours()===dateB.getHours();case"x_day":case"day":return dateA.getFullYear()===dateB.getFullYear()&&dateA.getMonth()===dateB.getMonth()&&dateA.getDate()===dateB.getDate();case"x_week":case"week":return dateA.getFullYear()===dateB.getFullYear()&&this.getWeekNumber(dateA)===this.getWeekNumber(dateB);case"x_month":case"month":return dateA.getFullYear()===dateB.getFullYear()&&dateA.getMonth()===dateB.getMonth();default:return!1;}},/**\n   * Returns wether or not dateA is less than or equal to dateB. This function is subdomain aware.\n   * Performs automatic conversion of values.\n   * @param dateA may be a number or a Date\n   * @param dateB may be a number or a Date\n   * @returns {boolean}\n   */dateIsLessThan:function(dateA,dateB){\'use strict\';if(!(dateA instanceof Date)){dateA=new Date(dateA)}if(!(dateB instanceof Date)){dateB=new Date(dateB)}function normalizedMillis(date,subdomain){switch(subdomain){case"x_min":case"min":return new Date(date.getFullYear(),date.getMonth(),date.getDate(),date.getHours(),date.getMinutes()).getTime();case"x_hour":case"hour":return new Date(date.getFullYear(),date.getMonth(),date.getDate(),date.getHours()).getTime();case"x_day":case"day":return new Date(date.getFullYear(),date.getMonth(),date.getDate()).getTime();case"x_week":case"week":case"x_month":case"month":return new Date(date.getFullYear(),date.getMonth()).getTime();default:return date.getTime();}}return normalizedMillis(dateA,this.options.subDomain)<normalizedMillis(dateB,this.options.subDomain)},// =========================================================================//\n// DATE COMPUTATION                              //\n// =========================================================================//\n/**\n   * Return the day of the year for the date\n   * @param  Date\n   * @return  int Day of the year [1,366]\n   */getDayOfYear:d3.time.format("%j"),/**\n   * Return the week number of the year\n   * Monday as the first day of the week\n   * @return int  Week number [0-53]\n   */getWeekNumber:function(d){\'use strict\';var f=!0===this.options.weekStartOnMonday?d3.time.format("%W"):d3.time.format("%U");return f(d)},/**\n   * Return the week number, relative to its month\n   *\n   * @param  int|Date d Date or timestamp in milliseconds\n   * @return int Week number, relative to the month [0-5]\n   */getMonthWeekNumber:function(d){\'use strict\';if("number"==typeof d){d=new Date(d)}var monthFirstWeekNumber=this.getWeekNumber(new Date(d.getFullYear(),d.getMonth()));return this.getWeekNumber(d)-monthFirstWeekNumber-1},/**\n   * Return the number of weeks in the dates\' year\n   *\n   * @param  int|Date d Date or timestamp in milliseconds\n   * @return int Number of weeks in the date\'s year\n   */getWeekNumberInYear:function(d){\'use strict\';if("number"==typeof d){d=new Date(d)}},/**\n   * Return the number of days in the date\'s month\n   *\n   * @param  int|Date d Date or timestamp in milliseconds\n   * @return int Number of days in the date\'s month\n   */getDayCountInMonth:function(d){\'use strict\';return this.getEndOfMonth(d).getDate()},/**\n   * Return the number of days in the date\'s year\n   *\n   * @param  int|Date d Date or timestamp in milliseconds\n   * @return int Number of days in the date\'s year\n   */getDayCountInYear:function(d){\'use strict\';if("number"==typeof d){d=new Date(d)}return 1===new Date(d.getFullYear(),1,29).getMonth()?366:365},/**\n   * Get the weekday from a date\n   *\n   * Return the week day number (0-6) of a date,\n   * depending on whether the week start on monday or sunday\n   *\n   * @param  Date d\n   * @return int The week day number (0-6)\n   */getWeekDay:function(d){\'use strict\';if(!1===this.options.weekStartOnMonday){return d.getDay()}return 0===d.getDay()?6:d.getDay()-1},/**\n   * Get the last day of the month\n   * @param  Date|int  d  Date or timestamp in milliseconds\n   * @return Date      Last day of the month\n   */getEndOfMonth:function(d){\'use strict\';if("number"==typeof d){d=new Date(d)}return new Date(d.getFullYear(),d.getMonth()+1,0)},/**\n   *\n   * @param  Date date\n   * @param  int count\n   * @param  string step\n   * @return Date\n   */jumpDate:function(date,count,step){\'use strict\';var d=new Date(date);switch(step){case"hour":d.setHours(d.getHours()+count);break;case"day":d.setHours(d.getHours()+24*count);break;case"week":d.setHours(d.getHours()+7*(24*count));break;case"month":d.setMonth(d.getMonth()+count);break;case"year":d.setFullYear(d.getFullYear()+count);}return new Date(d)},// =========================================================================//\n// DOMAIN COMPUTATION                            //\n// =========================================================================//\n/**\n   * Return all the minutes between 2 dates\n   *\n   * @param  Date  d  date  A date\n   * @param  int|date  range  Number of minutes in the range, or a stop date\n   * @return array  An array of minutes\n   */getMinuteDomain:function(d,range){\'use strict\';var start=new Date(d.getFullYear(),d.getMonth(),d.getDate(),d.getHours()),stop=null;if(range instanceof Date){stop=new Date(range.getFullYear(),range.getMonth(),range.getDate(),range.getHours())}else{stop=new Date(+start+60*(1e3*range))}return d3.time.minutes(Math.min(start,stop),Math.max(start,stop))},/**\n   * Return all the hours between 2 dates\n   *\n   * @param  Date  d  A date\n   * @param  int|date  range  Number of hours in the range, or a stop date\n   * @return array  An array of hours\n   */getHourDomain:function(d,range){\'use strict\';var start=new Date(d.getFullYear(),d.getMonth(),d.getDate(),d.getHours()),stop=null;if(range instanceof Date){stop=new Date(range.getFullYear(),range.getMonth(),range.getDate(),range.getHours())}else{stop=new Date(start);stop.setHours(stop.getHours()+range)}var domains=d3.time.hours(Math.min(start,stop),Math.max(start,stop)),i=0,total=domains.length;// Passing from DST to standard time\n// If there are 25 hours, let\'s compress the duplicate hours\nfor(i=0;i<total;i+=1){if(0<i&&domains[i].getHours()===domains[i-1].getHours()){this.DSTDomain.push(domains[i].getTime());domains.splice(i,1);break}}// d3.time.hours is returning more hours than needed when changing\n// from DST to standard time, because there is really 2 hours between\n// 1am and 2am!\nif("number"==typeof range&&domains.length>Math.abs(range)){domains.splice(domains.length-1,1)}return domains},/**\n   * Return all the days between 2 dates\n   *\n   * @param  Date    d    A date\n   * @param  int|date  range  Number of days in the range, or a stop date\n   * @return array  An array of weeks\n   */getDayDomain:function(d,range){\'use strict\';var start=new Date(d.getFullYear(),d.getMonth(),d.getDate()),stop=null;if(range instanceof Date){stop=new Date(range.getFullYear(),range.getMonth(),range.getDate())}else{stop=new Date(start);stop=new Date(stop.setDate(stop.getDate()+parseInt(range,10)))}return d3.time.days(Math.min(start,stop),Math.max(start,stop))},/**\n   * Return all the weeks between 2 dates\n   *\n   * @param  Date  d  A date\n   * @param  int|date  range  Number of minutes in the range, or a stop date\n   * @return array  An array of weeks\n   */getWeekDomain:function(d,range){\'use strict\';var weekStart;if(!1===this.options.weekStartOnMonday){weekStart=new Date(d.getFullYear(),d.getMonth(),d.getDate()-d.getDay())}else{if(1===d.getDay()){weekStart=new Date(d.getFullYear(),d.getMonth(),d.getDate())}else if(0===d.getDay()){weekStart=new Date(d.getFullYear(),d.getMonth(),d.getDate());weekStart.setDate(weekStart.getDate()-6)}else{weekStart=new Date(d.getFullYear(),d.getMonth(),d.getDate()-d.getDay()+1)}}var endDate=new Date(weekStart),stop=range;if("object"!=typeof range){stop=new Date(endDate.setDate(endDate.getDate()+7*range))}return!0===this.options.weekStartOnMonday?d3.time.mondays(Math.min(weekStart,stop),Math.max(weekStart,stop)):d3.time.sundays(Math.min(weekStart,stop),Math.max(weekStart,stop))},/**\n   * Return all the months between 2 dates\n   *\n   * @param  Date    d    A date\n   * @param  int|date  range  Number of months in the range, or a stop date\n   * @return array  An array of months\n   */getMonthDomain:function(d,range){\'use strict\';var start=new Date(d.getFullYear(),d.getMonth()),stop=null;if(range instanceof Date){stop=new Date(range.getFullYear(),range.getMonth())}else{stop=new Date(start);stop=stop.setMonth(stop.getMonth()+range)}return d3.time.months(Math.min(start,stop),Math.max(start,stop))},/**\n   * Return all the years between 2 dates\n   *\n   * @param  Date  d  date  A date\n   * @param  int|date  range  Number of minutes in the range, or a stop date\n   * @return array  An array of hours\n   */getYearDomain:function(d,range){\'use strict\';var start=new Date(d.getFullYear(),0),stop=null;if(range instanceof Date){stop=new Date(range.getFullYear(),0)}else{stop=new Date(d.getFullYear()+range,0)}return d3.time.years(Math.min(start,stop),Math.max(start,stop))},/**\n   * Get an array of domain start dates\n   *\n   * @param  int|Date date A random date included in the wanted domain\n   * @param  int|Date range Number of dates to get, or a stop date\n   * @return Array of dates\n   */getDomain:function(date,range){\'use strict\';if("number"==typeof date){date=new Date(date)}if(2>arguments.length){range=this.options.range}switch(this.options.domain){case"hour":var domains=this.getHourDomain(date,range);// Case where an hour is missing, when passing from standard time to DST\n// Missing hour is perfectly acceptabl in subDomain, but not in domains\nif("number"==typeof range&&domains.length<range){if(0<range){domains.push(this.getHourDomain(domains[domains.length-1],2)[1])}else{domains.shift(this.getHourDomain(domains[0],-2)[0])}}return domains;case"day":return this.getDayDomain(date,range);case"week":return this.getWeekDomain(date,range);case"month":return this.getMonthDomain(date,range);case"year":return this.getYearDomain(date,range);}},/* jshint maxcomplexity: false */getSubDomain:function(date){\'use strict\';if("number"==typeof date){date=new Date(date)}var parent=this,computeDaySubDomainSize=function(date,domain){switch(domain){case"year":return parent.getDayCountInYear(date);case"month":return parent.getDayCountInMonth(date);case"week":return 7;}},computeMinSubDomainSize=function(date,domain){switch(domain){case"hour":return 60;case"day":return 1440;case"week":return 10080;}},computeHourSubDomainSize=function(date,domain){switch(domain){case"day":return 24;case"week":return 168;case"month":return 24*parent.getDayCountInMonth(date);}},computeWeekSubDomainSize=function(date,domain){if("month"===domain){var endOfMonth=new Date(date.getFullYear(),date.getMonth()+1,0),endWeekNb=parent.getWeekNumber(endOfMonth),startWeekNb=parent.getWeekNumber(new Date(date.getFullYear(),date.getMonth()));if(startWeekNb>endWeekNb){startWeekNb=0;endWeekNb+=1}return endWeekNb-startWeekNb+1}else if("year"===domain){return parent.getWeekNumber(new Date(date.getFullYear(),11,31))}};/**\n     * @return int\n     */switch(this.options.subDomain){case"x_min":case"min":return this.getMinuteDomain(date,computeMinSubDomainSize(date,this.options.domain));case"x_hour":case"hour":return this.getHourDomain(date,computeHourSubDomainSize(date,this.options.domain));case"x_day":case"day":return this.getDayDomain(date,computeDaySubDomainSize(date,this.options.domain));case"x_week":case"week":return this.getWeekDomain(date,computeWeekSubDomainSize(date,this.options.domain));case"x_month":case"month":return this.getMonthDomain(date,12);}},/**\n   * Get the n-th next domain after the calendar newest (rightmost) domain\n   * @param  int n\n   * @return Date The start date of the wanted domain\n   */getNextDomain:function(n){\'use strict\';if(0===arguments.length){n=1}return this.getDomain(this.jumpDate(this.getDomainKeys().pop(),n,this.options.domain),1)[0]},/**\n   * Get the n-th domain before the calendar oldest (leftmost) domain\n   * @param  int n\n   * @return Date The start date of the wanted domain\n   */getPreviousDomain:function(n){\'use strict\';if(0===arguments.length){n=1}return this.getDomain(this.jumpDate(this.getDomainKeys().shift(),-n,this.options.domain),1)[0]},// =========================================================================//\n// DATAS                                  //\n// =========================================================================//\n/**\n   * Fetch and interpret data from the datasource\n   *\n   * @param string|object source\n   * @param Date startDate\n   * @param Date endDate\n   * @param function callback\n   * @param function|boolean afterLoad function used to convert the data into a json object. Use true to use the afterLoad callback\n   * @param updateMode\n   *\n   * @return mixed\n   * - True if there are no data to load\n   * - False if data are loaded asynchronously\n   */getDatas:function(source,startDate,endDate,callback,afterLoad,updateMode){\'use strict\';var self=this;if(5>arguments.length){afterLoad=!0}if(6>arguments.length){updateMode=this.APPEND_ON_UPDATE}var _callback=function(error,data){if(!1!==afterLoad){if("function"==typeof afterLoad){data=afterLoad(data)}else if("function"==typeof self.options.afterLoadData){data=self.options.afterLoadData(data)}else{console.log("Provided callback for afterLoadData is not a function.")}}else if("csv"===self.options.dataType||"tsv"===self.options.dataType){data=this.interpretCSV(data)}self.parseDatas(data,updateMode,startDate,endDate);if("function"==typeof callback){callback()}};switch(typeof source){case"string":if(""===source){_callback(null,{});return!0}else{var url=this.parseURI(source,startDate,endDate),requestType="GET";if(null!==self.options.dataPostPayload){requestType="POST"}var payload=null;if(null!==self.options.dataPostPayload){payload=this.parseURI(self.options.dataPostPayload,startDate,endDate)}var xhr=null;switch(this.options.dataType){case"json":xhr=d3.json(url);break;case"csv":xhr=d3.csv(url);break;case"tsv":xhr=d3.tsv(url);break;case"txt":xhr=d3.text(url,"text/plain");break;}// jshint maxdepth:5\nif(null!==self.options.dataRequestHeaders){for(var header in self.options.dataRequestHeaders){if(self.options.dataRequestHeaders.hasOwnProperty(header)){xhr.header(header,self.options.dataRequestHeaders[header])}}}xhr.send(requestType,payload,_callback)}return!1;case"object":if(source===Object(source)){_callback(null,source);return!1}/* falls through */default:_callback(null,{});return!0;}},/**\n   * Populate the calendar internal data\n   *\n   * @param object data\n   * @param constant updateMode\n   * @param Date startDate\n   * @param Date endDate\n   *\n   * @return void\n   */parseDatas:function(data,updateMode,startDate,endDate){\'use strict\';if(updateMode===this.RESET_ALL_ON_UPDATE){this._domains.forEach(function(key,value){value.forEach(function(element,index,array){array[index].v=null})})}var temp={},extractTime=function(d){return d.t};/*jshint forin:false */for(var d in data){var date=new Date(1e3*d),domainUnit=this.getDomain(date)[0].getTime();// The current data belongs to a domain that was compressed\n// Compress the data for the two duplicate hours into the same hour\nif(0<=this.DSTDomain.indexOf(domainUnit)){// Re-assign all data to the first or the second duplicate hours\n// depending on which is visible\nif(this._domains.has(domainUnit-3600000)){domainUnit-=3600000}}// Skip if data is not relevant to current domain\nif(isNaN(d)||!data.hasOwnProperty(d)||!this._domains.has(domainUnit)||!(domainUnit>=+startDate&&domainUnit<+endDate)){continue}var subDomainsData=this._domains.get(domainUnit);if(!temp.hasOwnProperty(domainUnit)){temp[domainUnit]=subDomainsData.map(extractTime)}var index=temp[domainUnit].indexOf(this._domainType[this.options.subDomain].extractUnit(date));if(updateMode===this.RESET_SINGLE_ON_UPDATE){subDomainsData[index].v=data[d]}else{if(!isNaN(subDomainsData[index].v)){subDomainsData[index].v+=data[d]}else{subDomainsData[index].v=data[d]}}}},parseURI:function(str,startDate,endDate){\'use strict\';// Use a timestamp in seconds\nstr=str.replace(/\\{\\{t:start\\}\\}/g,startDate.getTime()/1e3);str=str.replace(/\\{\\{t:end\\}\\}/g,endDate.getTime()/1e3);// Use a string date, following the ISO-8601\nstr=str.replace(/\\{\\{d:start\\}\\}/g,startDate.toISOString());str=str.replace(/\\{\\{d:end\\}\\}/g,endDate.toISOString());return str},interpretCSV:function(data){\'use strict\';var d={},keys=Object.keys(data[0]),i,total;for(i=0,total=data.length;i<total;i+=1){d[data[i][keys[0]]]=+data[i][keys[1]]}return d},/**\n   * Handle the calendar layout and dimension\n   *\n   * Expand and shrink the container depending on its children dimension\n   * Also rearrange the children position depending on their dimension,\n   * and the legend position\n   *\n   * @return void\n   */resize:function(){\'use strict\';var parent=this,options=parent.options,legendWidth=options.displayLegend?parent.Legend.getDim("width")+options.legendMargin[1]+options.legendMargin[3]:0,legendHeight=options.displayLegend?parent.Legend.getDim("height")+options.legendMargin[0]+options.legendMargin[2]:0,graphWidth=parent.graphDim.width-options.domainGutter-options.cellPadding,graphHeight=parent.graphDim.height-options.domainGutter-options.cellPadding;this.root.transition().duration(options.animationDuration).attr("width",function(){if("middle"===options.legendVerticalPosition||"center"===options.legendVerticalPosition){return graphWidth+legendWidth}return Math.max(graphWidth,legendWidth)}).attr("height",function(){if("middle"===options.legendVerticalPosition||"center"===options.legendVerticalPosition){return Math.max(graphHeight,legendHeight)}return graphHeight+legendHeight});this.root.select(".graph").transition().duration(options.animationDuration).attr("y",function(){if("top"===options.legendVerticalPosition){return legendHeight}return 0}).attr("x",function(){if(("middle"===options.legendVerticalPosition||"center"===options.legendVerticalPosition)&&"left"===options.legendHorizontalPosition){return legendWidth}return 0})},// =========================================================================//\n// PUBLIC API                                //\n// =========================================================================//\n/**\n   * Shift the calendar forward\n   */next:function(n){\'use strict\';if(0===arguments.length){n=1}return this.loadNextDomain(n)},/**\n   * Shift the calendar backward\n   */previous:function(n){\'use strict\';if(0===arguments.length){n=1}return this.loadPreviousDomain(n)},/**\n   * Jump directly to a specific date\n   *\n   * JumpTo will scroll the calendar until the wanted domain with the specified\n   * date is visible. Unless you set reset to true, the wanted domain\n   * will not necessarily be the first (leftmost) domain of the calendar.\n   *\n   * @param Date date Jump to the domain containing that date\n   * @param bool reset Whether the wanted domain should be the first domain of the calendar\n   * @param bool True of the calendar was scrolled\n   */jumpTo:function(date,reset){\'use strict\';if(2>arguments.length){reset=!1}var domains=this.getDomainKeys(),firstDomain=domains[0],lastDomain=domains[domains.length-1];if(date<firstDomain){return this.loadPreviousDomain(this.getDomain(firstDomain,date).length)}else{if(reset){return this.loadNextDomain(this.getDomain(firstDomain,date).length)}if(date>lastDomain){return this.loadNextDomain(this.getDomain(lastDomain,date).length)}}return!1},/**\n   * Navigate back to the start date\n   *\n   * @since  3.3.8\n   * @return void\n   */rewind:function(){\'use strict\';this.jumpTo(this.options.start,!0)},/**\n   * Update the calendar with new data\n   *\n   * @param  object|string    dataSource    The calendar\'s datasource, same type as this.options.data\n   * @param  boolean|function    afterLoad    Whether to execute afterLoad() on the data. Pass directly a function\n   * if you don\'t want to use the afterLoad() callback\n   */update:function(dataSource,afterLoad,updateMode){\'use strict\';if(0===arguments.length){dataSource=this.options.data}if(2>arguments.length){afterLoad=!0}if(3>arguments.length){updateMode=this.RESET_ALL_ON_UPDATE}var domains=this.getDomainKeys(),self=this;this.getDatas(dataSource,new Date(domains[0]),this.getSubDomain(domains[domains.length-1]).pop(),function(){self.fill();self.afterUpdate()},afterLoad,updateMode)},/**\n   * Set the legend\n   *\n   * @param array legend an array of integer, representing the different threshold value\n   * @param array colorRange an array of 2 hex colors, for the minimum and maximum colors\n   */setLegend:function(){\'use strict\';var oldLegend=this.options.legend.slice(0);if(1<=arguments.length&&Array.isArray(arguments[0])){this.options.legend=arguments[0]}if(2<=arguments.length){if(Array.isArray(arguments[1])&&2<=arguments[1].length){this.options.legendColors=[arguments[1][0],arguments[1][1]]}else{this.options.legendColors=arguments[1]}}if(0<arguments.length&&!arrayEquals(oldLegend,this.options.legend)||2<=arguments.length){this.Legend.buildColors();this.fill()}this.Legend.redraw(this.graphDim.width-this.options.domainGutter-this.options.cellPadding)},/**\n   * Remove the legend\n   *\n   * @return bool False if there is no legend to remove\n   */removeLegend:function(){\'use strict\';if(!this.options.displayLegend){return!1}this.options.displayLegend=!1;this.Legend.remove();return!0},/**\n   * Display the legend\n   *\n   * @return bool False if the legend was already displayed\n   */showLegend:function(){\'use strict\';if(this.options.displayLegend){return!1}this.options.displayLegend=!0;this.Legend.redraw(this.graphDim.width-this.options.domainGutter-this.options.cellPadding);return!0},/**\n   * Highlight dates\n   *\n   * Add a highlight class to a set of dates\n   *\n   * @since  3.3.5\n   * @param  array Array of dates to highlight\n   * @return bool True if dates were highlighted\n   */highlight:function(args){\'use strict\';if(0<(this.options.highlight=this.expandDateSetting(args)).length){this.fill();return!0}return!1},/**\n   * Destroy the calendar\n   *\n   * Usage: cal = cal.destroy();\n   *\n   * @since  3.3.6\n   * @param function A callback function to trigger after destroying the calendar\n   * @return null\n   */destroy:function(callback){\'use strict\';this.root.transition().duration(this.options.animationDuration).attr("width",0).attr("height",0).remove().each("end",function(){if("function"==typeof callback){callback()}else if("undefined"!=typeof callback){console.log("Provided callback for destroy() is not a function.")}});return null},getSVG:function(){\'use strict\';for(var styles={".cal-heatmap-container":{},".graph":{},".graph-rect":{},"rect.highlight":{},"rect.now":{},"rect.highlight-now":{},"text.highlight":{},"text.now":{},"text.highlight-now":{},".domain-background":{},".graph-label":{},".subdomain-text":{},".q0":{},".qi":{}},j=1,total=this.options.legend.length+1;j<=total;j+=1){styles[".q"+j]={}}var root=this.root,whitelistStyles=[// SVG specific properties\n"stroke","stroke-width","stroke-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-miterlimit","fill","fill-opacity","fill-rule","marker","marker-start","marker-mid","marker-end","alignement-baseline","baseline-shift","dominant-baseline","glyph-orientation-horizontal","glyph-orientation-vertical","kerning","text-anchor","shape-rendering",// Text Specific properties\n"text-transform","font-family","font","font-size","font-weight"],filterStyles=function(attribute,property,value){if(-1!==whitelistStyles.indexOf(property)){styles[attribute][property]=value}},getElement=function(e){return root.select(e)[0][0]};/* jshint forin:false */for(var element in styles){if(!styles.hasOwnProperty(element)){continue}var dom=getElement(element);if(null===dom){continue}// The DOM Level 2 CSS way\n/* jshint maxdepth: false */if("getComputedStyle"in window){var cs=getComputedStyle(dom,null);if(0!==cs.length){for(var i=0;i<cs.length;i+=1){filterStyles(element,cs.item(i),cs.getPropertyValue(cs.item(i)))}// Opera workaround. Opera doesn"t support `item`/`length`\n// on CSSStyleDeclaration.\n}else{for(var k in cs){if(cs.hasOwnProperty(k)){filterStyles(element,k,cs[k])}}}// The IE way\n}else if("currentStyle"in dom){var css=dom.currentStyle;for(var p in css){filterStyles(element,p,css[p])}}}var string="<svg xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\"><style type=\\"text/css\\"><![CDATA[ ";for(var style in styles){string+=style+" {\\n";for(var l in styles[style]){string+="\\t"+l+":"+styles[style][l]+";\\n"}string+="}\\n"}string+="]]></style>";string+=new XMLSerializer().serializeToString(this.root[0][0]);string+="</svg>";return string}};// =========================================================================//\n// DOMAIN POSITION COMPUTATION                        //\n// =========================================================================//\n/**\n * Compute the position of a domain, relative to the calendar\n */var DomainPosition=function(){\'use strict\';this.positions=d3.map()};DomainPosition.prototype.getPosition=function(d){\'use strict\';return this.positions.get(d)};DomainPosition.prototype.getPositionFromIndex=function(i){\'use strict\';var domains=this.getKeys();return this.positions.get(domains[i])};DomainPosition.prototype.getLast=function(){\'use strict\';var domains=this.getKeys();return this.positions.get(domains[domains.length-1])};DomainPosition.prototype.setPosition=function(d,dim){\'use strict\';this.positions.set(d,dim)};DomainPosition.prototype.shiftRightBy=function(exitingDomainDim){\'use strict\';this.positions.forEach(function(key,value){this.set(key,value-exitingDomainDim)});var domains=this.getKeys();this.positions.remove(domains[0])};DomainPosition.prototype.shiftLeftBy=function(enteringDomainDim){\'use strict\';this.positions.forEach(function(key,value){this.set(key,value+enteringDomainDim)});var domains=this.getKeys();this.positions.remove(domains[domains.length-1])};DomainPosition.prototype.getKeys=function(){\'use strict\';return this.positions.keys().sort(function(a,b){return parseInt(a,10)-parseInt(b,10)})};// =========================================================================//\n// LEGEND                                  //\n// =========================================================================//\nvar Legend=function(calendar){\'use strict\';this.calendar=calendar;this.computeDim();if(null!==calendar.options.legendColors){this.buildColors()}};Legend.prototype.computeDim=function(){\'use strict\';var options=this.calendar.options;// Shorter accessor for variable name mangling when minifying\nthis.dim={width:options.legendCellSize*(options.legend.length+1)+options.legendCellPadding*options.legend.length,height:options.legendCellSize}};Legend.prototype.remove=function(){\'use strict\';this.calendar.root.select(".graph-legend").remove();this.calendar.resize()};Legend.prototype.redraw=function(width){\'use strict\';if(!this.calendar.options.displayLegend){return!1}var parent=this,calendar=this.calendar,legend=calendar.root,legendItem,options=calendar.options;// Shorter accessor for variable name mangling when minifying\nthis.computeDim();var _legend=options.legend.slice(0);_legend.push(_legend[_legend.length-1]+1);var legendElement=calendar.root.select(".graph-legend");if(null!==legendElement[0][0]){legend=legendElement;legendItem=legend.select("g").selectAll("rect").data(_legend)}else{// Creating the new legend DOM if it doesn\'t already exist\nlegend="top"===options.legendVerticalPosition?legend.insert("svg",".graph"):legend.append("svg");legend.attr("x",getLegendXPosition()).attr("y",getLegendYPosition());legendItem=legend.attr("class","graph-legend").attr("height",parent.getDim("height")).attr("width",parent.getDim("width")).append("g").selectAll().data(_legend)}legendItem.enter().append("rect").call(legendCellLayout).attr("class",function(d){return calendar.Legend.getClass(d,null===calendar.legendScale)}).attr("fill-opacity",0).call(function(selection){if(null!==calendar.legendScale&&null!==options.legendColors&&options.legendColors.hasOwnProperty("base")){selection.attr("fill",options.legendColors.base)}}).append("title");legendItem.exit().transition().duration(options.animationDuration).attr("fill-opacity",0).remove();legendItem.transition().delay(function(d,i){return options.animationDuration*i/10}).call(legendCellLayout).attr("fill-opacity",1).call(function(element){element.attr("fill",function(d,i){if(null===calendar.legendScale){return""}if(0===i){return calendar.legendScale(d-1)}return calendar.legendScale(options.legend[i-1])});element.attr("class",function(d){return calendar.Legend.getClass(d,null===calendar.legendScale)})});function legendCellLayout(selection){selection.attr("width",options.legendCellSize).attr("height",options.legendCellSize).attr("rx",options.legendCellRadius).attr("ry",options.legendCellRadius).attr("x",function(d,i){return i*(options.legendCellSize+options.legendCellPadding)})}legendItem.select("title").text(function(d,i){if(0===i){return calendar.formatStringWithObject(options.legendTitleFormat.lower,{min:options.legend[i],name:options.itemName[1]})}else if(i===_legend.length-1){return calendar.formatStringWithObject(options.legendTitleFormat.upper,{max:options.legend[i-1],name:options.itemName[1]})}else{return calendar.formatStringWithObject(options.legendTitleFormat.inner,{down:options.legend[i-1],up:options.legend[i],name:options.itemName[1]})}});legendItem.on("mouseover",function(d){calendar.legendTip.show(d,this)}).on("mouseout",function(){calendar.legendTip.hide()});legend.transition().duration(options.animationDuration).attr("x",getLegendXPosition()).attr("y",getLegendYPosition()).attr("width",parent.getDim("width")).attr("height",parent.getDim("height"));legend.select("g").transition().duration(options.animationDuration).attr("transform",function(){if("vertical"===options.legendOrientation){return"rotate(90 "+options.legendCellSize/2+" "+options.legendCellSize/2+")"}return""});function getLegendXPosition(){switch(options.legendHorizontalPosition){case"right":if("center"===options.legendVerticalPosition||"middle"===options.legendVerticalPosition){return width+options.legendMargin[3]}return width-parent.getDim("width")-options.legendMargin[1];case"middle":case"center":return Math.round(width/2-parent.getDim("width")/2);default:return options.legendMargin[3];}}function getLegendYPosition(){if("bottom"===options.legendVerticalPosition){return calendar.graphDim.height+options.legendMargin[0]-options.domainGutter-options.cellPadding}return options.legendMargin[0]}calendar.resize()};/**\n * Return the dimension of the legend\n *\n * Takes into account rotation\n *\n * @param  string axis Width or height\n * @return int height or width in pixels\n */Legend.prototype.getDim=function(axis){\'use strict\';var isHorizontal="horizontal"===this.calendar.options.legendOrientation;switch(axis){case"width":return this.dim[isHorizontal?"width":"height"];case"height":return this.dim[isHorizontal?"height":"width"];}};Legend.prototype.buildColors=function(){\'use strict\';var options=this.calendar.options;// Shorter accessor for variable name mangling when minifying\nif(null===options.legendColors){this.calendar.legendScale=null;return!1}var _colorRange=[];if(Array.isArray(options.legendColors)){_colorRange=options.legendColors}else if(options.legendColors.hasOwnProperty("min")&&options.legendColors.hasOwnProperty("max")){_colorRange=[options.legendColors.min,options.legendColors.max]}else{options.legendColors=null;return!1}var _legend=options.legend.slice(0);if(0<_legend[0]){_legend.unshift(0)}else if(0>=_legend[0]){// Let\'s guess the leftmost value, it we have to add one\n_legend.unshift(_legend[0]-(_legend[_legend.length-1]-_legend[0])/_legend.length)}var colorScale;if(options.legendColors.hasOwnProperty("colorScale")){colorScale=options.legendColors.colorScale}else{colorScale=d3.scale.linear().range(_colorRange).interpolate(d3.interpolateHcl).domain([d3.min(_legend),d3.max(_legend)])}var legendColors=_legend.map(function(element){return colorScale(element)});this.calendar.legendScale=d3.scale.threshold().domain(options.legend).range(legendColors);return!0};/**\n * Return the classname on the legend for the specified value\n *\n * @param integer n Value associated to a date\n * @param bool withCssClass Whether to display the css class used to style the cell.\n *                          Disabling will allow styling directly via html fill attribute\n *\n * @return string Classname according to the legend\n */Legend.prototype.getClass=function(n,withCssClass){\'use strict\';if(null===n||isNaN(n)){return""}for(var index=[this.calendar.options.legend.length+1],i=0,total=this.calendar.options.legend.length-1;i<=total;i+=1){if(0<this.calendar.options.legend[0]&&0>n){index=["1","i"];break}if(n<=this.calendar.options.legend[i]){index=[i+1];break}}if(0===n){index.push(0)}index.unshift("");return(index.join(" r")+(withCssClass?index.join(" q"):"")).trim()};/**\n * #source http://stackoverflow.com/a/383245/805649\n */function mergeRecursive(obj1,obj2){\'use strict\';/*jshint forin:false */for(var p in obj2){try{// Property in destination object set; update its value.\nif(obj2[p].constructor===Object){obj1[p]=mergeRecursive(obj1[p],obj2[p])}else{obj1[p]=obj2[p]}}catch(e){// Property in destination object not set; create it and set its value.\nobj1[p]=obj2[p]}}return obj1}/**\n * Check if 2 arrays are equals\n *\n * @link http://stackoverflow.com/a/14853974/805649\n * @param  array array the array to compare to\n * @return bool true of the 2 arrays are equals\n */function arrayEquals(arrayA,arrayB){\'use strict\';// if the other array is a falsy value, return\nif(!arrayB||!arrayA){return!1}// compare lengths - can save a lot of time\nif(arrayA.length!==arrayB.length){return!1}for(var i=0;i<arrayA.length;i+=1){// Check if we have nested arrays\nif(arrayA[i]instanceof Array&&arrayB[i]instanceof Array){// recurse into the nested arrays\nif(!arrayEquals(arrayA[i],arrayB[i])){return!1}}else if(arrayA[i]!==arrayB[i]){// Warning - two different object instances will never be equal: {x:20} != {x:20}\nreturn!1}}return!0}/* harmony default export */ var cal_heatmap = (CalHeatMap);\n// EXTERNAL MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/legacy-plugin-chart-calendar/src/vendor/cal-heatmap.css\nvar vendor_cal_heatmap = __webpack_require__(2245);\n\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/legacy-plugin-chart-calendar/src/Calendar.js\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * "License"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */function convertUTC(dttm){return new Date(dttm.getUTCFullYear(),dttm.getUTCMonth(),dttm.getUTCDate(),dttm.getUTCHours(),dttm.getUTCMinutes(),dttm.getUTCSeconds())}const convertUTCTS=uts=>convertUTC(new Date(uts)).getTime(),propTypes={data:prop_types_default.a.shape({// Object hashed by metric name,\n// then hashed by timestamp (in seconds, not milliseconds) as float\n// the innermost value is count\n// e.g. { count_distinct_something: { 1535034236.0: 3 } }\ndata:prop_types_default.a.object,domain:prop_types_default.a.string,range:prop_types_default.a.number,// timestamp in milliseconds\nstart:prop_types_default.a.number,subdomain:prop_types_default.a.string}),height:prop_types_default.a.number,// eslint-disable-next-line react/sort-prop-types\ncellPadding:prop_types_default.a.number,// eslint-disable-next-line react/sort-prop-types\ncellRadius:prop_types_default.a.number,// eslint-disable-next-line react/sort-prop-types\ncellSize:prop_types_default.a.number,linearColorScheme:prop_types_default.a.string,showLegend:prop_types_default.a.bool,showMetricName:prop_types_default.a.bool,showValues:prop_types_default.a.bool,steps:prop_types_default.a.number,timeFormat:prop_types_default.a.string,valueFormat:prop_types_default.a.string,verboseMap:prop_types_default.a.object};function Calendar(element,props){const{data,height,cellPadding=3,cellRadius=0,cellSize=10,domainGranularity,linearColorScheme,showLegend,showMetricName,showValues,steps,subdomainGranularity,timeFormat,valueFormat,verboseMap}=props,valueFormatter=Object(NumberFormatterRegistrySingleton["c" /* getNumberFormatter */])(valueFormat),timeFormatter=Object(TimeFormatterRegistrySingleton["d" /* getTimeFormatter */])(timeFormat),container=Object(src_select["a" /* default */])(element).classed("superset-legacy-chart-calendar",!0).style("height",height);container.selectAll("*").remove();const div=container.append("div"),subDomainTextFormat=showValues?(date,value)=>valueFormatter(value):null,metricsData={};Object.keys(data.data).forEach(metric=>{metricsData[metric]={};Object.keys(data.data[metric]).forEach(ts=>{metricsData[metric][convertUTCTS(1e3*ts)/1e3]=data.data[metric][ts]})});Object.keys(metricsData).forEach(metric=>{const calContainer=div.append("div");if(showMetricName){calContainer.text(`Metric: ${verboseMap[metric]||metric}`)}const timestamps=metricsData[metric],extents=extent(Object.keys(timestamps),key=>timestamps[key]),step=(extents[1]-extents[0])/(steps-1),colorScale=Object(SequentialSchemeRegistrySingleton["a" /* default */])().get(linearColorScheme).createLinearScale(extents),legend=range(steps).map(i=>extents[0]+step*i),legendColors=legend.map(x=>colorScale(x)),cal=new cal_heatmap;cal.init({start:convertUTCTS(data.start),data:timestamps,itemSelector:calContainer.node(),legendVerticalPosition:"top",cellSize,cellPadding,cellRadius,legendCellSize:cellSize,legendCellPadding:2,legendCellRadius:cellRadius,tooltip:!0,domain:domainGranularity,subDomain:subdomainGranularity,range:data.range,browsing:!0,legend,legendColors:{colorScale,min:legendColors[0],max:legendColors[legendColors.length-1],empty:"white"},displayLegend:showLegend,itemName:"",valueFormatter,timeFormatter,subDomainTextFormat})})}Calendar.displayName="Calendar";Calendar.propTypes=propTypes;/* harmony default export */ var src_Calendar = (Calendar);\n// CONCATENATED MODULE: /Users/erik_ritter/repos/github.com/apache-superset/superset-ui/plugins/legacy-plugin-chart-calendar/src/ReactCalendar.jsx\nfunction _objectWithoutProperties(source,excluded){if(null==source)return{};var target=_objectWithoutPropertiesLoose(source,excluded),key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(0<=excluded.indexOf(key))continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key]}}return target}function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var target={},sourceKeys=Object.keys(source),key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(0<=excluded.indexOf(key))continue;target[key]=source[key]}return target}/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * "License"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */const ReactComponent=Object(reactify["a" /* default */])(src_Calendar),Calender=(_ref)=>{let{className}=_ref,otherProps=_objectWithoutProperties(_ref,["className"]);return/*#__PURE__*/react_default.a.createElement("div",{className:className},/*#__PURE__*/react_default.a.createElement(ReactComponent,otherProps))};Calender.displayName="Calender";Calender.defaultProps={otherProps:{}};Calender.propTypes={className:prop_types_default.a.string.isRequired,otherProps:prop_types_default.a.objectOf(prop_types_default.a.any)};/* harmony default export */ var ReactCalendar = __webpack_exports__["default"] = (Object(style["c" /* styled */])(Calender)`\n  .superset-legacy-chart-calendar {\n    padding: 10px;\n    position: static !important;\n    overflow: auto !important;\n  }\n\n  .superset-legacy-chart-calendar .ch-tooltip {\n    margin-left: 20px;\n    margin-top: 5px;\n  }\n`);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2516\n')}}]);